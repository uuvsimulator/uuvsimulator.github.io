{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Chat on Discord The UUV Simulator is a package containing the implementation of Gazebo plugins and ROS nodes necessary for the simulation of unmanned underwater vehicles, such as ROVs (remotely operated vehicles) and AUVs (autonomous underwater vehicles). To send questions and/or issues, please refer to the repository\u2019s issues page . Purpose of the project \u00b6 This software is a research prototype, originally developed for the EU ECSEL Project 662107 SWARMs . The software is not ready for production use. However, the license conditions of the applicable Open Source licenses allow you to adapt the software to your needs. Before using it in a safety relevant setting, make sure that the software fulfills your requirements and adjust it according to any applicable safety standards (e.g. ISO 26262). Reference \u00b6 If you wish to use the UUV Simulator in a research project, please cite our paper @inproceedings{Manhaes_2016, doi = {10.1109/oceans.2016.7761080}, url = {https://doi.org/10.1109%2Foceans.2016.7761080}, year = 2016, month = {sep}, publisher = {{ IEEE }} , author = {Musa Morena Marcusso Manh{\\~{a}}es and Sebastian A. Scherer and Martin Voss and Luiz Ricardo Douat and Thomas Rauschenbach}, title = {{ UUV } Simulator : A Gazebo-based package for underwater intervention and multi-robot simulation }, booktitle = {{ OCEANS } 2016 { MTS }/{ IEEE } Monterey } } List of repositories \u00b6 Name Documentation Releases CI Issues uuv_simulator uuv_plume_simulator rexrov2 eca_a9 desistek_saga lauv_gazebo Videos \u00b6 ROSCon 2018 \u00b6 ROSCon 2018 Madrid: Unmanned Underwater Vehicle Simulator: Enabling Simulation of Multi-Robot Underwater Missions with Gazebo from OSRF on Vimeo . EU-Project SWARMs \u00b6 Maritime Robot X Forum 2017 \u00b6","title":"Home"},{"location":"#purpose-of-the-project","text":"This software is a research prototype, originally developed for the EU ECSEL Project 662107 SWARMs . The software is not ready for production use. However, the license conditions of the applicable Open Source licenses allow you to adapt the software to your needs. Before using it in a safety relevant setting, make sure that the software fulfills your requirements and adjust it according to any applicable safety standards (e.g. ISO 26262).","title":"Purpose of the project"},{"location":"#reference","text":"If you wish to use the UUV Simulator in a research project, please cite our paper @inproceedings{Manhaes_2016, doi = {10.1109/oceans.2016.7761080}, url = {https://doi.org/10.1109%2Foceans.2016.7761080}, year = 2016, month = {sep}, publisher = {{ IEEE }} , author = {Musa Morena Marcusso Manh{\\~{a}}es and Sebastian A. Scherer and Martin Voss and Luiz Ricardo Douat and Thomas Rauschenbach}, title = {{ UUV } Simulator : A Gazebo-based package for underwater intervention and multi-robot simulation }, booktitle = {{ OCEANS } 2016 { MTS }/{ IEEE } Monterey } }","title":"Reference"},{"location":"#list-of-repositories","text":"Name Documentation Releases CI Issues uuv_simulator uuv_plume_simulator rexrov2 eca_a9 desistek_saga lauv_gazebo","title":"List of repositories"},{"location":"#videos","text":"","title":"Videos"},{"location":"#roscon-2018","text":"ROSCon 2018 Madrid: Unmanned Underwater Vehicle Simulator: Enabling Simulation of Multi-Robot Underwater Missions with Gazebo from OSRF on Vimeo .","title":"ROSCon 2018"},{"location":"#eu-project-swarms","text":"","title":"EU-Project SWARMs"},{"location":"#maritime-robot-x-forum-2017","text":"","title":"Maritime Robot X Forum 2017"},{"location":"api/","text":"C++ API \u00b6 List of all classes categorized by package and file. uuv_simulator \u00b6 uuv_gazebo_plugins \u00b6 BuoyantObject BuoyantObject Dynamics Dynamics DynamicsFactory DynamicsFirstOrder DynamicsZeroOrder ThrusterDynamicsBessa ThrusterDynamicsYoerger FinPlugin FinPlugin HydrodynamicModel HydrodynamicModel HydrodynamicModelFactory HMBox HMCylinder HMFossen HMSphere HMSpheroid LiftDragModel LiftDrag LiftDragFactory LiftDragQuadratic LiftDragTwoLines ThrusterConversionFcn ConversionFunction ConversionFunctionFactory ConversionFunctionBasic ConversionFunctionBessa ConversionFunctionLinearInterp ThrusterPlugin ThrusterPlugin UnderwaterObjectPlugin UnderwaterObjectPlugin uuv_gazebo_ros_plugins \u00b6 uuv_sensor_ros_plugins \u00b6 uuv_world_plugins \u00b6 uuv_world_ros_plugins \u00b6 Python API \u00b6 uuv_simulator \u00b6 uuv_auv_control_allocator \u00b6 uuv_auv_actuator_interface uuv_control_cascaded_pids \u00b6 PID uuv_thruster_manager \u00b6 uuv_thrusters uuv_trajectory_control \u00b6 uuv_control_interfaces uuv_trajectory_generator uuv_waypoints uuv_plume_simulator \u00b6 uuv_plume_simulator \u00b6 uuv_gm_process Python module that described a Gauss*Markov process of first*order and is used to compute 2D and 3D current velocity models. uuv_plume_model Python module to generate plume particles and compute their dynamic model based on the turbulent diffusion coefficients, current velocity and buoyancy.","title":"API"},{"location":"api/#c-api","text":"List of all classes categorized by package and file.","title":"C++ API"},{"location":"api/#uuv_simulator","text":"","title":"uuv_simulator"},{"location":"api/#uuv_gazebo_plugins","text":"BuoyantObject BuoyantObject Dynamics Dynamics DynamicsFactory DynamicsFirstOrder DynamicsZeroOrder ThrusterDynamicsBessa ThrusterDynamicsYoerger FinPlugin FinPlugin HydrodynamicModel HydrodynamicModel HydrodynamicModelFactory HMBox HMCylinder HMFossen HMSphere HMSpheroid LiftDragModel LiftDrag LiftDragFactory LiftDragQuadratic LiftDragTwoLines ThrusterConversionFcn ConversionFunction ConversionFunctionFactory ConversionFunctionBasic ConversionFunctionBessa ConversionFunctionLinearInterp ThrusterPlugin ThrusterPlugin UnderwaterObjectPlugin UnderwaterObjectPlugin","title":"uuv_gazebo_plugins"},{"location":"api/#uuv_gazebo_ros_plugins","text":"","title":"uuv_gazebo_ros_plugins"},{"location":"api/#uuv_sensor_ros_plugins","text":"","title":"uuv_sensor_ros_plugins"},{"location":"api/#uuv_world_plugins","text":"","title":"uuv_world_plugins"},{"location":"api/#uuv_world_ros_plugins","text":"","title":"uuv_world_ros_plugins"},{"location":"api/#python-api","text":"","title":"Python API"},{"location":"api/#uuv_simulator_1","text":"","title":"uuv_simulator"},{"location":"api/#uuv_auv_control_allocator","text":"uuv_auv_actuator_interface","title":"uuv_auv_control_allocator"},{"location":"api/#uuv_control_cascaded_pids","text":"PID","title":"uuv_control_cascaded_pids"},{"location":"api/#uuv_thruster_manager","text":"uuv_thrusters","title":"uuv_thruster_manager"},{"location":"api/#uuv_trajectory_control","text":"uuv_control_interfaces uuv_trajectory_generator uuv_waypoints","title":"uuv_trajectory_control"},{"location":"api/#uuv_plume_simulator","text":"","title":"uuv_plume_simulator"},{"location":"api/#uuv_plume_simulator_1","text":"uuv_gm_process Python module that described a Gauss*Markov process of first*order and is used to compute 2D and 3D current velocity models. uuv_plume_model Python module to generate plume particles and compute their dynamic model based on the turbulent diffusion coefficients, current velocity and buoyancy.","title":"uuv_plume_simulator"},{"location":"bibliography/","text":"Papers and reports \u00b6 Berg, V. (2012). Development and Commissioning of a DP system for ROV SF 30k (Master's thesis, Institutt for marin teknikk). Cerqueira, R\u00f4mulo, et al. \"A novel GPU-based sonar simulator for real-time applications.\" Computers & Graphics 68 (2017): 66-76. Hall, Raewyn, and Stuart Anstee. Trim Calculation Methods for a Dynamical Model of the REMUS 100 Autonomous Underwater Vehicle. Yoerger, Dana R., John G. Cooke, and J-JE Slotine. \"The influence of thruster dynamics on underwater vehicle behavior and their incorporation into control system design.\" IEEE Journal of Oceanic Engineering 15.3 (1990): 167-178. Bessa, Wallace Moreira, Max Suell Dutra, and Edwin Kreuzer. \"Thruster dynamics compensation for the positioning of underwater robotic vehicles through a fuzzy sliding mode based approach.\" ABCM Symposium Series in Mechatronics. Vol. 2. 2006. Refsnes, Jon Erling Gorset. \"Nonlinear model-based control of slender body AUVs.\" Norwegian University of Science and Technology 30.226 (2007): 229-231. Garc\u00eda-Valdovinos, Luis Govinda, et al. \"Modelling, design and robust control of a remotely operated underwater vehicle.\" International Journal of Advanced Robotic Systems 11.1 (2014): 1. Tian, Yu, and Aiqun Zhang. \"Simulation environment and guidance system for AUV tracing chemical plume in 3-dimensions.\" 2010 2 nd International Asia Conference on Informatics in Control, Automation and Robotics (CAR 2010). Vol. 1. IEEE, 2010. Nornes, Stein M., et al. \"Underwater photogrammetric mapping of an intact standing steel wreck with ROV.\" IFAC-PapersOnLine 48.2 (2015): 206-211. Salgado-Jim\u00e9nez, Tom\u00e1s, Luis G. Garc\u00eda-Valdovinos, and Guillermo Delgado-Ram\u00edrez. \"Control of rovs using a model-free 2 nd -order sliding mode approach.\" Sliding mode control. IntechOpen, 2011. Fjellstad, O-E., and Thor I. Fossen. \"Singularity-free tracking of unmanned underwater vehicles in 6 DOF.\" Proceedings of 1994 33 rd IEEE Conference on Decision and Control. Vol. 2. IEEE, 1994. Books \u00b6 Antonelli, Gianluca, Thor I. Fossen, and Dana R. Yoerger. \"Underwater robotics.\" Springer Handbook of Robotics (2008): 987-1008. Fossen, Thor I. Handbook of Marine Craft Hydrodynamics and Motion Control. John Wiley & Sons, 2011. Lecture notes \u00b6 Dick K P Yue, 2005 - Lecture Notes: Marine Hydrodynamics, MIT Thor I Fossen, 2011 - Lecture Notes: TTK4190 Guidance and Control of Vehicles, Norwegian University of Science and Technology 3D models \u00b6 Maritime Archaeology Trust Blueye Robotics Tywoky - Wreck scanner National Park Service Submerged Resources Center Global Underwater Explorers Octopus Foundation Other maritime robotics projects \u00b6 UWSim - The UnderWater Simulator Virtual RobotX (VRX) Imaging sonar simulator Miscelaneous \u00b6 Jason Matthew O'Kane, 2014 - A Gentle Introduction to ROS SNAME, Nomenclature for treating the motion of a submerged body through a fluid. Technical and Research Bulletin","title":"Useful bibliography and other sources"},{"location":"bibliography/#papers-and-reports","text":"Berg, V. (2012). Development and Commissioning of a DP system for ROV SF 30k (Master's thesis, Institutt for marin teknikk). Cerqueira, R\u00f4mulo, et al. \"A novel GPU-based sonar simulator for real-time applications.\" Computers & Graphics 68 (2017): 66-76. Hall, Raewyn, and Stuart Anstee. Trim Calculation Methods for a Dynamical Model of the REMUS 100 Autonomous Underwater Vehicle. Yoerger, Dana R., John G. Cooke, and J-JE Slotine. \"The influence of thruster dynamics on underwater vehicle behavior and their incorporation into control system design.\" IEEE Journal of Oceanic Engineering 15.3 (1990): 167-178. Bessa, Wallace Moreira, Max Suell Dutra, and Edwin Kreuzer. \"Thruster dynamics compensation for the positioning of underwater robotic vehicles through a fuzzy sliding mode based approach.\" ABCM Symposium Series in Mechatronics. Vol. 2. 2006. Refsnes, Jon Erling Gorset. \"Nonlinear model-based control of slender body AUVs.\" Norwegian University of Science and Technology 30.226 (2007): 229-231. Garc\u00eda-Valdovinos, Luis Govinda, et al. \"Modelling, design and robust control of a remotely operated underwater vehicle.\" International Journal of Advanced Robotic Systems 11.1 (2014): 1. Tian, Yu, and Aiqun Zhang. \"Simulation environment and guidance system for AUV tracing chemical plume in 3-dimensions.\" 2010 2 nd International Asia Conference on Informatics in Control, Automation and Robotics (CAR 2010). Vol. 1. IEEE, 2010. Nornes, Stein M., et al. \"Underwater photogrammetric mapping of an intact standing steel wreck with ROV.\" IFAC-PapersOnLine 48.2 (2015): 206-211. Salgado-Jim\u00e9nez, Tom\u00e1s, Luis G. Garc\u00eda-Valdovinos, and Guillermo Delgado-Ram\u00edrez. \"Control of rovs using a model-free 2 nd -order sliding mode approach.\" Sliding mode control. IntechOpen, 2011. Fjellstad, O-E., and Thor I. Fossen. \"Singularity-free tracking of unmanned underwater vehicles in 6 DOF.\" Proceedings of 1994 33 rd IEEE Conference on Decision and Control. Vol. 2. IEEE, 1994.","title":"Papers and reports"},{"location":"bibliography/#books","text":"Antonelli, Gianluca, Thor I. Fossen, and Dana R. Yoerger. \"Underwater robotics.\" Springer Handbook of Robotics (2008): 987-1008. Fossen, Thor I. Handbook of Marine Craft Hydrodynamics and Motion Control. John Wiley & Sons, 2011.","title":"Books"},{"location":"bibliography/#lecture-notes","text":"Dick K P Yue, 2005 - Lecture Notes: Marine Hydrodynamics, MIT Thor I Fossen, 2011 - Lecture Notes: TTK4190 Guidance and Control of Vehicles, Norwegian University of Science and Technology","title":"Lecture notes"},{"location":"bibliography/#3d-models","text":"Maritime Archaeology Trust Blueye Robotics Tywoky - Wreck scanner National Park Service Submerged Resources Center Global Underwater Explorers Octopus Foundation","title":"3D models"},{"location":"bibliography/#other-maritime-robotics-projects","text":"UWSim - The UnderWater Simulator Virtual RobotX (VRX) Imaging sonar simulator","title":"Other maritime robotics projects"},{"location":"bibliography/#miscelaneous","text":"Jason Matthew O'Kane, 2014 - A Gentle Introduction to ROS SNAME, Nomenclature for treating the motion of a submerged body through a fluid. Technical and Research Bulletin","title":"Miscelaneous"},{"location":"faq/","text":"How do I find out the ID number my joystick? \u00b6 You can use jstest-gtk to find that out. To install it, run sudo apt-get install jstest-gtk and run it on the terminal. It will open a window as seen below. The joystick devices are named /dev/input/js1 for the device #1 . You can use this index for the launch files that have the input option joy_id . My machine doesn't seem to see the services and topics from the roscore running remotely \u00b6 If you are having trouble running your application in multiple computers, you can try adding the hostnames and IP addresses of your machines to the /etc/hosts file of the computer running roscore . After running catkin build, I still can't start any nodes or launch files \u00b6 If after compiling your catkin workspace using catkin build ROS seems to not update the paths to the packages even after you run cd ~/catkin_ws source devel/setup.bash you can try disabling the option to source the install folder of your catkin workspace by running cd ~/catkin_ws catkin config --no-install catkin clean --all Then rebuild your workspace cd ~/catkin_ws catkin build source devel/setup.bash The Gazebo worlds don't start when running the simulation on a virtual machine \u00b6 To avoid segmentation faults when starting Gazebo in a virtual machine you can add the following line to your ~/.bashrc file export LIBGL_ALWAYS_SOFTWARE = 1 Info If you are running VirtualBox, remember to install the guest additions to your virtual machine as well. Warning It is strongly recommended to have your machine running with Linux natively to run the simulation since the performance on virtual machines can be very poor.","title":"FAQ"},{"location":"faq/#how-do-i-find-out-the-id-number-my-joystick","text":"You can use jstest-gtk to find that out. To install it, run sudo apt-get install jstest-gtk and run it on the terminal. It will open a window as seen below. The joystick devices are named /dev/input/js1 for the device #1 . You can use this index for the launch files that have the input option joy_id .","title":"How do I find out the ID number my joystick?"},{"location":"faq/#my-machine-doesnt-seem-to-see-the-services-and-topics-from-the-roscore-running-remotely","text":"If you are having trouble running your application in multiple computers, you can try adding the hostnames and IP addresses of your machines to the /etc/hosts file of the computer running roscore .","title":"My machine doesn't seem to see the services and topics from the roscore running remotely"},{"location":"faq/#after-running-catkin-build-i-still-cant-start-any-nodes-or-launch-files","text":"If after compiling your catkin workspace using catkin build ROS seems to not update the paths to the packages even after you run cd ~/catkin_ws source devel/setup.bash you can try disabling the option to source the install folder of your catkin workspace by running cd ~/catkin_ws catkin config --no-install catkin clean --all Then rebuild your workspace cd ~/catkin_ws catkin build source devel/setup.bash","title":"After running catkin build, I still can't start any nodes or launch files"},{"location":"faq/#the-gazebo-worlds-dont-start-when-running-the-simulation-on-a-virtual-machine","text":"To avoid segmentation faults when starting Gazebo in a virtual machine you can add the following line to your ~/.bashrc file export LIBGL_ALWAYS_SOFTWARE = 1 Info If you are running VirtualBox, remember to install the guest additions to your virtual machine as well. Warning It is strongly recommended to have your machine running with Linux natively to run the simulation since the performance on virtual machines can be very poor.","title":"The Gazebo worlds don't start when running the simulation on a virtual machine"},{"location":"installation/","text":"We assume you are using at least Ubuntu 14.04.4 LTS and ROS Indigo, even though the simulator package should also work with later versions (minor adjustments may be required). Please refer to the installation instructions for indigo kinetic melodic The uuv_simulator package has currently been released for kinetic , lunar and melodic . To install all the packages, run sudo apt install ros-kinetic-uuv-simulator or sudo apt install ros-lunar-uuv-simulator or sudo apt install ros-melodic-uuv-simulator Installation from source \u00b6 Dependencies \u00b6 Checkout below the needed dependencies for ROS indigo , kinetic and melodic . Choose the ones you need according to the ROS version you are using. It is recommended to also install catkin_tools . Using uuv_simulator with indigo and Gazebo 7 \u00b6 To install ROS Indigo, first follow the installation instructions in this wiki page and choose the installation of the ros-indigo-desktop-full package. Follow the instructions from the Gazebo 7 installation tutorial Install the necessary ROS packages for Gazebo 7 sudo apt-get install ros-indigo-gazebo7-* Some extra packages that might also be needed sudo apt-get install protobuf-compiler protobuf-c-compiler Info To use the vehicles with robotic manipulators using indigo , it might also be necessary to use a different version of the ros-control modules (listed below). In that case, clone the following repositories in the src folder git clone https://github.com/ros-controls/control_msgs.git cd control_msgs git checkout c0b322b cd .. git clone https://github.com/ros-controls/control_toolbox.git cd control_toolbox git checkout 5ccdc6d cd .. git clone https://github.com/ros-simulation/gazebo_ros_pkgs.git cd gazebo_ros_pkgs git checkout 231b76d cd .. git clone https://github.com/ros-controls/realtime_tools.git cd realtime_tools git checkout bf55298 cd .. git clone https://github.com/ros-controls/ros_controllers.git cd ros_controllers git checkout b4dc152 cd .. Using uuv_simulator with kinetic and Gazebo 7 \u00b6 If you installed ros-kinetic-desktop-full after following the installation instructions for ROS Kinetic , Gazebo 7.0 should already be installed. In case you want to update Gazebo 7, follow the instructions to add the mirror from OSRF and then upgrade gazebo7 and libgazebo7-dev sudo apt-get install --only-upgrade gazebo7 libgazebo7-dev Using uuv_simulator with kinetic and Gazebo 9 \u00b6 Install the package ros-kinetic-desktop-full following these installation instructions . Follow the installation instructions for Gazebo 9 in this wiki page . Install the additional packages necessary to work with kinetic and Gazebo 9 sudo apt-get install ros-kinetic-gazebo9-* Using uuv_simulator with melodic and Gazebo 9 \u00b6 Creating and configuring a workspace \u00b6 If you don't have the ROS workspace yet, you should run the following and then clone the uuv_simulator package in the ~/catkin_ws/src folder mkdir -p ~/catkin_ws/src cd ~/catkin_ws/src Be sure to install catkin tools package by following the installation instructions on the catkin tools documentation page . After the installation, initialize the catkin workspace cd ~/catkin_ws catkin init You can then clone the UUV simulator into your src folder cd ~/catkin_ws/src git clone https://github.com/uuvsimulator/uuv_simulator.git Configure the environment variables by adding the following lines in ~/.bashrc (replace kinetic with the ROS version you are using). Info If you install a version of Gazebo newer than 7.X, you might need to adjust gazebo-7 below (e.g. gazebo-9 ). You can find out which version you are using by typing gazebo --version in your terminal. source /usr/share/gazebo-7/setup.sh source /opt/ros/kinetic/setup.bash source $HOME /catkin_ws/devel/setup.bash After saving these changes, remember to source the .bashrc by either typing source ~/.bashrc Installation \u00b6 To install the simulator's dependencies, you can run one of the following commands (see which of the ROS/Gazebo combinations from dependencies you have on your machine): For indigo + Gazebo 7 cd ~/catkin_ws rosdep install --from-paths src --ignore-src --rosdistro = indigo -y --skip-keys \"gazebo gazebo_msgs gazebo_plugins gazebo_ros gazebo_ros_control gazebo_ros_pkgs\" For kinetic + Gazebo 7 cd ~/catkin_ws rosdep install --from-paths src --ignore-src --rosdistro = kinetic -y For kinetic + Gazebo 9 cd ~/catkin_ws rosdep install --from-paths src --ignore-src --rosdistro = kinetic -y --skip-keys \"gazebo gazebo_msgs gazebo_plugins gazebo_ros gazebo_ros_control gazebo_ros_pkgs\" Info In case you are using lunar , you might need to clone the following repositories directly to your ~/catkin_ws/src folder and build them with the rest of the packages cd ~/catkin/src git clone https://github.com/tu-darmstadt-ros-pkg/hector_localization git clone https://github.com/ros-teleop/teleop_tools Finally, build your workspace using cd ~/catkin_ws catkin_make install or cd ~/catkin_ws catkin build in case you are using catkin_tools . Tip If after compiling your catkin workspace using catkin build ROS seems to not update the paths to the packages even after you run cd ~/catkin_ws source devel/setup.bash you can try disabling the option to source the install folder of your catkin workspace by running cd ~/catkin_ws catkin config --no-install catkin clean --all Then rebuild your workspace catkin build source devel/setup.bash","title":"Installation"},{"location":"installation/#installation-from-source","text":"","title":"Installation from source"},{"location":"installation/#dependencies","text":"Checkout below the needed dependencies for ROS indigo , kinetic and melodic . Choose the ones you need according to the ROS version you are using. It is recommended to also install catkin_tools .","title":"Dependencies"},{"location":"installation/#using-uuv_simulator-with-indigo-and-gazebo-7","text":"To install ROS Indigo, first follow the installation instructions in this wiki page and choose the installation of the ros-indigo-desktop-full package. Follow the instructions from the Gazebo 7 installation tutorial Install the necessary ROS packages for Gazebo 7 sudo apt-get install ros-indigo-gazebo7-* Some extra packages that might also be needed sudo apt-get install protobuf-compiler protobuf-c-compiler Info To use the vehicles with robotic manipulators using indigo , it might also be necessary to use a different version of the ros-control modules (listed below). In that case, clone the following repositories in the src folder git clone https://github.com/ros-controls/control_msgs.git cd control_msgs git checkout c0b322b cd .. git clone https://github.com/ros-controls/control_toolbox.git cd control_toolbox git checkout 5ccdc6d cd .. git clone https://github.com/ros-simulation/gazebo_ros_pkgs.git cd gazebo_ros_pkgs git checkout 231b76d cd .. git clone https://github.com/ros-controls/realtime_tools.git cd realtime_tools git checkout bf55298 cd .. git clone https://github.com/ros-controls/ros_controllers.git cd ros_controllers git checkout b4dc152 cd ..","title":"Using uuv_simulator with indigo and Gazebo 7"},{"location":"installation/#using-uuv_simulator-with-kinetic-and-gazebo-7","text":"If you installed ros-kinetic-desktop-full after following the installation instructions for ROS Kinetic , Gazebo 7.0 should already be installed. In case you want to update Gazebo 7, follow the instructions to add the mirror from OSRF and then upgrade gazebo7 and libgazebo7-dev sudo apt-get install --only-upgrade gazebo7 libgazebo7-dev","title":"Using uuv_simulator with kinetic and Gazebo 7"},{"location":"installation/#using-uuv_simulator-with-kinetic-and-gazebo-9","text":"Install the package ros-kinetic-desktop-full following these installation instructions . Follow the installation instructions for Gazebo 9 in this wiki page . Install the additional packages necessary to work with kinetic and Gazebo 9 sudo apt-get install ros-kinetic-gazebo9-*","title":"Using uuv_simulator with kinetic and Gazebo 9"},{"location":"installation/#using-uuv_simulator-with-melodic-and-gazebo-9","text":"","title":"Using uuv_simulator with melodic and Gazebo 9"},{"location":"installation/#creating-and-configuring-a-workspace","text":"If you don't have the ROS workspace yet, you should run the following and then clone the uuv_simulator package in the ~/catkin_ws/src folder mkdir -p ~/catkin_ws/src cd ~/catkin_ws/src Be sure to install catkin tools package by following the installation instructions on the catkin tools documentation page . After the installation, initialize the catkin workspace cd ~/catkin_ws catkin init You can then clone the UUV simulator into your src folder cd ~/catkin_ws/src git clone https://github.com/uuvsimulator/uuv_simulator.git Configure the environment variables by adding the following lines in ~/.bashrc (replace kinetic with the ROS version you are using). Info If you install a version of Gazebo newer than 7.X, you might need to adjust gazebo-7 below (e.g. gazebo-9 ). You can find out which version you are using by typing gazebo --version in your terminal. source /usr/share/gazebo-7/setup.sh source /opt/ros/kinetic/setup.bash source $HOME /catkin_ws/devel/setup.bash After saving these changes, remember to source the .bashrc by either typing source ~/.bashrc","title":"Creating and configuring a workspace"},{"location":"installation/#installation","text":"To install the simulator's dependencies, you can run one of the following commands (see which of the ROS/Gazebo combinations from dependencies you have on your machine): For indigo + Gazebo 7 cd ~/catkin_ws rosdep install --from-paths src --ignore-src --rosdistro = indigo -y --skip-keys \"gazebo gazebo_msgs gazebo_plugins gazebo_ros gazebo_ros_control gazebo_ros_pkgs\" For kinetic + Gazebo 7 cd ~/catkin_ws rosdep install --from-paths src --ignore-src --rosdistro = kinetic -y For kinetic + Gazebo 9 cd ~/catkin_ws rosdep install --from-paths src --ignore-src --rosdistro = kinetic -y --skip-keys \"gazebo gazebo_msgs gazebo_plugins gazebo_ros gazebo_ros_control gazebo_ros_pkgs\" Info In case you are using lunar , you might need to clone the following repositories directly to your ~/catkin_ws/src folder and build them with the rest of the packages cd ~/catkin/src git clone https://github.com/tu-darmstadt-ros-pkg/hector_localization git clone https://github.com/ros-teleop/teleop_tools Finally, build your workspace using cd ~/catkin_ws catkin_make install or cd ~/catkin_ws catkin build in case you are using catkin_tools . Tip If after compiling your catkin workspace using catkin build ROS seems to not update the paths to the packages even after you run cd ~/catkin_ws source devel/setup.bash you can try disabling the option to source the install folder of your catkin workspace by running cd ~/catkin_ws catkin config --no-install catkin clean --all Then rebuild your workspace catkin build source devel/setup.bash","title":"Installation"},{"location":"quick_start/","text":"Start an empty underwater environment using either roslaunch uuv_gazebo_worlds empty_underwater_world.launch or roslaunch uuv_gazebo_worlds ocean_waves.launch Spawn the remotely operated vehicle RexROV (find the robot description files in uuv_descriptions ) as follows roslaunch uuv_descriptions upload_rexrov.launch mode: = default x: = 0 y: = 0 z: = -20 namespace: = rexrov for which mode stands for the configuration of the vehicle to be used. It is important to create the vehicles under a unique namespace to allow simulation of multiple vehicles in the same scenario. You can start a velocity controller with a joystick teleoperation node as roslaunch uuv_control_cascaded_pid joy_velocity.launch uuv_name: = rexrov model_name: = rexrov joy_id: = 0 In this case model_name refers to the vehicle model, which can be different from the namespace . It is a necessary parameter to load the correct controller and thruster allocation matrix coefficients. The joystick ID is already set zero as default. To find the correct joystick index, you can install and run jstest-gtk . Info The mapping of the joystick teleoperation node is set as default for the XBox 360 controller. Remapping is possible by passing the correct indexes of the desired axes in the launch file located in the uuv_teleop . Tip Sometimes Gazebo takes a while to close. Try killall -9 gzserver gzclient in case that happens.","title":"Quick start"},{"location":"about/license/","text":"License \u00b6 Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2016 UUV Simulator Authors Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"about/license/#license","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2016 UUV Simulator Authors Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"packages/desistek_saga/intro/","text":"Link to the desistek_saga repository here Link to the documentation page Chat on Discord This repository contains the robot description and necessary launch files to simulate the Desistek SAGA ROV vehicle . This repository is complementary to the Unmanned Underwater Vehicle Simulator (UUV Simulator) , an open-source project extending the simulation capabilities of the robotics simulator Gazebo to underwater vehicles and environments. For installation and usage instructions, please refer to the documentation pages . Purpose of the project \u00b6 This software is a research prototype, originally developed for the EU ECSEL Project 662107 SWARMs . The software is not ready for production use. However, the license conditions of the applicable Open Source licenses allow you to adapt the software to your needs. Before using it in a safety relevant setting, make sure that the software fulfills your requirements and adjust it according to any applicable safety standards (e.g. ISO 26262). Requirements \u00b6 To simulate the Desistek SAGA ROV vehicle, please refer to the UUV Simulator repository and follow the installation instructions of the package. Then you can clone this package in the src folder of you catkin workspace cd ~/catkin_ws/src git clone https://github.com/uuvsimulator/desistek_saga.git and then build your catkin workspace cd ~/catkin_ws catkin_make # or <catkin build>, if you are using catkin_tools Example of usage \u00b6 To run a demonstration with the vehicle with teleoperation, you can run a UUV simulator Gazebo scenario, such as roslaunch uuv_gazebo_worlds ocean_waves.launch and then roslaunch desistek_saga_gazebo start_demo_teleop.launch joy_id: = 0 The teleoperation nodes are pre-configured per default for the XBox 360 controller. License \u00b6 SAGA ROV package is open-sourced under the Apache-2.0 license. See the LICENSE file for details.","title":"Introduction"},{"location":"packages/desistek_saga/intro/#purpose-of-the-project","text":"This software is a research prototype, originally developed for the EU ECSEL Project 662107 SWARMs . The software is not ready for production use. However, the license conditions of the applicable Open Source licenses allow you to adapt the software to your needs. Before using it in a safety relevant setting, make sure that the software fulfills your requirements and adjust it according to any applicable safety standards (e.g. ISO 26262).","title":"Purpose of the project"},{"location":"packages/desistek_saga/intro/#requirements","text":"To simulate the Desistek SAGA ROV vehicle, please refer to the UUV Simulator repository and follow the installation instructions of the package. Then you can clone this package in the src folder of you catkin workspace cd ~/catkin_ws/src git clone https://github.com/uuvsimulator/desistek_saga.git and then build your catkin workspace cd ~/catkin_ws catkin_make # or <catkin build>, if you are using catkin_tools","title":"Requirements"},{"location":"packages/desistek_saga/intro/#example-of-usage","text":"To run a demonstration with the vehicle with teleoperation, you can run a UUV simulator Gazebo scenario, such as roslaunch uuv_gazebo_worlds ocean_waves.launch and then roslaunch desistek_saga_gazebo start_demo_teleop.launch joy_id: = 0 The teleoperation nodes are pre-configured per default for the XBox 360 controller.","title":"Example of usage"},{"location":"packages/desistek_saga/intro/#license","text":"SAGA ROV package is open-sourced under the Apache-2.0 license. See the LICENSE file for details.","title":"License"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_control/","text":"Link to the desistek_saga repository here Description \u00b6 Configuration and launch files to control the Desistek SAGA ROV Launch files \u00b6 start_pdc_control.launch \u00b6 Arguments uuv_name ( default: desistek_saga ) record ( default: false ) gui_on ( default: true ) use_ned_frame ( default: false ) Kp ( default: 1,1,1,0,0,1 ) Kd ( default: 0,0,0,0,0,0 ) teleop_on ( default: false ) joy_id ( default: 0 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) thruster_manager_output_dir ( default: $(find desistek_saga_control)/config ) thruster_manager_config_file ( default: $(find desistek_saga_control)/config/thruster_manager.yaml ) tam_file ( default: $(find desistek_saga_control)/config/TAM.yaml ) model_params_file ( default: $(find desistek_saga_control)/config/model_params.yaml ) start_thruster_manager.launch \u00b6 Arguments uuv_name ( default: desistek_saga ) record_demo.launch \u00b6 Arguments record ( default: false ) bag_filename ( default: recording.bag ) start_nmb_sm_control.launch \u00b6 Arguments uuv_name ( default: desistek_saga ) record ( default: false ) gui_on ( default: true ) use_ned_frame ( default: false ) K ( default: 5.0,5.0,5.0,0.0,0.0,5.0 ) Kd ( default: 10.0,13.73,2.44,0.0,0.0,3.55 ) Ki ( default: 0.05,0.62,0.05,0.0,0.0,0.05 ) slope ( default: 2.0,0.89,2.0,0.0,0.0,0.8 ) teleop_on ( default: false ) joy_id ( default: 0 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) thruster_manager_output_dir ( default: $(find desistek_saga_control)/config ) thruster_manager_config_file ( default: $(find desistek_saga_control)/config/thruster_manager.yaml ) tam_file ( default: $(find desistek_saga_control)/config/TAM.yaml ) start_sf_control.launch \u00b6 Arguments uuv_name ( default: desistek_saga ) record ( default: false ) gui_on ( default: true ) use_ned_frame ( default: false ) Kd ( default: 1.0,1.0,1.0,0.0,0.0,1.0 ) lambda ( default: 1.0 ) c ( default: 1.0 ) teleop_on ( default: false ) joy_id ( default: 0 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) thruster_manager_output_dir ( default: $(find desistek_saga_control)/config ) thruster_manager_config_file ( default: $(find desistek_saga_control)/config/thruster_manager.yaml ) tam_file ( default: $(find desistek_saga_control)/config/TAM.yaml ) model_params_file ( default: $(find desistek_saga_control)/config/model_params.yaml ) start_pid_control.launch \u00b6 Arguments uuv_name ( default: desistek_saga ) record ( default: false ) gui_on ( default: true ) use_ned_frame ( default: false ) Kp ( default: 1,1,1,0,0,1 ) Kd ( default: 0,0,0,0,0,0 ) Ki ( default: 0,0,0,0,0,0 ) teleop_on ( default: false ) joy_id ( default: 0 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) thruster_manager_output_dir ( default: $(find desistek_saga_control)/config ) thruster_manager_config_file ( default: $(find desistek_saga_control)/config/thruster_manager.yaml ) tam_file ( default: $(find desistek_saga_control)/config/TAM.yaml ) start_cascaded_pid_with_teleop.launch \u00b6 Arguments namespace ( default: desistek_saga ) joy_id ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) axis_yaw ( default: 0 ) gui_on ( default: true ) start_position_hold.launch \u00b6 Arguments namespace ( default: desistek_saga ) start_geometric_tracking_control.launch \u00b6 Arguments uuv_name ( default: desistek_saga ) record ( default: false ) gui_on ( default: true ) Kp ( default: 2.0,2.0,2.0,0.8 ) Kd ( default: 0.1,0.1,0.1,0.1 ) Ki ( default: 0.05,0.05,0.05,0.05 ) teleop_on ( default: false ) joy_id ( default: 0 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) thruster_manager_output_dir ( default: $(find desistek_saga_control)/config ) thruster_manager_config_file ( default: $(find desistek_saga_control)/config/thruster_manager.yaml ) tam_file ( default: $(find desistek_saga_control)/config/TAM.yaml )","title":"desistek_saga_control"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_control/#description","text":"Configuration and launch files to control the Desistek SAGA ROV","title":"Description"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_control/#launch-files","text":"","title":"Launch files"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_control/#start_pdc_controllaunch","text":"Arguments uuv_name ( default: desistek_saga ) record ( default: false ) gui_on ( default: true ) use_ned_frame ( default: false ) Kp ( default: 1,1,1,0,0,1 ) Kd ( default: 0,0,0,0,0,0 ) teleop_on ( default: false ) joy_id ( default: 0 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) thruster_manager_output_dir ( default: $(find desistek_saga_control)/config ) thruster_manager_config_file ( default: $(find desistek_saga_control)/config/thruster_manager.yaml ) tam_file ( default: $(find desistek_saga_control)/config/TAM.yaml ) model_params_file ( default: $(find desistek_saga_control)/config/model_params.yaml )","title":"start_pdc_control.launch"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_control/#start_thruster_managerlaunch","text":"Arguments uuv_name ( default: desistek_saga )","title":"start_thruster_manager.launch"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_control/#record_demolaunch","text":"Arguments record ( default: false ) bag_filename ( default: recording.bag )","title":"record_demo.launch"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_control/#start_nmb_sm_controllaunch","text":"Arguments uuv_name ( default: desistek_saga ) record ( default: false ) gui_on ( default: true ) use_ned_frame ( default: false ) K ( default: 5.0,5.0,5.0,0.0,0.0,5.0 ) Kd ( default: 10.0,13.73,2.44,0.0,0.0,3.55 ) Ki ( default: 0.05,0.62,0.05,0.0,0.0,0.05 ) slope ( default: 2.0,0.89,2.0,0.0,0.0,0.8 ) teleop_on ( default: false ) joy_id ( default: 0 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) thruster_manager_output_dir ( default: $(find desistek_saga_control)/config ) thruster_manager_config_file ( default: $(find desistek_saga_control)/config/thruster_manager.yaml ) tam_file ( default: $(find desistek_saga_control)/config/TAM.yaml )","title":"start_nmb_sm_control.launch"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_control/#start_sf_controllaunch","text":"Arguments uuv_name ( default: desistek_saga ) record ( default: false ) gui_on ( default: true ) use_ned_frame ( default: false ) Kd ( default: 1.0,1.0,1.0,0.0,0.0,1.0 ) lambda ( default: 1.0 ) c ( default: 1.0 ) teleop_on ( default: false ) joy_id ( default: 0 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) thruster_manager_output_dir ( default: $(find desistek_saga_control)/config ) thruster_manager_config_file ( default: $(find desistek_saga_control)/config/thruster_manager.yaml ) tam_file ( default: $(find desistek_saga_control)/config/TAM.yaml ) model_params_file ( default: $(find desistek_saga_control)/config/model_params.yaml )","title":"start_sf_control.launch"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_control/#start_pid_controllaunch","text":"Arguments uuv_name ( default: desistek_saga ) record ( default: false ) gui_on ( default: true ) use_ned_frame ( default: false ) Kp ( default: 1,1,1,0,0,1 ) Kd ( default: 0,0,0,0,0,0 ) Ki ( default: 0,0,0,0,0,0 ) teleop_on ( default: false ) joy_id ( default: 0 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) thruster_manager_output_dir ( default: $(find desistek_saga_control)/config ) thruster_manager_config_file ( default: $(find desistek_saga_control)/config/thruster_manager.yaml ) tam_file ( default: $(find desistek_saga_control)/config/TAM.yaml )","title":"start_pid_control.launch"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_control/#start_cascaded_pid_with_teleoplaunch","text":"Arguments namespace ( default: desistek_saga ) joy_id ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) axis_yaw ( default: 0 ) gui_on ( default: true )","title":"start_cascaded_pid_with_teleop.launch"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_control/#start_position_holdlaunch","text":"Arguments namespace ( default: desistek_saga )","title":"start_position_hold.launch"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_control/#start_geometric_tracking_controllaunch","text":"Arguments uuv_name ( default: desistek_saga ) record ( default: false ) gui_on ( default: true ) Kp ( default: 2.0,2.0,2.0,0.8 ) Kd ( default: 0.1,0.1,0.1,0.1 ) Ki ( default: 0.05,0.05,0.05,0.05 ) teleop_on ( default: false ) joy_id ( default: 0 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) thruster_manager_output_dir ( default: $(find desistek_saga_control)/config ) thruster_manager_config_file ( default: $(find desistek_saga_control)/config/thruster_manager.yaml ) tam_file ( default: $(find desistek_saga_control)/config/TAM.yaml )","title":"start_geometric_tracking_control.launch"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_description/","text":"Link to the desistek_saga repository here Description \u00b6 The robot description files for the Desistek SAGA ROV underwater vehicle Launch files \u00b6 upload_desistek_saga.launch \u00b6 Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) use_geodetic ( default: false ) latitude ( default: 0 ) longitude ( default: 0 ) depth ( default: 0 ) latitude_ref ( default: 0 ) longitude_ref ( default: 0 ) altitude_ref ( default: 0 ) mode ( default: default ) namespace ( default: desistek_saga ) use_ned_frame ( default: false )","title":"desistek_saga_description"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_description/#description","text":"The robot description files for the Desistek SAGA ROV underwater vehicle","title":"Description"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_description/#launch-files","text":"","title":"Launch files"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_description/#upload_desistek_sagalaunch","text":"Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) use_geodetic ( default: false ) latitude ( default: 0 ) longitude ( default: 0 ) depth ( default: 0 ) latitude_ref ( default: 0 ) longitude_ref ( default: 0 ) altitude_ref ( default: 0 ) mode ( default: default ) namespace ( default: desistek_saga ) use_ned_frame ( default: false )","title":"upload_desistek_saga.launch"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_gazebo/","text":"Link to the desistek_saga repository here Description \u00b6 Package with launch files for demonstrations with the Desistek SAGA ROV underwater vehicle Launch files \u00b6 start_demo_nmb_sm_controller.launch \u00b6 Arguments x ( default: 0 ) y ( default: 0 ) z ( default: -5 ) yaw ( default: 0 ) teleop_on ( default: false ) joy_id ( default: 0 ) start_demo_teleop.launch \u00b6 Arguments x ( default: 0 ) y ( default: 0 ) z ( default: -5 ) yaw ( default: 0 ) joy_id ( default: 0 )","title":"desistek_saga_gazebo"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_gazebo/#description","text":"Package with launch files for demonstrations with the Desistek SAGA ROV underwater vehicle","title":"Description"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_gazebo/#launch-files","text":"","title":"Launch files"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_gazebo/#start_demo_nmb_sm_controllerlaunch","text":"Arguments x ( default: 0 ) y ( default: 0 ) z ( default: -5 ) yaw ( default: 0 ) teleop_on ( default: false ) joy_id ( default: 0 )","title":"start_demo_nmb_sm_controller.launch"},{"location":"packages/desistek_saga/docs/packages/desistek_saga_gazebo/#start_demo_teleoplaunch","text":"Arguments x ( default: 0 ) y ( default: 0 ) z ( default: -5 ) yaw ( default: 0 ) joy_id ( default: 0 )","title":"start_demo_teleop.launch"},{"location":"packages/eca_a9/intro/","text":"Link to the eca_a9 repository here Link to the documentation page Chat on Discord This repository contains the robot description and necessary launch files to simulate the ECA A9 autonomous underwater vehicle . This repository is complementary to the Unmanned Underwater Vehicle Simulator (UUV Simulator) , an open-source project extending the simulation capabilities of the robotics simulator Gazebo to underwater vehicles and environments. For installation and usage instructions, please refer to the documentation pages . Purpose of the project \u00b6 This software is a research prototype, originally developed for the EU ECSEL Project 662107 SWARMs . The software is not ready for production use. However, the license conditions of the applicable Open Source licenses allow you to adapt the software to your needs. Before using it in a safety relevant setting, make sure that the software fulfills your requirements and adjust it according to any applicable safety standards (e.g. ISO 26262). Requirements \u00b6 To simulate the ECA A9 AUV, please refer to the UUV Simulator repository and follow the installation instructions of the package. Then you can clone this package in the src folder of you catkin workspace cd ~/catkin_ws/src git clone https://github.com/uuvsimulator/eca_a9.git and then build your catkin workspace cd ~/catkin_ws catkin_make # or <catkin build>, if you are using catkin_tools Example of usage \u00b6 To run a demonstration with the vehicle with teleoperation, you can run a UUV simulator Gazebo scenario, such as roslaunch uuv_gazebo_worlds ocean_waves.launch and then roslaunch eca_a9_gazebo start_demo_teleop.launch joy_id: = 0 The teleoperation nodes are pre-configured per default for the XBox 360 controller. Configuration of the Gazebo world \u00b6 The simulation with the fin plugins have shown better results by configuring the Gazebo's .world file with the following parameters for the physics engine: <physics name= \"default_physics\" default= \"true\" type= \"ode\" > <max_step_size> 0.01 </max_step_size> <real_time_factor> 1 </real_time_factor> <real_time_update_rate> 100 </real_time_update_rate> <ode> <solver> <type> quick </type> <iters> 50 </iters> <sor> 1.2 </sor> </solver> </ode> </physics> Check the Mangalia world file to see an example. License \u00b6 ECA A9 package is open-sourced under the Apache-2.0 license. See the LICENSE file for details.","title":"Introduction"},{"location":"packages/eca_a9/intro/#purpose-of-the-project","text":"This software is a research prototype, originally developed for the EU ECSEL Project 662107 SWARMs . The software is not ready for production use. However, the license conditions of the applicable Open Source licenses allow you to adapt the software to your needs. Before using it in a safety relevant setting, make sure that the software fulfills your requirements and adjust it according to any applicable safety standards (e.g. ISO 26262).","title":"Purpose of the project"},{"location":"packages/eca_a9/intro/#requirements","text":"To simulate the ECA A9 AUV, please refer to the UUV Simulator repository and follow the installation instructions of the package. Then you can clone this package in the src folder of you catkin workspace cd ~/catkin_ws/src git clone https://github.com/uuvsimulator/eca_a9.git and then build your catkin workspace cd ~/catkin_ws catkin_make # or <catkin build>, if you are using catkin_tools","title":"Requirements"},{"location":"packages/eca_a9/intro/#example-of-usage","text":"To run a demonstration with the vehicle with teleoperation, you can run a UUV simulator Gazebo scenario, such as roslaunch uuv_gazebo_worlds ocean_waves.launch and then roslaunch eca_a9_gazebo start_demo_teleop.launch joy_id: = 0 The teleoperation nodes are pre-configured per default for the XBox 360 controller.","title":"Example of usage"},{"location":"packages/eca_a9/intro/#configuration-of-the-gazebo-world","text":"The simulation with the fin plugins have shown better results by configuring the Gazebo's .world file with the following parameters for the physics engine: <physics name= \"default_physics\" default= \"true\" type= \"ode\" > <max_step_size> 0.01 </max_step_size> <real_time_factor> 1 </real_time_factor> <real_time_update_rate> 100 </real_time_update_rate> <ode> <solver> <type> quick </type> <iters> 50 </iters> <sor> 1.2 </sor> </solver> </ode> </physics> Check the Mangalia world file to see an example.","title":"Configuration of the Gazebo world"},{"location":"packages/eca_a9/intro/#license","text":"ECA A9 package is open-sourced under the Apache-2.0 license. See the LICENSE file for details.","title":"License"},{"location":"packages/eca_a9/docs/packages/eca_a9_control/","text":"Link to the eca_a9 repository here Description \u00b6 Configuration and launch files to control the ECA A9 AUV Launch files \u00b6 start_control_allocator.launch \u00b6 start_nmb_sm_control.launch \u00b6 Arguments uuv_name ( default: eca_a9 ) gui_on ( default: true ) use_ned_frame ( default: false ) teleop_on ( default: false ) joy_id ( default: 0 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) Kd ( default: 24.328999405818507,95.16574836816616,25.943377407248825,0,6.388371356010936,79.2844976871164 ) Ki ( default: 0.0010232768152540483,0.0010232768152540483,0.0010232768152540483,0,0.11901644069756079,0.11901644069756079 ) slope ( default: 0.9903858668992097,0.9903858668992097,0.9903858668992097,0,0.20796465986893387,0.20796465986893387 ) look_ahead_delay ( default: 2.0 ) min_thrust ( default: 40 ) start_auv_teleop.launch \u00b6 Arguments uuv_name ( default: eca_a9 ) joy_id ( default: 0 ) start_geometric_tracking_control.launch \u00b6 Arguments uuv_name ( default: eca_a9 ) gui_on ( default: true ) max_forward_speed ( default: 2 ) dubins_radius ( default: 10 ) min_thrust ( default: 0 ) max_thrust ( default: 120 ) thrust_p_gain ( default: 5.0 ) thrust_d_gain ( default: 0.01 ) p_roll ( default: 0.2 ) p_pitch ( default: 0.8 ) d_pitch ( default: 0.0 ) p_yaw ( default: 0.8 ) d_yaw ( default: 0.0 ) n_fins ( default: 4 ) map_roll map_pitch map_yaw max_fin_angle ( default: 1.396263402 ) idle_radius ( default: 30 ) look_ahead_delay ( default: 0.0 ) dubins_max_pitch ( default: 0.26 ) desired_pitch_limit ( default: 0.26 ) yaw_error_limit ( default: 1.57 ) use_ned_frame ( default: false ) stamped_pose_only ( default: false ) timeout_idle_mode ( default: 5 ) thruster_topic ( default: thrusters/0/input ) thruster_topic_prefix ( default: thrusters ) thruster_topic_suffix ( default: input ) thruster_frame_base ( default: thruster_ ) thruster_conversion_fcn ( default: proportional ) thruster_gain ( default: 0.000049 ) fin_topic_prefix ( default: fins ) fin_topic_suffix ( default: input )","title":"eca_a9_control"},{"location":"packages/eca_a9/docs/packages/eca_a9_control/#description","text":"Configuration and launch files to control the ECA A9 AUV","title":"Description"},{"location":"packages/eca_a9/docs/packages/eca_a9_control/#launch-files","text":"","title":"Launch files"},{"location":"packages/eca_a9/docs/packages/eca_a9_control/#start_control_allocatorlaunch","text":"","title":"start_control_allocator.launch"},{"location":"packages/eca_a9/docs/packages/eca_a9_control/#start_nmb_sm_controllaunch","text":"Arguments uuv_name ( default: eca_a9 ) gui_on ( default: true ) use_ned_frame ( default: false ) teleop_on ( default: false ) joy_id ( default: 0 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) Kd ( default: 24.328999405818507,95.16574836816616,25.943377407248825,0,6.388371356010936,79.2844976871164 ) Ki ( default: 0.0010232768152540483,0.0010232768152540483,0.0010232768152540483,0,0.11901644069756079,0.11901644069756079 ) slope ( default: 0.9903858668992097,0.9903858668992097,0.9903858668992097,0,0.20796465986893387,0.20796465986893387 ) look_ahead_delay ( default: 2.0 ) min_thrust ( default: 40 )","title":"start_nmb_sm_control.launch"},{"location":"packages/eca_a9/docs/packages/eca_a9_control/#start_auv_teleoplaunch","text":"Arguments uuv_name ( default: eca_a9 ) joy_id ( default: 0 )","title":"start_auv_teleop.launch"},{"location":"packages/eca_a9/docs/packages/eca_a9_control/#start_geometric_tracking_controllaunch","text":"Arguments uuv_name ( default: eca_a9 ) gui_on ( default: true ) max_forward_speed ( default: 2 ) dubins_radius ( default: 10 ) min_thrust ( default: 0 ) max_thrust ( default: 120 ) thrust_p_gain ( default: 5.0 ) thrust_d_gain ( default: 0.01 ) p_roll ( default: 0.2 ) p_pitch ( default: 0.8 ) d_pitch ( default: 0.0 ) p_yaw ( default: 0.8 ) d_yaw ( default: 0.0 ) n_fins ( default: 4 ) map_roll map_pitch map_yaw max_fin_angle ( default: 1.396263402 ) idle_radius ( default: 30 ) look_ahead_delay ( default: 0.0 ) dubins_max_pitch ( default: 0.26 ) desired_pitch_limit ( default: 0.26 ) yaw_error_limit ( default: 1.57 ) use_ned_frame ( default: false ) stamped_pose_only ( default: false ) timeout_idle_mode ( default: 5 ) thruster_topic ( default: thrusters/0/input ) thruster_topic_prefix ( default: thrusters ) thruster_topic_suffix ( default: input ) thruster_frame_base ( default: thruster_ ) thruster_conversion_fcn ( default: proportional ) thruster_gain ( default: 0.000049 ) fin_topic_prefix ( default: fins ) fin_topic_suffix ( default: input )","title":"start_geometric_tracking_control.launch"},{"location":"packages/eca_a9/docs/packages/eca_a9_description/","text":"Link to the eca_a9 repository here Description \u00b6 Robot description for the ECA A9 AUV Launch files \u00b6 upload_eca_a9.launch \u00b6 Arguments debug ( default: 0 ): Sets the DEBUG flag for the uuv_simulator's plugins for verbose mode x ( default: 0 ): X coordinate of the initial position to spawn the model (in ENU) y ( default: 0 ): Y coordinate of the initial position to spawn the model (in ENU) z ( default: -20 ): Z coordinate of the initial position to spawn the model (in ENU) roll ( default: 0.0 ): Roll angle of the initial orientation to spawn the model (in ENU) pitch ( default: 0.0 ): Pitch angle of the initial orientation to spawn the model (in ENU) yaw ( default: 0.0 ): Yaw angle of the initial orientation to spawn the model (in ENU) use_geodetic ( default: false ) latitude ( default: 0 ) longitude ( default: 0 ) depth ( default: 0 ) latitude_ref ( default: 0 ) longitude_ref ( default: 0 ) altitude_ref ( default: 0 ) use_ned_frame ( default: true ) mode ( default: default ) namespace ( default: eca_a9 )","title":"eca_a9_description"},{"location":"packages/eca_a9/docs/packages/eca_a9_description/#description","text":"Robot description for the ECA A9 AUV","title":"Description"},{"location":"packages/eca_a9/docs/packages/eca_a9_description/#launch-files","text":"","title":"Launch files"},{"location":"packages/eca_a9/docs/packages/eca_a9_description/#upload_eca_a9launch","text":"Arguments debug ( default: 0 ): Sets the DEBUG flag for the uuv_simulator's plugins for verbose mode x ( default: 0 ): X coordinate of the initial position to spawn the model (in ENU) y ( default: 0 ): Y coordinate of the initial position to spawn the model (in ENU) z ( default: -20 ): Z coordinate of the initial position to spawn the model (in ENU) roll ( default: 0.0 ): Roll angle of the initial orientation to spawn the model (in ENU) pitch ( default: 0.0 ): Pitch angle of the initial orientation to spawn the model (in ENU) yaw ( default: 0.0 ): Yaw angle of the initial orientation to spawn the model (in ENU) use_geodetic ( default: false ) latitude ( default: 0 ) longitude ( default: 0 ) depth ( default: 0 ) latitude_ref ( default: 0 ) longitude_ref ( default: 0 ) altitude_ref ( default: 0 ) use_ned_frame ( default: true ) mode ( default: default ) namespace ( default: eca_a9 )","title":"upload_eca_a9.launch"},{"location":"packages/eca_a9/docs/packages/eca_a9_gazebo/","text":"Link to the eca_a9 repository here Description \u00b6 Package with launch files for demonstrations with the ECA A9 AUV Launch files \u00b6 start_demo_nmb_sm.launch \u00b6 Arguments uuv_name ( default: eca_a9 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) yaw ( default: 0 ) gui_on ( default: true ) record ( default: false ) bag_filename ( default: recording.bag ) use_ned_frame ( default: false ) joy_id ( default: 0 ) record_demo.launch \u00b6 Arguments record ( default: false ) bag_filename ( default: recording.bag ) use_ned_frame ( default: false ) start_demo_teleop.launch \u00b6 Arguments x ( default: 0 ) y ( default: 0 ) z ( default: -5 ) yaw ( default: 0 ) record ( default: false ) bag_filename ( default: recording.bag ) use_ned_frame ( default: false ) joy_id ( default: 0 ) start_waypoint_set.launch \u00b6 Arguments interpolator ( default: cubic ) start_demo_auv_control.launch \u00b6 Arguments x ( default: 0 ) y ( default: 0 ) z ( default: -5 ) yaw ( default: 0 ) record ( default: false ) bag_filename ( default: recording.bag ) use_ned_frame ( default: false )","title":"eca_a9_gazebo"},{"location":"packages/eca_a9/docs/packages/eca_a9_gazebo/#description","text":"Package with launch files for demonstrations with the ECA A9 AUV","title":"Description"},{"location":"packages/eca_a9/docs/packages/eca_a9_gazebo/#launch-files","text":"","title":"Launch files"},{"location":"packages/eca_a9/docs/packages/eca_a9_gazebo/#start_demo_nmb_smlaunch","text":"Arguments uuv_name ( default: eca_a9 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) yaw ( default: 0 ) gui_on ( default: true ) record ( default: false ) bag_filename ( default: recording.bag ) use_ned_frame ( default: false ) joy_id ( default: 0 )","title":"start_demo_nmb_sm.launch"},{"location":"packages/eca_a9/docs/packages/eca_a9_gazebo/#record_demolaunch","text":"Arguments record ( default: false ) bag_filename ( default: recording.bag ) use_ned_frame ( default: false )","title":"record_demo.launch"},{"location":"packages/eca_a9/docs/packages/eca_a9_gazebo/#start_demo_teleoplaunch","text":"Arguments x ( default: 0 ) y ( default: 0 ) z ( default: -5 ) yaw ( default: 0 ) record ( default: false ) bag_filename ( default: recording.bag ) use_ned_frame ( default: false ) joy_id ( default: 0 )","title":"start_demo_teleop.launch"},{"location":"packages/eca_a9/docs/packages/eca_a9_gazebo/#start_waypoint_setlaunch","text":"Arguments interpolator ( default: cubic )","title":"start_waypoint_set.launch"},{"location":"packages/eca_a9/docs/packages/eca_a9_gazebo/#start_demo_auv_controllaunch","text":"Arguments x ( default: 0 ) y ( default: 0 ) z ( default: -5 ) yaw ( default: 0 ) record ( default: false ) bag_filename ( default: recording.bag ) use_ned_frame ( default: false )","title":"start_demo_auv_control.launch"},{"location":"packages/lauv_gazebo/intro/","text":"Link to the lauv_gazebo repository here Link to the documentation page Chat on Discord This repository contains the robot description and necessary launch files to simulate the Light Autonomous Underwater Vehicle (LAUV) , developed by the Laborat\u00f3rio de Sistemas e Tecnologia Subaqu\u00e1tica (LSTS) from Porto University and OceanScan-MST . This repository is complementary to the Unmanned Underwater Vehicle Simulator (UUV Simulator) , an open-source project extending the simulation capabilities of the robotics simulator Gazebo to underwater vehicles and environments. For installation and usage instructions, please refer to the documentation pages . The information about the vehicle dynamic model and physical dimensions were retrieved from the following sources: Sousa, Alexandre, et al. \"LAUV: The man-portable autonomous underwater vehicle.\" IFAC Proceedings Volumes 45.5 (2012): 268-274. da Silva, Jorge Estrela, et al. \"Modeling and simulation of the LAUV autonomous underwater vehicle.\" 13 th IEEE IFAC International Conference on Methods and Models in Automation and Robotics. Szczecin, Poland Szczecin, Poland, 2007. Purpose of the project \u00b6 This software is a research prototype, originally developed for the EU ECSEL Project 662107 SWARMs . The software is not ready for production use. However, the license conditions of the applicable Open Source licenses allow you to adapt the software to your needs. Before using it in a safety relevant setting, make sure that the software fulfills your requirements and adjust it according to any applicable safety standards (e.g. ISO 26262). Requirements \u00b6 To simulate the Light Autonomous Underwater Vehicle (LAUV), please refer to the UUV Simulator repository and follow the installation instructions of the package. Then you can clone this package in the src folder of you catkin workspace cd ~/catkin_ws/src git clone https://github.com/uuvsimulator/lauv_gazebo.git and then build your catkin workspace cd ~/catkin_ws catkin_make # or <catkin build>, if you are using catkin_tools Configuration of the Gazebo world \u00b6 The simulation with the fin plugins have shown better results by configuring the Gazebo's .world file with the following parameters for the physics engine: <physics name= \"default_physics\" default= \"true\" type= \"ode\" > <max_step_size> 0.01 </max_step_size> <real_time_factor> 1 </real_time_factor> <real_time_update_rate> 100 </real_time_update_rate> <ode> <solver> <type> quick </type> <iters> 50 </iters> <sor> 1.2 </sor> </solver> </ode> </physics> Check the Mangalia world file to see an example. License \u00b6 LAUV Gazebo package is open-sourced under the Apache-2.0 license. See the LICENSE file for details.","title":"Introduction"},{"location":"packages/lauv_gazebo/intro/#purpose-of-the-project","text":"This software is a research prototype, originally developed for the EU ECSEL Project 662107 SWARMs . The software is not ready for production use. However, the license conditions of the applicable Open Source licenses allow you to adapt the software to your needs. Before using it in a safety relevant setting, make sure that the software fulfills your requirements and adjust it according to any applicable safety standards (e.g. ISO 26262).","title":"Purpose of the project"},{"location":"packages/lauv_gazebo/intro/#requirements","text":"To simulate the Light Autonomous Underwater Vehicle (LAUV), please refer to the UUV Simulator repository and follow the installation instructions of the package. Then you can clone this package in the src folder of you catkin workspace cd ~/catkin_ws/src git clone https://github.com/uuvsimulator/lauv_gazebo.git and then build your catkin workspace cd ~/catkin_ws catkin_make # or <catkin build>, if you are using catkin_tools","title":"Requirements"},{"location":"packages/lauv_gazebo/intro/#configuration-of-the-gazebo-world","text":"The simulation with the fin plugins have shown better results by configuring the Gazebo's .world file with the following parameters for the physics engine: <physics name= \"default_physics\" default= \"true\" type= \"ode\" > <max_step_size> 0.01 </max_step_size> <real_time_factor> 1 </real_time_factor> <real_time_update_rate> 100 </real_time_update_rate> <ode> <solver> <type> quick </type> <iters> 50 </iters> <sor> 1.2 </sor> </solver> </ode> </physics> Check the Mangalia world file to see an example.","title":"Configuration of the Gazebo world"},{"location":"packages/lauv_gazebo/intro/#license","text":"LAUV Gazebo package is open-sourced under the Apache-2.0 license. See the LICENSE file for details.","title":"License"},{"location":"packages/lauv_gazebo/docs/packages/lauv_control/","text":"Link to the lauv_gazebo repository here Description \u00b6 Collection of configuration and launch files to start controllers for the LAUV. Launch files \u00b6 start_control_allocator.launch \u00b6 start_nmb_sm_control.launch \u00b6 Arguments uuv_name ( default: lauv ) gui_on ( default: true ) use_ned_frame ( default: false ) max_forward_speed ( default: 2 ) look_ahead_delay ( default: 0.1 ) teleop_on ( default: false ) joy_id ( default: 0 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) dubins_radius ( default: 9 ) dubins_max_pitch ( default: 0.26 ) Kd ( default: 24.328999405818507,95.16574836816616,25.943377407248825,0,6.388371356010936,79.2844976871164 ) Ki ( default: 0.0010232768152540483,0.0010232768152540483,0.0010232768152540483,0,0.11901644069756079,0.11901644069756079 ) slope ( default: 0.9903858668992097,0.9903858668992097,0.9903858668992097,0,0.20796465986893387,0.20796465986893387 ) start_auv_trajectory_control.launch \u00b6 Arguments uuv_name ( default: lauv ) max_forward_speed ( default: 2 ) dubins_radius ( default: 15 ) min_thrust ( default: 0 ) max_thrust ( default: 30 ) thrust_p_gain ( default: 2.5 ) thrust_d_gain ( default: 2.0 ) p_roll ( default: 0.1 ) p_pitch ( default: 3.0 ) d_pitch ( default: 0.5 ) p_yaw ( default: 2.0 ) d_yaw ( default: 0.1 ) n_fins ( default: 4 ) map_roll ( default: 1,1,1,1 ) map_pitch ( default: 0,1,0,-1 ) map_yaw ( default: -1,0,1,0 ) max_fin_angle ( default: 1.396263402 ) idle_radius ( default: 15 ) look_ahead_delay ( default: 0.0 ) dubins_max_pitch ( default: 0.26 ) desired_pitch_limit ( default: 0.26 ) yaw_error_limit ( default: 1.57 ) gui_on ( default: true ) use_ned_frame ( default: false ) stamped_pose_only ( default: false ) timeout_idle_mode ( default: 50 ) thruster_topic ( default: thrusters/0/input ) thruster_topic_prefix ( default: thrusters ) thruster_topic_suffix ( default: input ) thruster_frame_base ( default: thruster_ ) thruster_conversion_fcn ( default: proportional ) thruster_gain ( default: 0.0002 ) fin_topic_prefix ( default: fins ) fin_topic_suffix ( default: input ) start_auv_teleop.launch \u00b6 Arguments uuv_name ( default: lauv ) joy_id ( default: 0 )","title":"lauv_control"},{"location":"packages/lauv_gazebo/docs/packages/lauv_control/#description","text":"Collection of configuration and launch files to start controllers for the LAUV.","title":"Description"},{"location":"packages/lauv_gazebo/docs/packages/lauv_control/#launch-files","text":"","title":"Launch files"},{"location":"packages/lauv_gazebo/docs/packages/lauv_control/#start_control_allocatorlaunch","text":"","title":"start_control_allocator.launch"},{"location":"packages/lauv_gazebo/docs/packages/lauv_control/#start_nmb_sm_controllaunch","text":"Arguments uuv_name ( default: lauv ) gui_on ( default: true ) use_ned_frame ( default: false ) max_forward_speed ( default: 2 ) look_ahead_delay ( default: 0.1 ) teleop_on ( default: false ) joy_id ( default: 0 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) dubins_radius ( default: 9 ) dubins_max_pitch ( default: 0.26 ) Kd ( default: 24.328999405818507,95.16574836816616,25.943377407248825,0,6.388371356010936,79.2844976871164 ) Ki ( default: 0.0010232768152540483,0.0010232768152540483,0.0010232768152540483,0,0.11901644069756079,0.11901644069756079 ) slope ( default: 0.9903858668992097,0.9903858668992097,0.9903858668992097,0,0.20796465986893387,0.20796465986893387 )","title":"start_nmb_sm_control.launch"},{"location":"packages/lauv_gazebo/docs/packages/lauv_control/#start_auv_trajectory_controllaunch","text":"Arguments uuv_name ( default: lauv ) max_forward_speed ( default: 2 ) dubins_radius ( default: 15 ) min_thrust ( default: 0 ) max_thrust ( default: 30 ) thrust_p_gain ( default: 2.5 ) thrust_d_gain ( default: 2.0 ) p_roll ( default: 0.1 ) p_pitch ( default: 3.0 ) d_pitch ( default: 0.5 ) p_yaw ( default: 2.0 ) d_yaw ( default: 0.1 ) n_fins ( default: 4 ) map_roll ( default: 1,1,1,1 ) map_pitch ( default: 0,1,0,-1 ) map_yaw ( default: -1,0,1,0 ) max_fin_angle ( default: 1.396263402 ) idle_radius ( default: 15 ) look_ahead_delay ( default: 0.0 ) dubins_max_pitch ( default: 0.26 ) desired_pitch_limit ( default: 0.26 ) yaw_error_limit ( default: 1.57 ) gui_on ( default: true ) use_ned_frame ( default: false ) stamped_pose_only ( default: false ) timeout_idle_mode ( default: 50 ) thruster_topic ( default: thrusters/0/input ) thruster_topic_prefix ( default: thrusters ) thruster_topic_suffix ( default: input ) thruster_frame_base ( default: thruster_ ) thruster_conversion_fcn ( default: proportional ) thruster_gain ( default: 0.0002 ) fin_topic_prefix ( default: fins ) fin_topic_suffix ( default: input )","title":"start_auv_trajectory_control.launch"},{"location":"packages/lauv_gazebo/docs/packages/lauv_control/#start_auv_teleoplaunch","text":"Arguments uuv_name ( default: lauv ) joy_id ( default: 0 )","title":"start_auv_teleop.launch"},{"location":"packages/lauv_gazebo/docs/packages/lauv_description/","text":"Link to the lauv_gazebo repository here Description \u00b6 Robot description files for the LAUV. Launch files \u00b6 upload.launch \u00b6 Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0 ) pitch ( default: 0 ) yaw ( default: 0 ) use_geodetic ( default: false ) latitude ( default: 0 ) longitude ( default: 0 ) depth ( default: 0 ) latitude_ref ( default: 0 ) longitude_ref ( default: 0 ) altitude_ref ( default: 0 ) use_ned_frame ( default: true ) mode ( default: default ) namespace ( default: lauv )","title":"lauv_description"},{"location":"packages/lauv_gazebo/docs/packages/lauv_description/#description","text":"Robot description files for the LAUV.","title":"Description"},{"location":"packages/lauv_gazebo/docs/packages/lauv_description/#launch-files","text":"","title":"Launch files"},{"location":"packages/lauv_gazebo/docs/packages/lauv_description/#uploadlaunch","text":"Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0 ) pitch ( default: 0 ) yaw ( default: 0 ) use_geodetic ( default: false ) latitude ( default: 0 ) longitude ( default: 0 ) depth ( default: 0 ) latitude_ref ( default: 0 ) longitude_ref ( default: 0 ) altitude_ref ( default: 0 ) use_ned_frame ( default: true ) mode ( default: default ) namespace ( default: lauv )","title":"upload.launch"},{"location":"packages/lauv_gazebo/docs/packages/lauv_gazebo/","text":"Link to the lauv_gazebo repository here Description \u00b6 Sample launch files to start a simulated LAUV in Gazebo. Launch files \u00b6 start_demo_nmb_sm.launch \u00b6 Arguments uuv_name ( default: lauv ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) yaw ( default: 0 ) gui_on ( default: true ) record ( default: false ) bag_filename ( default: recording.bag ) use_ned_frame ( default: false ) joy_id ( default: 0 ) start_demo_teleop.launch \u00b6 Arguments x ( default: 0 ) y ( default: 0 ) z ( default: -5 ) yaw ( default: 0 ) joy_id ( default: 0 ) start_demo_auv_control.launch \u00b6 Arguments uuv_name ( default: lauv ) x ( default: 0 ) y ( default: 0 ) z ( default: -5 ) yaw ( default: 0 ) gui_on ( default: true ) record ( default: false ) bag_filename ( default: recording.bag ) use_ned_frame ( default: false )","title":"lauv_gazebo"},{"location":"packages/lauv_gazebo/docs/packages/lauv_gazebo/#description","text":"Sample launch files to start a simulated LAUV in Gazebo.","title":"Description"},{"location":"packages/lauv_gazebo/docs/packages/lauv_gazebo/#launch-files","text":"","title":"Launch files"},{"location":"packages/lauv_gazebo/docs/packages/lauv_gazebo/#start_demo_nmb_smlaunch","text":"Arguments uuv_name ( default: lauv ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) yaw ( default: 0 ) gui_on ( default: true ) record ( default: false ) bag_filename ( default: recording.bag ) use_ned_frame ( default: false ) joy_id ( default: 0 )","title":"start_demo_nmb_sm.launch"},{"location":"packages/lauv_gazebo/docs/packages/lauv_gazebo/#start_demo_teleoplaunch","text":"Arguments x ( default: 0 ) y ( default: 0 ) z ( default: -5 ) yaw ( default: 0 ) joy_id ( default: 0 )","title":"start_demo_teleop.launch"},{"location":"packages/lauv_gazebo/docs/packages/lauv_gazebo/#start_demo_auv_controllaunch","text":"Arguments uuv_name ( default: lauv ) x ( default: 0 ) y ( default: 0 ) z ( default: -5 ) yaw ( default: 0 ) gui_on ( default: true ) record ( default: false ) bag_filename ( default: recording.bag ) use_ned_frame ( default: false )","title":"start_demo_auv_control.launch"},{"location":"packages/rexrov2/intro/","text":"Link to the rexrov2 repository here Link to the documentation page Chat on Discord This repository contains the robot description and necessary launch files to simulate the RexROV 2 unmanned underwater vehicle. This repository is complementary to the Unmanned Underwater Vehicle Simulator (UUV Simulator) , an open-source project extending the simulation capabilities of the robotics simulator Gazebo to underwater vehicles and environments. For installation and usage instructions, please refer to the documentation pages . The dimensions and parameters for the RexROV 2 are derived from the published model parameters for the SF 30k ROV [1]. [1] Berg, Viktor. Development and Commissioning of a DP system for ROV SF 30k. MS thesis. Institutt for marin teknikk, 2012. Purpose of the project \u00b6 This software is a research prototype, originally developed for the EU ECSEL Project 662107 SWARMs . The software is not ready for production use. However, the license conditions of the applicable Open Source licenses allow you to adapt the software to your needs. Before using it in a safety relevant setting, make sure that the software fulfills your requirements and adjust it according to any applicable safety standards (e.g. ISO 26262). Requirements \u00b6 To simulate the RexROV 2 vehicle, please refer to the UUV Simulator repository and follow the installation instructions of the package. Then you can clone this package in the src folder of you catkin workspace cd ~/catkin_ws/src git clone https://github.com/uuvsimulator/rexrov2.git and then build your catkin workspace cd ~/catkin_ws catkin_make # or <catkin build>, if you are using catkin_tools Example of usage \u00b6 To run a demonstration with the vehicle with teleoperation, you can run a UUV simulator Gazebo scenario, such as roslaunch rexrov2_gazebo start_demo_pid_controller.launch teleop_on: = true joy_id: = 0 The teleoperation nodes are pre-configured per default for the XBox 360 controller. License \u00b6 RexROV 2 package is open-sourced under the Apache-2.0 license. See the LICENSE file for details.","title":"Introduction"},{"location":"packages/rexrov2/intro/#purpose-of-the-project","text":"This software is a research prototype, originally developed for the EU ECSEL Project 662107 SWARMs . The software is not ready for production use. However, the license conditions of the applicable Open Source licenses allow you to adapt the software to your needs. Before using it in a safety relevant setting, make sure that the software fulfills your requirements and adjust it according to any applicable safety standards (e.g. ISO 26262).","title":"Purpose of the project"},{"location":"packages/rexrov2/intro/#requirements","text":"To simulate the RexROV 2 vehicle, please refer to the UUV Simulator repository and follow the installation instructions of the package. Then you can clone this package in the src folder of you catkin workspace cd ~/catkin_ws/src git clone https://github.com/uuvsimulator/rexrov2.git and then build your catkin workspace cd ~/catkin_ws catkin_make # or <catkin build>, if you are using catkin_tools","title":"Requirements"},{"location":"packages/rexrov2/intro/#example-of-usage","text":"To run a demonstration with the vehicle with teleoperation, you can run a UUV simulator Gazebo scenario, such as roslaunch rexrov2_gazebo start_demo_pid_controller.launch teleop_on: = true joy_id: = 0 The teleoperation nodes are pre-configured per default for the XBox 360 controller.","title":"Example of usage"},{"location":"packages/rexrov2/intro/#license","text":"RexROV 2 package is open-sourced under the Apache-2.0 license. See the LICENSE file for details.","title":"License"},{"location":"packages/rexrov2/docs/packages/rexrov2_control/","text":"Link to the rexrov2 repository here Description \u00b6 Launch and configuration files to start controllers nodes from the uuv_trajectory_control package for the RexROV 2 vehicle. Launch files \u00b6 start_sf_controller.launch \u00b6 Description Starts the singulary-tree tracking controller node with the configurations for the RexROV 2 vehicle. Example roslaunch uuv_gazebo_worlds ocean_waves.launch roslaunch rexrov2_description upload_rexrov2.launch roslaunch rexrov2_control start_sf_controller.launch Arguments uuv_name ( default: rexrov2 ): Namespace of the vehicle to be controller record ( default: false ): Record ROS bag gui_on ( default: true ) use_ned_frame ( default: true ) Kd ( default: 1000.0,1000.0,1000.0,100.0,100.0,100.0 ) lambda ( default: 100.0 ) c ( default: 100.0 ) teleop_on ( default: false ) joy_id ( default: 0 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) model_params_file ( default: $(find rexrov2_control)/config/model_params.yaml ) thruster_manager_output_dir ( default: $(find rexrov2_control)/config ) thruster_manager_config_file ( default: $(find rexrov2_control)/config/thruster_manager.yaml ) tam_file ( default: $(find rexrov2_control)/config/TAM.yaml ) start_velocity_control.launch \u00b6 Arguments model_name ( default: rexrov2 ) uuv_name ( default: $(arg model_name) ) joy_id ( default: 0 ) start_pd_grav_compensation_controller.launch \u00b6 Description Starts the PD controller with compensation of restoring forces node with the configurations for the RexROV 2 vehicle. Example roslaunch uuv_gazebo_worlds ocean_waves.launch roslaunch rexrov2_description upload_rexrov2.launch roslaunch rexrov2_control start_pd_grav_compensation_controller.launch Arguments uuv_name ( default: rexrov2 ): Namespace of the vehicle to be controller record ( default: false ): Record ROS bag gui_on ( default: true ): Start Gazebo client and RViz use_ned_frame ( default: false ): If true, the reference frame is set to be NED (North-East-Down) instead of Gazebo's default ENU (East-North-Up) Kp ( default: 1000,1000,1000,1000,1000,1000 ): Coefficients for the K_p K_p diagonal matrix Kd ( default: 100,100,100,100,100,100 ): Coefficients for the K_d K_d diagonal matrix teleop_on ( default: false ): Start joystick teleop node joy_id ( default: 0 ): ID of the joystick device axis_yaw ( default: 0 ): Joystick mapping for yaw angle input axis_x ( default: 4 ): Joystick mapping for X component of velocity reference input axis_y ( default: 3 ): Joystick mapping for Y component of velocity reference input axis_z ( default: 1 ): Joystick mapping for Z component of velocity reference input thruster_manager_output_dir ( default: $(find rexrov2_control)/config ): Output directory for the generated thruster manager thruster_manager_config_file ( default: $(find rexrov2_control)/config/thruster_manager.yaml ): File storing the configuration of the thruster manager tam_file ( default: $(find rexrov2_control)/config/TAM.yaml ): File storing the thruster allocation matrix model_params_file ( default: $(find rexrov2_control)/config/model_params.yaml ): File storing the vehicle model parameters loaded by the controller start_mb_fl_controller.launch \u00b6 Description Starts the model-based feedback linearization controller node with the configurations for the RexROV 2 vehicle. The controller's default parameters Kp , Kd and Ki were optimized using SMAC . Example roslaunch uuv_gazebo_worlds ocean_waves.launch roslaunch rexrov2_description upload_rexrov2.launch roslaunch rexrov2_control start_mb_fl_controller.launch Arguments uuv_name ( default: rexrov2 ) record ( default: false ): Record ROS bag gui_on ( default: true ) use_ned_frame ( default: false ) Kp ( default: 7750.307,7750.307,7750.307,7430.825,7430.825,7430.825 ) Kd ( default: 8953.924,8953.924,8953.924,8267.137,8267.137,8267.137 ) Ki ( default: 9144.575,9144.575,9144.575,2095.077,2095.077,2095.077 ) teleop_on ( default: false ) joy_id ( default: 0 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) model_params_file ( default: $(find rexrov2_control)/config/model_params.yaml ) thruster_manager_output_dir ( default: $(find rexrov2_control)/config ) thruster_manager_config_file ( default: $(find rexrov2_control)/config/thruster_manager.yaml ) tam_file ( default: $(find rexrov2_control)/config/TAM.yaml ) start_nmb_sm_controller.launch \u00b6 Description Starts the non-model-based sliding mode controller node with the configurations for the RexROV 2 vehicle. The controller's default parameters K , Kd , Ki and slope were optimized using SMAC . Example roslaunch uuv_gazebo_worlds ocean_waves.launch roslaunch rexrov2_description upload_rexrov2.launch roslaunch rexrov2_control start_nmb_sm_controller.launch Arguments uuv_name ( default: rexrov2 ): Namespace of the vehicle to be controller record ( default: false ): Record ROS bag gui_on ( default: true ): Start Gazebo client and RViz use_ned_frame ( default: false ): If true, the reference frame is set to be NED (North-East-Down) instead of Gazebo's default ENU (East-North-Up) K ( default: 5,5,5,5,5,5 ): Coefficients for the K K diagonal matrix Kd ( default: 4490.0,4490.0,4490.0,19541.395,19541.395,19541.395 ): Coefficients for the K_d K_d diagonal matrix Ki ( default: 0.1,0.1,0.1,0.476,0.476,0.476 ): Coefficients for the K_i K_i diagonal matrix slope ( default: 3.83,3.83,3.83,0.508,0.508,0.508 ): Coefficients for the \\alpha \\alpha diagonal matrix teleop_on ( default: false ): Start joystick teleop node joy_id ( default: 0 ): ID of the joystick device axis_yaw ( default: 0 ): Joystick mapping for yaw angle input axis_x ( default: 4 ): Joystick mapping for X component of velocity reference input axis_y ( default: 3 ): Joystick mapping for Y component of velocity reference input axis_z ( default: 1 ): Joystick mapping for Z component of velocity reference input max_forward_speed ( default: 0.5 ): Maximum forward speed in m/s thruster_manager_output_dir ( default: $(find rexrov2_control)/config ): Output directory for the generated thruster manager thruster_manager_config_file ( default: $(find rexrov2_control)/config/thruster_manager.yaml ): File storing the configuration of the thruster manager tam_file ( default: $(find rexrov2_control)/config/TAM.yaml ): File storing the thruster allocation matrix start_thruster_manager.launch \u00b6 Description Starts the thruster allocator node with the configuration for the RexROV 2 vehicle. The thruster allocator uses the thruster allocation matrix to convert the geometry_msgs/Wrench message from the /<uuv_name>/thruster_manager/input topic into reference input for each thruster unit. Create or reset the thruster allocation matrix In case the thruster allocation matrix has to be created or recalculated, start the simulation as follows roslaunch uuv_gazebo_worlds ocean_waves.launch roslaunch rexrov2_description upload_rexrov2.launch and then start the thruster manager with the reset_tam set to true. The file will be stored under the filename provided with the path under the input tam_file as follows roslaunch rexrov2_control start_thruster_manager.launch reset_tam:=true Example Start the simulation, spawn the RexROV 2 vehicle and then start the thruster allocation node as follows roslaunch uuv_gazebo_worlds ocean_waves.launch roslaunch rexrov2_description upload_rexrov2.launch roslaunch rexrov2_control start_thruster_manager.launch Note A controller node or similar must publish the geometry_msgs/Wrench message in the /<uuv_name>/thruster_manager/input topic for the vehicle to move. Arguments model_name ( default: rexrov2 ): Name of the model of the vehicle uuv_name ( default: $(arg model_name) ): Namespace for the vehicle instance base_link ( default: base_link ): Name of the base link frame timeout ( default: -1 ) reset_tam ( default: false ) output_dir ( default: $(find rexrov2_control)/config ) config_file ( default: $(find rexrov2_control)/config/thruster_manager.yaml ) tam_file ( default: $(find rexrov2_control)/config/TAM.yaml ) record_demo.launch \u00b6 Description Starts the rosbag record node and records a set of topics for the RexROV 2. Arguments record ( default: false ): Starts the recording node if set to true bag_filename ( default: recording.bag ): Filename for the recording ROS bag use_ned_frame ( default: false ): If set to true, stores the odometry with respect to NED frame uuv_name ( default: rexrov2 ): Namespace of the vehicle start_pid_controller.launch \u00b6 Description Starts the 6-DoF PID controller node with the configurations for the RexROV 2 vehicle. The controller's default parameters Kp , Kd and Ki were optimized using SMAC . Example roslaunch uuv_gazebo_worlds ocean_waves.launch roslaunch rexrov2_description upload_rexrov2.launch roslaunch rexrov2_control start_pid_controller.launch Arguments uuv_name ( default: rexrov2 ): Namespace of the vehicle to be controller record ( default: false ): Record ROS bag gui_on ( default: true ): Start Gazebo client and RViz use_ned_frame ( default: false ): If true, the reference frame is set to be NED (North-East-Down) instead of Gazebo's default ENU (East-North-Up) Kp ( default: 11993.888,11993.888,11993.888,19460.069,19460.069,19460.069 ): Coefficients for the K_p K_p diagonal matrix Kd ( default: 9077.459,9077.459,9077.459,18880.925,18880.925,18880.925 ): Coefficients for the K_d K_d diagonal matrix Ki ( default: 321.417,321.417,321.417,2096.951,2096.951,2096.951 ): Coefficients for the K_i K_i diagonal matrix teleop_on ( default: false ): Start joystick teleop node joy_id ( default: 0 ): ID of the joystick device axis_yaw ( default: 0 ): Joystick mapping for yaw angle input axis_x ( default: 4 ): Joystick mapping for X component of velocity reference input axis_y ( default: 3 ): Joystick mapping for Y component of velocity reference input axis_z ( default: 1 ): Joystick mapping for Z component of velocity reference input thruster_manager_output_dir ( default: $(find rexrov2_control)/config ): Output directory for the generated thruster manager thruster_manager_config_file ( default: $(find rexrov2_control)/config/thruster_manager.yaml ): File storing the configuration of the thruster manager tam_file ( default: $(find rexrov2_control)/config/TAM.yaml ): File storing the thruster allocation matrix","title":"rexrov2_control"},{"location":"packages/rexrov2/docs/packages/rexrov2_control/#description","text":"Launch and configuration files to start controllers nodes from the uuv_trajectory_control package for the RexROV 2 vehicle.","title":"Description"},{"location":"packages/rexrov2/docs/packages/rexrov2_control/#launch-files","text":"","title":"Launch files"},{"location":"packages/rexrov2/docs/packages/rexrov2_control/#start_sf_controllerlaunch","text":"Description Starts the singulary-tree tracking controller node with the configurations for the RexROV 2 vehicle. Example roslaunch uuv_gazebo_worlds ocean_waves.launch roslaunch rexrov2_description upload_rexrov2.launch roslaunch rexrov2_control start_sf_controller.launch Arguments uuv_name ( default: rexrov2 ): Namespace of the vehicle to be controller record ( default: false ): Record ROS bag gui_on ( default: true ) use_ned_frame ( default: true ) Kd ( default: 1000.0,1000.0,1000.0,100.0,100.0,100.0 ) lambda ( default: 100.0 ) c ( default: 100.0 ) teleop_on ( default: false ) joy_id ( default: 0 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) model_params_file ( default: $(find rexrov2_control)/config/model_params.yaml ) thruster_manager_output_dir ( default: $(find rexrov2_control)/config ) thruster_manager_config_file ( default: $(find rexrov2_control)/config/thruster_manager.yaml ) tam_file ( default: $(find rexrov2_control)/config/TAM.yaml )","title":"start_sf_controller.launch"},{"location":"packages/rexrov2/docs/packages/rexrov2_control/#start_velocity_controllaunch","text":"Arguments model_name ( default: rexrov2 ) uuv_name ( default: $(arg model_name) ) joy_id ( default: 0 )","title":"start_velocity_control.launch"},{"location":"packages/rexrov2/docs/packages/rexrov2_control/#start_pd_grav_compensation_controllerlaunch","text":"Description Starts the PD controller with compensation of restoring forces node with the configurations for the RexROV 2 vehicle. Example roslaunch uuv_gazebo_worlds ocean_waves.launch roslaunch rexrov2_description upload_rexrov2.launch roslaunch rexrov2_control start_pd_grav_compensation_controller.launch Arguments uuv_name ( default: rexrov2 ): Namespace of the vehicle to be controller record ( default: false ): Record ROS bag gui_on ( default: true ): Start Gazebo client and RViz use_ned_frame ( default: false ): If true, the reference frame is set to be NED (North-East-Down) instead of Gazebo's default ENU (East-North-Up) Kp ( default: 1000,1000,1000,1000,1000,1000 ): Coefficients for the K_p K_p diagonal matrix Kd ( default: 100,100,100,100,100,100 ): Coefficients for the K_d K_d diagonal matrix teleop_on ( default: false ): Start joystick teleop node joy_id ( default: 0 ): ID of the joystick device axis_yaw ( default: 0 ): Joystick mapping for yaw angle input axis_x ( default: 4 ): Joystick mapping for X component of velocity reference input axis_y ( default: 3 ): Joystick mapping for Y component of velocity reference input axis_z ( default: 1 ): Joystick mapping for Z component of velocity reference input thruster_manager_output_dir ( default: $(find rexrov2_control)/config ): Output directory for the generated thruster manager thruster_manager_config_file ( default: $(find rexrov2_control)/config/thruster_manager.yaml ): File storing the configuration of the thruster manager tam_file ( default: $(find rexrov2_control)/config/TAM.yaml ): File storing the thruster allocation matrix model_params_file ( default: $(find rexrov2_control)/config/model_params.yaml ): File storing the vehicle model parameters loaded by the controller","title":"start_pd_grav_compensation_controller.launch"},{"location":"packages/rexrov2/docs/packages/rexrov2_control/#start_mb_fl_controllerlaunch","text":"Description Starts the model-based feedback linearization controller node with the configurations for the RexROV 2 vehicle. The controller's default parameters Kp , Kd and Ki were optimized using SMAC . Example roslaunch uuv_gazebo_worlds ocean_waves.launch roslaunch rexrov2_description upload_rexrov2.launch roslaunch rexrov2_control start_mb_fl_controller.launch Arguments uuv_name ( default: rexrov2 ) record ( default: false ): Record ROS bag gui_on ( default: true ) use_ned_frame ( default: false ) Kp ( default: 7750.307,7750.307,7750.307,7430.825,7430.825,7430.825 ) Kd ( default: 8953.924,8953.924,8953.924,8267.137,8267.137,8267.137 ) Ki ( default: 9144.575,9144.575,9144.575,2095.077,2095.077,2095.077 ) teleop_on ( default: false ) joy_id ( default: 0 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) model_params_file ( default: $(find rexrov2_control)/config/model_params.yaml ) thruster_manager_output_dir ( default: $(find rexrov2_control)/config ) thruster_manager_config_file ( default: $(find rexrov2_control)/config/thruster_manager.yaml ) tam_file ( default: $(find rexrov2_control)/config/TAM.yaml )","title":"start_mb_fl_controller.launch"},{"location":"packages/rexrov2/docs/packages/rexrov2_control/#start_nmb_sm_controllerlaunch","text":"Description Starts the non-model-based sliding mode controller node with the configurations for the RexROV 2 vehicle. The controller's default parameters K , Kd , Ki and slope were optimized using SMAC . Example roslaunch uuv_gazebo_worlds ocean_waves.launch roslaunch rexrov2_description upload_rexrov2.launch roslaunch rexrov2_control start_nmb_sm_controller.launch Arguments uuv_name ( default: rexrov2 ): Namespace of the vehicle to be controller record ( default: false ): Record ROS bag gui_on ( default: true ): Start Gazebo client and RViz use_ned_frame ( default: false ): If true, the reference frame is set to be NED (North-East-Down) instead of Gazebo's default ENU (East-North-Up) K ( default: 5,5,5,5,5,5 ): Coefficients for the K K diagonal matrix Kd ( default: 4490.0,4490.0,4490.0,19541.395,19541.395,19541.395 ): Coefficients for the K_d K_d diagonal matrix Ki ( default: 0.1,0.1,0.1,0.476,0.476,0.476 ): Coefficients for the K_i K_i diagonal matrix slope ( default: 3.83,3.83,3.83,0.508,0.508,0.508 ): Coefficients for the \\alpha \\alpha diagonal matrix teleop_on ( default: false ): Start joystick teleop node joy_id ( default: 0 ): ID of the joystick device axis_yaw ( default: 0 ): Joystick mapping for yaw angle input axis_x ( default: 4 ): Joystick mapping for X component of velocity reference input axis_y ( default: 3 ): Joystick mapping for Y component of velocity reference input axis_z ( default: 1 ): Joystick mapping for Z component of velocity reference input max_forward_speed ( default: 0.5 ): Maximum forward speed in m/s thruster_manager_output_dir ( default: $(find rexrov2_control)/config ): Output directory for the generated thruster manager thruster_manager_config_file ( default: $(find rexrov2_control)/config/thruster_manager.yaml ): File storing the configuration of the thruster manager tam_file ( default: $(find rexrov2_control)/config/TAM.yaml ): File storing the thruster allocation matrix","title":"start_nmb_sm_controller.launch"},{"location":"packages/rexrov2/docs/packages/rexrov2_control/#start_thruster_managerlaunch","text":"Description Starts the thruster allocator node with the configuration for the RexROV 2 vehicle. The thruster allocator uses the thruster allocation matrix to convert the geometry_msgs/Wrench message from the /<uuv_name>/thruster_manager/input topic into reference input for each thruster unit. Create or reset the thruster allocation matrix In case the thruster allocation matrix has to be created or recalculated, start the simulation as follows roslaunch uuv_gazebo_worlds ocean_waves.launch roslaunch rexrov2_description upload_rexrov2.launch and then start the thruster manager with the reset_tam set to true. The file will be stored under the filename provided with the path under the input tam_file as follows roslaunch rexrov2_control start_thruster_manager.launch reset_tam:=true Example Start the simulation, spawn the RexROV 2 vehicle and then start the thruster allocation node as follows roslaunch uuv_gazebo_worlds ocean_waves.launch roslaunch rexrov2_description upload_rexrov2.launch roslaunch rexrov2_control start_thruster_manager.launch Note A controller node or similar must publish the geometry_msgs/Wrench message in the /<uuv_name>/thruster_manager/input topic for the vehicle to move. Arguments model_name ( default: rexrov2 ): Name of the model of the vehicle uuv_name ( default: $(arg model_name) ): Namespace for the vehicle instance base_link ( default: base_link ): Name of the base link frame timeout ( default: -1 ) reset_tam ( default: false ) output_dir ( default: $(find rexrov2_control)/config ) config_file ( default: $(find rexrov2_control)/config/thruster_manager.yaml ) tam_file ( default: $(find rexrov2_control)/config/TAM.yaml )","title":"start_thruster_manager.launch"},{"location":"packages/rexrov2/docs/packages/rexrov2_control/#record_demolaunch","text":"Description Starts the rosbag record node and records a set of topics for the RexROV 2. Arguments record ( default: false ): Starts the recording node if set to true bag_filename ( default: recording.bag ): Filename for the recording ROS bag use_ned_frame ( default: false ): If set to true, stores the odometry with respect to NED frame uuv_name ( default: rexrov2 ): Namespace of the vehicle","title":"record_demo.launch"},{"location":"packages/rexrov2/docs/packages/rexrov2_control/#start_pid_controllerlaunch","text":"Description Starts the 6-DoF PID controller node with the configurations for the RexROV 2 vehicle. The controller's default parameters Kp , Kd and Ki were optimized using SMAC . Example roslaunch uuv_gazebo_worlds ocean_waves.launch roslaunch rexrov2_description upload_rexrov2.launch roslaunch rexrov2_control start_pid_controller.launch Arguments uuv_name ( default: rexrov2 ): Namespace of the vehicle to be controller record ( default: false ): Record ROS bag gui_on ( default: true ): Start Gazebo client and RViz use_ned_frame ( default: false ): If true, the reference frame is set to be NED (North-East-Down) instead of Gazebo's default ENU (East-North-Up) Kp ( default: 11993.888,11993.888,11993.888,19460.069,19460.069,19460.069 ): Coefficients for the K_p K_p diagonal matrix Kd ( default: 9077.459,9077.459,9077.459,18880.925,18880.925,18880.925 ): Coefficients for the K_d K_d diagonal matrix Ki ( default: 321.417,321.417,321.417,2096.951,2096.951,2096.951 ): Coefficients for the K_i K_i diagonal matrix teleop_on ( default: false ): Start joystick teleop node joy_id ( default: 0 ): ID of the joystick device axis_yaw ( default: 0 ): Joystick mapping for yaw angle input axis_x ( default: 4 ): Joystick mapping for X component of velocity reference input axis_y ( default: 3 ): Joystick mapping for Y component of velocity reference input axis_z ( default: 1 ): Joystick mapping for Z component of velocity reference input thruster_manager_output_dir ( default: $(find rexrov2_control)/config ): Output directory for the generated thruster manager thruster_manager_config_file ( default: $(find rexrov2_control)/config/thruster_manager.yaml ): File storing the configuration of the thruster manager tam_file ( default: $(find rexrov2_control)/config/TAM.yaml ): File storing the thruster allocation matrix","title":"start_pid_controller.launch"},{"location":"packages/rexrov2/docs/packages/rexrov2_description/","text":"Link to the rexrov2 repository here Description \u00b6 The robot description files for the RexROV 2 underwater vehicle and launch files to spawn the model in different configurations. Launch files \u00b6 upload_rexrov2_oberon4.launch \u00b6 Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) use_geodetic ( default: false ) latitude ( default: 0 ) longitude ( default: 0 ) depth ( default: 0 ) latitude_ref ( default: 0 ) longitude_ref ( default: 0 ) altitude_ref ( default: 0 ) namespace ( default: rexrov2 ) use_simplified_mesh ( default: false ) world_frame ( default: world ) upload_rexrov2_oberon7.launch \u00b6 Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) use_geodetic ( default: false ) latitude ( default: 0 ) longitude ( default: 0 ) depth ( default: 0 ) latitude_ref ( default: 0 ) longitude_ref ( default: 0 ) altitude_ref ( default: 0 ) namespace ( default: rexrov2 ) use_simplified_mesh ( default: false ) world_frame ( default: world ) upload_rexrov2_oberon_arms.launch \u00b6 Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) use_geodetic ( default: false ) latitude ( default: 0 ) longitude ( default: 0 ) depth ( default: 0 ) latitude_ref ( default: 0 ) longitude_ref ( default: 0 ) altitude_ref ( default: 0 ) namespace ( default: rexrov2 ) use_simplified_mesh ( default: false ) world_frame ( default: world ) upload_rexrov2.launch \u00b6 Description Spawns the RexROV 2 vehicle in the simulation Arguments debug ( default: 0 ): Starts the Gazebo plugins in debug mode for more verbose output x ( default: 0 ): X coordinate of the vehicle's initial position (in ENU) y ( default: 0 ): Y coordinate of the vehicle's initial position (in ENU) z ( default: -20 ): Z coordinate of the vehicle's initial position (in ENU) roll ( default: 0.0 ): Roll angle of the vehicle's initial orientation pitch ( default: 0.0 ): Pitch angle of the vehicle's initial orientation yaw ( default: 0.0 ): Yaw angle of the vehicle's initial orientation use_geodetic ( default: false ): Spawn the vehicle using geodetic instead of Cartesian coordinates latitude ( default: 0 ): Latitude for the vehicle's initial position in degrees longitude ( default: 0 ): Longitude for the vehicle's initial position in degrees depth ( default: 0 ): Depth of the vehicle's initial position with respect to the water surface in meters latitude_ref ( default: 0 ): Latitude of the origin in degrees longitude_ref ( default: 0 ): Longitude of the origin in degrees altitude_ref ( default: 0 ): Altitude of the origin in meters mode ( default: default ): Vehicle's build configuration mode namespace ( default: rexrov2 ): Namespace to spawn the vehicle use_simplified_mesh ( default: false ): Use simplified geometries instead of the mesh use_ned_frame ( default: false ): Set the inertial reference to NED (North-East-Down) convention instead of Gazebo's default ENU (East-North-Up)","title":"rexrov2_description"},{"location":"packages/rexrov2/docs/packages/rexrov2_description/#description","text":"The robot description files for the RexROV 2 underwater vehicle and launch files to spawn the model in different configurations.","title":"Description"},{"location":"packages/rexrov2/docs/packages/rexrov2_description/#launch-files","text":"","title":"Launch files"},{"location":"packages/rexrov2/docs/packages/rexrov2_description/#upload_rexrov2_oberon4launch","text":"Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) use_geodetic ( default: false ) latitude ( default: 0 ) longitude ( default: 0 ) depth ( default: 0 ) latitude_ref ( default: 0 ) longitude_ref ( default: 0 ) altitude_ref ( default: 0 ) namespace ( default: rexrov2 ) use_simplified_mesh ( default: false ) world_frame ( default: world )","title":"upload_rexrov2_oberon4.launch"},{"location":"packages/rexrov2/docs/packages/rexrov2_description/#upload_rexrov2_oberon7launch","text":"Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) use_geodetic ( default: false ) latitude ( default: 0 ) longitude ( default: 0 ) depth ( default: 0 ) latitude_ref ( default: 0 ) longitude_ref ( default: 0 ) altitude_ref ( default: 0 ) namespace ( default: rexrov2 ) use_simplified_mesh ( default: false ) world_frame ( default: world )","title":"upload_rexrov2_oberon7.launch"},{"location":"packages/rexrov2/docs/packages/rexrov2_description/#upload_rexrov2_oberon_armslaunch","text":"Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) use_geodetic ( default: false ) latitude ( default: 0 ) longitude ( default: 0 ) depth ( default: 0 ) latitude_ref ( default: 0 ) longitude_ref ( default: 0 ) altitude_ref ( default: 0 ) namespace ( default: rexrov2 ) use_simplified_mesh ( default: false ) world_frame ( default: world )","title":"upload_rexrov2_oberon_arms.launch"},{"location":"packages/rexrov2/docs/packages/rexrov2_description/#upload_rexrov2launch","text":"Description Spawns the RexROV 2 vehicle in the simulation Arguments debug ( default: 0 ): Starts the Gazebo plugins in debug mode for more verbose output x ( default: 0 ): X coordinate of the vehicle's initial position (in ENU) y ( default: 0 ): Y coordinate of the vehicle's initial position (in ENU) z ( default: -20 ): Z coordinate of the vehicle's initial position (in ENU) roll ( default: 0.0 ): Roll angle of the vehicle's initial orientation pitch ( default: 0.0 ): Pitch angle of the vehicle's initial orientation yaw ( default: 0.0 ): Yaw angle of the vehicle's initial orientation use_geodetic ( default: false ): Spawn the vehicle using geodetic instead of Cartesian coordinates latitude ( default: 0 ): Latitude for the vehicle's initial position in degrees longitude ( default: 0 ): Longitude for the vehicle's initial position in degrees depth ( default: 0 ): Depth of the vehicle's initial position with respect to the water surface in meters latitude_ref ( default: 0 ): Latitude of the origin in degrees longitude_ref ( default: 0 ): Longitude of the origin in degrees altitude_ref ( default: 0 ): Altitude of the origin in meters mode ( default: default ): Vehicle's build configuration mode namespace ( default: rexrov2 ): Namespace to spawn the vehicle use_simplified_mesh ( default: false ): Use simplified geometries instead of the mesh use_ned_frame ( default: false ): Set the inertial reference to NED (North-East-Down) convention instead of Gazebo's default ENU (East-North-Up)","title":"upload_rexrov2.launch"},{"location":"packages/rexrov2/docs/packages/rexrov2_gazebo/","text":"Link to the rexrov2 repository here Description \u00b6 Package with launch files for demonstrations with the RexROV 2 vehicle with different positioning controllers. Launch files \u00b6 start_demo_pd_grav_compensation_controller.launch \u00b6 Arguments record ( default: false ): Set this flag to true to call record.launch bag_filename ( default: recording.bag ): Name of the output ROS bag file in case record is set to true use_ned_frame ( default: false ): If true, uses the NED (North-East-Down) frame conversion. If false, ENU (East-North-Up) will be used per default. x ( default: 0 ): X coordinate of the vehicle's initial position (in ENU) y ( default: 0 ): Y coordinate of the vehicle's initial position (in ENU) z ( default: -25 ): Z coordinate of the vehicle's initial position (in ENU) yaw ( default: 0 ): Yaw angle of the vehicle's initial orientation teleop_on ( default: false ): If true, the teleop node will be started joy_id ( default: 0 ): Joystick ID start_demo_nmb_sm_controller.launch \u00b6 Arguments record ( default: false ): Set this flag to true to call record.launch bag_filename ( default: recording.bag ): Name of the output ROS bag file in case record is set to true use_ned_frame ( default: false ): If true, uses the NED (North-East-Down) frame conversion. If false, ENU (East-North-Up) will be used per default. x ( default: 0 ): X coordinate of the vehicle's initial position (in ENU) y ( default: 0 ): Y coordinate of the vehicle's initial position (in ENU) z ( default: -25 ): Z coordinate of the vehicle's initial position (in ENU) yaw ( default: 0 ): Yaw angle of the vehicle's initial orientation teleop_on ( default: false ): If true, the teleop node will be started joy_id ( default: 0 ): Joystick ID start_demo_pid_controller.launch \u00b6 Arguments record ( default: false ): Set this flag to true to call record.launch bag_filename ( default: recording.bag ): Name of the output ROS bag file in case record is set to true use_ned_frame ( default: false ): If true, uses the NED (North-East-Down) frame conversion. If false, ENU (East-North-Up) will be used per default. x ( default: 0 ): X coordinate of the vehicle's initial position (in ENU) y ( default: 0 ): Y coordinate of the vehicle's initial position (in ENU) z ( default: -25 ): Z coordinate of the vehicle's initial position (in ENU) yaw ( default: 0 ): Yaw angle of the vehicle's initial orientation teleop_on ( default: false ): If true, the teleop node will be started joy_id ( default: 0 ): Joystick ID start_demo_sf_controller.launch \u00b6 Arguments record ( default: false ): Set this flag to true to call record.launch bag_filename ( default: recording.bag ): Name of the output ROS bag file in case record is set to true use_ned_frame ( default: false ): If true, uses the NED (North-East-Down) frame conversion. If false, ENU (East-North-Up) will be used per default. x ( default: 0 ): X coordinate of the vehicle's initial position (in ENU) y ( default: 0 ): Y coordinate of the vehicle's initial position (in ENU) z ( default: -25 ): Z coordinate of the vehicle's initial position (in ENU) yaw ( default: 0 ): Yaw angle of the vehicle's initial orientation teleop_on ( default: false ): If true, the teleop node will be started joy_id ( default: 0 ): Joystick ID start_demo_mb_fl_controller.launch \u00b6 Arguments record ( default: false ): Set this flag to true to call record.launch bag_filename ( default: recording.bag ): Name of the output ROS bag file in case record is set to true use_ned_frame ( default: false ): If true, uses the NED (North-East-Down) frame conversion. If false, ENU (East-North-Up) will be used per default. x ( default: 0 ): X coordinate of the vehicle's initial position (in ENU) y ( default: 0 ): Y coordinate of the vehicle's initial position (in ENU) z ( default: -5 ): Z coordinate of the vehicle's initial position (in ENU) yaw ( default: 0 ): Yaw angle of the vehicle's initial orientation teleop_on ( default: false ): If true, the teleop node will be started joy_id ( default: 0 ): Joystick ID record.launch \u00b6 Arguments record ( default: false ): If true, the rosbag record node will be called bag_filename ( default: recording.bag ): Name of the recording bag uuv_name ( default: rexrov2 ): Namespace of the vehicle","title":"rexrov2_gazebo"},{"location":"packages/rexrov2/docs/packages/rexrov2_gazebo/#description","text":"Package with launch files for demonstrations with the RexROV 2 vehicle with different positioning controllers.","title":"Description"},{"location":"packages/rexrov2/docs/packages/rexrov2_gazebo/#launch-files","text":"","title":"Launch files"},{"location":"packages/rexrov2/docs/packages/rexrov2_gazebo/#start_demo_pd_grav_compensation_controllerlaunch","text":"Arguments record ( default: false ): Set this flag to true to call record.launch bag_filename ( default: recording.bag ): Name of the output ROS bag file in case record is set to true use_ned_frame ( default: false ): If true, uses the NED (North-East-Down) frame conversion. If false, ENU (East-North-Up) will be used per default. x ( default: 0 ): X coordinate of the vehicle's initial position (in ENU) y ( default: 0 ): Y coordinate of the vehicle's initial position (in ENU) z ( default: -25 ): Z coordinate of the vehicle's initial position (in ENU) yaw ( default: 0 ): Yaw angle of the vehicle's initial orientation teleop_on ( default: false ): If true, the teleop node will be started joy_id ( default: 0 ): Joystick ID","title":"start_demo_pd_grav_compensation_controller.launch"},{"location":"packages/rexrov2/docs/packages/rexrov2_gazebo/#start_demo_nmb_sm_controllerlaunch","text":"Arguments record ( default: false ): Set this flag to true to call record.launch bag_filename ( default: recording.bag ): Name of the output ROS bag file in case record is set to true use_ned_frame ( default: false ): If true, uses the NED (North-East-Down) frame conversion. If false, ENU (East-North-Up) will be used per default. x ( default: 0 ): X coordinate of the vehicle's initial position (in ENU) y ( default: 0 ): Y coordinate of the vehicle's initial position (in ENU) z ( default: -25 ): Z coordinate of the vehicle's initial position (in ENU) yaw ( default: 0 ): Yaw angle of the vehicle's initial orientation teleop_on ( default: false ): If true, the teleop node will be started joy_id ( default: 0 ): Joystick ID","title":"start_demo_nmb_sm_controller.launch"},{"location":"packages/rexrov2/docs/packages/rexrov2_gazebo/#start_demo_pid_controllerlaunch","text":"Arguments record ( default: false ): Set this flag to true to call record.launch bag_filename ( default: recording.bag ): Name of the output ROS bag file in case record is set to true use_ned_frame ( default: false ): If true, uses the NED (North-East-Down) frame conversion. If false, ENU (East-North-Up) will be used per default. x ( default: 0 ): X coordinate of the vehicle's initial position (in ENU) y ( default: 0 ): Y coordinate of the vehicle's initial position (in ENU) z ( default: -25 ): Z coordinate of the vehicle's initial position (in ENU) yaw ( default: 0 ): Yaw angle of the vehicle's initial orientation teleop_on ( default: false ): If true, the teleop node will be started joy_id ( default: 0 ): Joystick ID","title":"start_demo_pid_controller.launch"},{"location":"packages/rexrov2/docs/packages/rexrov2_gazebo/#start_demo_sf_controllerlaunch","text":"Arguments record ( default: false ): Set this flag to true to call record.launch bag_filename ( default: recording.bag ): Name of the output ROS bag file in case record is set to true use_ned_frame ( default: false ): If true, uses the NED (North-East-Down) frame conversion. If false, ENU (East-North-Up) will be used per default. x ( default: 0 ): X coordinate of the vehicle's initial position (in ENU) y ( default: 0 ): Y coordinate of the vehicle's initial position (in ENU) z ( default: -25 ): Z coordinate of the vehicle's initial position (in ENU) yaw ( default: 0 ): Yaw angle of the vehicle's initial orientation teleop_on ( default: false ): If true, the teleop node will be started joy_id ( default: 0 ): Joystick ID","title":"start_demo_sf_controller.launch"},{"location":"packages/rexrov2/docs/packages/rexrov2_gazebo/#start_demo_mb_fl_controllerlaunch","text":"Arguments record ( default: false ): Set this flag to true to call record.launch bag_filename ( default: recording.bag ): Name of the output ROS bag file in case record is set to true use_ned_frame ( default: false ): If true, uses the NED (North-East-Down) frame conversion. If false, ENU (East-North-Up) will be used per default. x ( default: 0 ): X coordinate of the vehicle's initial position (in ENU) y ( default: 0 ): Y coordinate of the vehicle's initial position (in ENU) z ( default: -5 ): Z coordinate of the vehicle's initial position (in ENU) yaw ( default: 0 ): Yaw angle of the vehicle's initial orientation teleop_on ( default: false ): If true, the teleop node will be started joy_id ( default: 0 ): Joystick ID","title":"start_demo_mb_fl_controller.launch"},{"location":"packages/rexrov2/docs/packages/rexrov2_gazebo/#recordlaunch","text":"Arguments record ( default: false ): If true, the rosbag record node will be called bag_filename ( default: recording.bag ): Name of the recording bag uuv_name ( default: rexrov2 ): Namespace of the vehicle","title":"record.launch"},{"location":"packages/uuv_plume_simulator/intro/","text":"Link to the uuv_plume_simulator repository here Link to the documentation page Chat on Discord This repository contains ROS nodes and messages necessary to simulate a turbulent plume, which is an implementation of the algorithm described in [1]. This repository is complementary to the Unmanned Underwater Vehicle Simulator (UUV Simulator) , an open-source project extending the simulation capabilities of the robotics simulator Gazebo to underwater vehicles and environments. For installation and usage instructions, please refer to the documentation pages . [1] Yu Tian and Aiqun Zhang, \"Simulation environment and guidance system for AUV tracing chemical plume in 3-dimensions,\" 2010 2 nd International Asia Conference on Informatics in Control, Automation and Robotics (CAR 2010), Mar. 2010. Purpose of the project \u00b6 This software is a research prototype, originally developed for the EU ECSEL Project 662107 SWARMs . The software is not ready for production use. However, the license conditions of the applicable Open Source licenses allow you to adapt the software to your needs. Before using it in a safety relevant setting, make sure that the software fulfills your requirements and adjust it according to any applicable safety standards (e.g. ISO 26262). Requirements \u00b6 To simulate the plume, please refer to the UUV Simulator repository and follow the installation instructions of the package. Then you can clone this package in the src folder of you catkin workspace cd ~/catkin_ws/src git clone https://github.com/uuvsimulator/uuv_plume_simulator.git and then build your catkin workspace cd ~/catkin_ws catkin_make # or <catkin build>, if you are using catkin_tools Example of usage \u00b6 The plume simulator package are installed, one demonstration can be run to visualize the plume particles in RViz. To start it, run roslaunch uuv_plume_simulator start_plume_example.launch To start an example of a turbulent plume model, run the script roslaunch uuv_plume_simulator start_demo_turbulent_plume.launch In this case, the plume runs independently from the UUV Simulator . In order to start this example using one of the Gazebo worlds from UUV Simulator and therefore use the current velocity topic generated by a Gazebo plugin , start the example first as roslaunch uuv_plume_simulator start_plume_example.launch use_gazebo:=true and then roslaunch uuv_plume_simulator start_demo_turbulent_plume.launch use_gazebo:=true If no current topic is available, the particles will accumulate around the plume source. To add a particle concentration sensor to the vehicle, check the URDF macro snippets found here that can be used to add one to the robot description. License \u00b6 uuv_plume_simulator is open-sourced under the Apache-2.0 license. See the LICENSE file for details.","title":"Introduction"},{"location":"packages/uuv_plume_simulator/intro/#purpose-of-the-project","text":"This software is a research prototype, originally developed for the EU ECSEL Project 662107 SWARMs . The software is not ready for production use. However, the license conditions of the applicable Open Source licenses allow you to adapt the software to your needs. Before using it in a safety relevant setting, make sure that the software fulfills your requirements and adjust it according to any applicable safety standards (e.g. ISO 26262).","title":"Purpose of the project"},{"location":"packages/uuv_plume_simulator/intro/#requirements","text":"To simulate the plume, please refer to the UUV Simulator repository and follow the installation instructions of the package. Then you can clone this package in the src folder of you catkin workspace cd ~/catkin_ws/src git clone https://github.com/uuvsimulator/uuv_plume_simulator.git and then build your catkin workspace cd ~/catkin_ws catkin_make # or <catkin build>, if you are using catkin_tools","title":"Requirements"},{"location":"packages/uuv_plume_simulator/intro/#example-of-usage","text":"The plume simulator package are installed, one demonstration can be run to visualize the plume particles in RViz. To start it, run roslaunch uuv_plume_simulator start_plume_example.launch To start an example of a turbulent plume model, run the script roslaunch uuv_plume_simulator start_demo_turbulent_plume.launch In this case, the plume runs independently from the UUV Simulator . In order to start this example using one of the Gazebo worlds from UUV Simulator and therefore use the current velocity topic generated by a Gazebo plugin , start the example first as roslaunch uuv_plume_simulator start_plume_example.launch use_gazebo:=true and then roslaunch uuv_plume_simulator start_demo_turbulent_plume.launch use_gazebo:=true If no current topic is available, the particles will accumulate around the plume source. To add a particle concentration sensor to the vehicle, check the URDF macro snippets found here that can be used to add one to the robot description.","title":"Example of usage"},{"location":"packages/uuv_plume_simulator/intro/#license","text":"uuv_plume_simulator is open-sourced under the Apache-2.0 license. See the LICENSE file for details.","title":"License"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/","text":"class uuv_plume_simulator::CPCSensor \u00b6 Summary \u00b6 Members Descriptions public CPCSensor () Class constructor. public ~CPCSensor () Class destructor. protected bool updatingCloud Flag to ensure the cloud and measurement update don't coincide. protected double gamma Gamma velocity parameter for the smoothing function. protected double gain Sensor gain. protected double smoothingLength Radius of the kernel to identify particles that will be taken into account in the concentration computation. protected std::string salinityUnit Salinity unit to be used. Options are. protected double saturation Sensor saturation. protected bool useGeoCoordinates Flag that will allow storing the geodetic coordinates with the measurement message. protected bool publishSalinity Flag to activate publishing the simulated salinity. protected double referenceSalinityValue Default salinity value for the fluid e.g. sea water. protected double plumeSalinityValue Default salinity value for the plume. protected bool updateMeasurement Set to true to avoid particle update. protected double updateRate Output topic's update rate. protected std::string sensorFrameID Name of the sensor frame. protected bool areParticlesInit Flag set to true after the first set of plume particles is received. protected bool useOdom Flag set if the sensor position update must be read from the vehicle's odometry input topic. protected bool useGPS Flag set if the sensor position update must be read from the vehicle's GPS topic. protected bool useTFUpdate Flag set if the TF update wrt the sensor frame ID. protected geometry_msgs::Vector3 cartPos Measured Cartesian position. protected geographic_msgs::GeoPoint geoPos Measured geodetic position. protected ros::Subscriber particlesSub Subscriber for the plume particle point cloud. protected ros::Subscriber odometrySub Subscriber for odometry topic. protected ros::Subscriber gpsSub Subscriber to the GPS update topic. protected ros::Publisher concentrationPub Output topic for particle concentration. protected ros::Publisher salinityPub Output topic for salinity. protected std::shared_ptr< ros::NodeHandle > nodeHandle ROS node handle. protected tf2_ros::Buffer tfBuffer TF buffer instance. protected std::shared_ptr< tf2_ros::TransformListener > tfListener TF listener pointer. protected GeographicLib::LocalCartesian projection Local Cartesian projection. protected uuv_plume_msgs::ParticleConcentration concentrationMsg Plume concentration message. protected uuv_plume_msgs::Salinity salinityMsg Salinity message. protected ros::Timer updateTimer Sensor update timer. protected std::default_random_engine rndGen Pseudo random number generator. protected std::normal_distribution< double > noiseModel Normal distribution describing the noise model. protected double noiseAmp Noise amplitude. protected double noiseSigma Noise standard deviation. protected void OnSensorUpdate (const ros::TimerEvent &) Update the output concentration and salinity topics. protected void OnPlumeParticlesUpdate (const sensor_msgs::PointCloud::ConstPtr & _msg) Update callback from the plume particles. protected void OnOdometryUpdate (const nav_msgs::Odometry::ConstPtr & _msg) Update the odometry callback. protected void OnGPSUpdate (const sensor_msgs::NavSatFix::ConstPtr & _msg) Update the GPS update callback. Members \u00b6 public CPCSensor () \u00b6 Class constructor. public ~CPCSensor () \u00b6 Class destructor. protected bool updatingCloud \u00b6 Flag to ensure the cloud and measurement update don't coincide. protected double gamma \u00b6 Gamma velocity parameter for the smoothing function. protected double gain \u00b6 Sensor gain. protected double smoothingLength \u00b6 Radius of the kernel to identify particles that will be taken into account in the concentration computation. protected std::string salinityUnit \u00b6 Salinity unit to be used. Options are. ppt (parts per thousand) ppm (parts per million) psu (practical salinity unit) protected double saturation \u00b6 Sensor saturation. protected bool useGeoCoordinates \u00b6 Flag that will allow storing the geodetic coordinates with the measurement message. protected bool publishSalinity \u00b6 Flag to activate publishing the simulated salinity. protected double referenceSalinityValue \u00b6 Default salinity value for the fluid e.g. sea water. protected double plumeSalinityValue \u00b6 Default salinity value for the plume. protected bool updateMeasurement \u00b6 Set to true to avoid particle update. protected double updateRate \u00b6 Output topic's update rate. protected std::string sensorFrameID \u00b6 Name of the sensor frame. protected bool areParticlesInit \u00b6 Flag set to true after the first set of plume particles is received. protected bool useOdom \u00b6 Flag set if the sensor position update must be read from the vehicle's odometry input topic. protected bool useGPS \u00b6 Flag set if the sensor position update must be read from the vehicle's GPS topic. protected bool useTFUpdate \u00b6 Flag set if the TF update wrt the sensor frame ID. protected geometry_msgs::Vector3 cartPos \u00b6 Measured Cartesian position. protected geographic_msgs::GeoPoint geoPos \u00b6 Measured geodetic position. protected ros::Subscriber particlesSub \u00b6 Subscriber for the plume particle point cloud. protected ros::Subscriber odometrySub \u00b6 Subscriber for odometry topic. protected ros::Subscriber gpsSub \u00b6 Subscriber to the GPS update topic. protected ros::Publisher concentrationPub \u00b6 Output topic for particle concentration. protected ros::Publisher salinityPub \u00b6 Output topic for salinity. protected std::shared_ptr< ros::NodeHandle > nodeHandle \u00b6 ROS node handle. protected tf2_ros::Buffer tfBuffer \u00b6 TF buffer instance. protected std::shared_ptr< tf2_ros::TransformListener > tfListener \u00b6 TF listener pointer. protected GeographicLib::LocalCartesian projection \u00b6 Local Cartesian projection. protected uuv_plume_msgs::ParticleConcentration concentrationMsg \u00b6 Plume concentration message. protected uuv_plume_msgs::Salinity salinityMsg \u00b6 Salinity message. protected ros::Timer updateTimer \u00b6 Sensor update timer. protected std::default_random_engine rndGen \u00b6 Pseudo random number generator. protected std::normal_distribution< double > noiseModel \u00b6 Normal distribution describing the noise model. protected double noiseAmp \u00b6 Noise amplitude. protected double noiseSigma \u00b6 Noise standard deviation. protected void OnSensorUpdate (const ros::TimerEvent &) \u00b6 Update the output concentration and salinity topics. protected void OnPlumeParticlesUpdate (const sensor_msgs::PointCloud::ConstPtr & _msg) \u00b6 Update callback from the plume particles. protected void OnOdometryUpdate (const nav_msgs::Odometry::ConstPtr & _msg) \u00b6 Update the odometry callback. protected void OnGPSUpdate (const sensor_msgs::NavSatFix::ConstPtr & _msg) \u00b6 Update the GPS update callback.","title":"CPCSensor"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#class-uuv_plume_simulatorcpcsensor","text":"","title":"class uuv_plume_simulator::CPCSensor"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#summary","text":"Members Descriptions public CPCSensor () Class constructor. public ~CPCSensor () Class destructor. protected bool updatingCloud Flag to ensure the cloud and measurement update don't coincide. protected double gamma Gamma velocity parameter for the smoothing function. protected double gain Sensor gain. protected double smoothingLength Radius of the kernel to identify particles that will be taken into account in the concentration computation. protected std::string salinityUnit Salinity unit to be used. Options are. protected double saturation Sensor saturation. protected bool useGeoCoordinates Flag that will allow storing the geodetic coordinates with the measurement message. protected bool publishSalinity Flag to activate publishing the simulated salinity. protected double referenceSalinityValue Default salinity value for the fluid e.g. sea water. protected double plumeSalinityValue Default salinity value for the plume. protected bool updateMeasurement Set to true to avoid particle update. protected double updateRate Output topic's update rate. protected std::string sensorFrameID Name of the sensor frame. protected bool areParticlesInit Flag set to true after the first set of plume particles is received. protected bool useOdom Flag set if the sensor position update must be read from the vehicle's odometry input topic. protected bool useGPS Flag set if the sensor position update must be read from the vehicle's GPS topic. protected bool useTFUpdate Flag set if the TF update wrt the sensor frame ID. protected geometry_msgs::Vector3 cartPos Measured Cartesian position. protected geographic_msgs::GeoPoint geoPos Measured geodetic position. protected ros::Subscriber particlesSub Subscriber for the plume particle point cloud. protected ros::Subscriber odometrySub Subscriber for odometry topic. protected ros::Subscriber gpsSub Subscriber to the GPS update topic. protected ros::Publisher concentrationPub Output topic for particle concentration. protected ros::Publisher salinityPub Output topic for salinity. protected std::shared_ptr< ros::NodeHandle > nodeHandle ROS node handle. protected tf2_ros::Buffer tfBuffer TF buffer instance. protected std::shared_ptr< tf2_ros::TransformListener > tfListener TF listener pointer. protected GeographicLib::LocalCartesian projection Local Cartesian projection. protected uuv_plume_msgs::ParticleConcentration concentrationMsg Plume concentration message. protected uuv_plume_msgs::Salinity salinityMsg Salinity message. protected ros::Timer updateTimer Sensor update timer. protected std::default_random_engine rndGen Pseudo random number generator. protected std::normal_distribution< double > noiseModel Normal distribution describing the noise model. protected double noiseAmp Noise amplitude. protected double noiseSigma Noise standard deviation. protected void OnSensorUpdate (const ros::TimerEvent &) Update the output concentration and salinity topics. protected void OnPlumeParticlesUpdate (const sensor_msgs::PointCloud::ConstPtr & _msg) Update callback from the plume particles. protected void OnOdometryUpdate (const nav_msgs::Odometry::ConstPtr & _msg) Update the odometry callback. protected void OnGPSUpdate (const sensor_msgs::NavSatFix::ConstPtr & _msg) Update the GPS update callback.","title":"Summary"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#members","text":"","title":"Members"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#publiccpcsensor","text":"Class constructor.","title":"publicCPCSensor()"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#publiccpcsensor_1","text":"Class destructor.","title":"public~CPCSensor()"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-boolupdatingcloud","text":"Flag to ensure the cloud and measurement update don't coincide.","title":"protected boolupdatingCloud"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-doublegamma","text":"Gamma velocity parameter for the smoothing function.","title":"protected doublegamma"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-doublegain","text":"Sensor gain.","title":"protected doublegain"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-doublesmoothinglength","text":"Radius of the kernel to identify particles that will be taken into account in the concentration computation.","title":"protected doublesmoothingLength"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-stdstringsalinityunit","text":"Salinity unit to be used. Options are. ppt (parts per thousand) ppm (parts per million) psu (practical salinity unit)","title":"protected std::stringsalinityUnit"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-doublesaturation","text":"Sensor saturation.","title":"protected doublesaturation"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-boolusegeocoordinates","text":"Flag that will allow storing the geodetic coordinates with the measurement message.","title":"protected booluseGeoCoordinates"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-boolpublishsalinity","text":"Flag to activate publishing the simulated salinity.","title":"protected boolpublishSalinity"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-doublereferencesalinityvalue","text":"Default salinity value for the fluid e.g. sea water.","title":"protected doublereferenceSalinityValue"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-doubleplumesalinityvalue","text":"Default salinity value for the plume.","title":"protected doubleplumeSalinityValue"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-boolupdatemeasurement","text":"Set to true to avoid particle update.","title":"protected boolupdateMeasurement"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-doubleupdaterate","text":"Output topic's update rate.","title":"protected doubleupdateRate"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-stdstringsensorframeid","text":"Name of the sensor frame.","title":"protected std::stringsensorFrameID"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-boolareparticlesinit","text":"Flag set to true after the first set of plume particles is received.","title":"protected boolareParticlesInit"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-booluseodom","text":"Flag set if the sensor position update must be read from the vehicle's odometry input topic.","title":"protected booluseOdom"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-boolusegps","text":"Flag set if the sensor position update must be read from the vehicle's GPS topic.","title":"protected booluseGPS"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-boolusetfupdate","text":"Flag set if the TF update wrt the sensor frame ID.","title":"protected booluseTFUpdate"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-geometry_msgsvector3cartpos","text":"Measured Cartesian position.","title":"protected geometry_msgs::Vector3cartPos"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-geographic_msgsgeopointgeopos","text":"Measured geodetic position.","title":"protected geographic_msgs::GeoPointgeoPos"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-rossubscriberparticlessub","text":"Subscriber for the plume particle point cloud.","title":"protected ros::SubscriberparticlesSub"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-rossubscriberodometrysub","text":"Subscriber for odometry topic.","title":"protected ros::SubscriberodometrySub"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-rossubscribergpssub","text":"Subscriber to the GPS update topic.","title":"protected ros::SubscribergpsSub"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-rospublisherconcentrationpub","text":"Output topic for particle concentration.","title":"protected ros::PublisherconcentrationPub"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-rospublishersalinitypub","text":"Output topic for salinity.","title":"protected ros::PublishersalinityPub"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-stdshared_ptr-rosnodehandle-nodehandle","text":"ROS node handle.","title":"protected std::shared_ptr&lt; ros::NodeHandle &gt;nodeHandle"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-tf2_rosbuffertfbuffer","text":"TF buffer instance.","title":"protected tf2_ros::BuffertfBuffer"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-stdshared_ptr-tf2_rostransformlistener-tflistener","text":"TF listener pointer.","title":"protected std::shared_ptr&lt; tf2_ros::TransformListener &gt;tfListener"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-geographicliblocalcartesianprojection","text":"Local Cartesian projection.","title":"protected GeographicLib::LocalCartesianprojection"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-uuv_plume_msgsparticleconcentrationconcentrationmsg","text":"Plume concentration message.","title":"protected uuv_plume_msgs::ParticleConcentrationconcentrationMsg"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-uuv_plume_msgssalinitysalinitymsg","text":"Salinity message.","title":"protected uuv_plume_msgs::SalinitysalinityMsg"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-rostimerupdatetimer","text":"Sensor update timer.","title":"protected ros::TimerupdateTimer"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-stddefault_random_enginerndgen","text":"Pseudo random number generator.","title":"protected std::default_random_enginerndGen"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-stdnormal_distribution-double-noisemodel","text":"Normal distribution describing the noise model.","title":"protected std::normal_distribution&lt; double &gt;noiseModel"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-doublenoiseamp","text":"Noise amplitude.","title":"protected doublenoiseAmp"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-doublenoisesigma","text":"Noise standard deviation.","title":"protected doublenoiseSigma"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-voidonsensorupdateconst-rostimerevent","text":"Update the output concentration and salinity topics.","title":"protected voidOnSensorUpdate(const ros::TimerEvent &amp;)"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-voidonplumeparticlesupdateconst-sensor_msgspointcloudconstptr-_msg","text":"Update callback from the plume particles.","title":"protected voidOnPlumeParticlesUpdate(const sensor_msgs::PointCloud::ConstPtr &amp; _msg)"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-voidonodometryupdateconst-nav_msgsodometryconstptr-_msg","text":"Update the odometry callback.","title":"protected voidOnOdometryUpdate(const nav_msgs::Odometry::ConstPtr &amp; _msg)"},{"location":"packages/uuv_plume_simulator/docs/api/uuv_plume_simulator::CPCSensor/#protected-voidongpsupdateconst-sensor_msgsnavsatfixconstptr-_msg","text":"Update the GPS update callback.","title":"protected voidOnGPSUpdate(const sensor_msgs::NavSatFix::ConstPtr &amp; _msg)"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_cpc_sensor/","text":"Link to the uuv_plume_simulator repository here Description \u00b6 The uuv_cpc_sensor package Launch files \u00b6 start_cpc_sensor.launch \u00b6 Arguments uuv_name latitude_ref ( default: 0 ) longitude_ref ( default: 0 ) odom_topic ( default: pose_gt ) gps_topic ( default: gps ) gamma gain radius update_rate ( default: 1 ) use_geo_coordinates reference_salinity_value ( default: 35.0 ) salinity_unit ( default: ppt ) sensor_frame_id ( default: $(arg uuv_name)/base_link ) publish_salinity ( default: true ) use_odom ( default: false ) use_gps ( default: false )","title":"uuv_cpc_sensor"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_cpc_sensor/#description","text":"The uuv_cpc_sensor package","title":"Description"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_cpc_sensor/#launch-files","text":"","title":"Launch files"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_cpc_sensor/#start_cpc_sensorlaunch","text":"Arguments uuv_name latitude_ref ( default: 0 ) longitude_ref ( default: 0 ) odom_topic ( default: pose_gt ) gps_topic ( default: gps ) gamma gain radius update_rate ( default: 1 ) use_geo_coordinates reference_salinity_value ( default: 35.0 ) salinity_unit ( default: ppt ) sensor_frame_id ( default: $(arg uuv_name)/base_link ) publish_salinity ( default: true ) use_odom ( default: false ) use_gps ( default: false )","title":"start_cpc_sensor.launch"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_msgs/","text":"Link to the uuv_plume_simulator repository here Description \u00b6 Plume simulator messages and services package. ROS Services \u00b6 SetCurrentDirection \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 angle --- bool success GetPlumeConfiguration \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- string model_name int32 n_points int32 max_particles_per_iter geometry_msgs/Point source float64 x_min float64 x_max float64 y_min float64 y_max float64 z_min float64 z_max SetCurrentVelocity \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 velocity float64 horizontal_angle --- bool success StorePlumeState \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. string output_dir string filename --- bool success string plume_file DeletePlume \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- bool success GetPlumeSourcePosition \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- geometry_msgs/Point source SetPlumeConfiguration \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. int32 n_points int32 max_particles_per_iter --- bool success CreatePassiveScalarTurbulentPlume \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. geometry_msgs/Vector3 turbulent_diffusion_coefficients geometry_msgs/Point source float64 buoyancy_flux float64 stability_param int32 n_points int32 max_particles_per_iter float64 x_min float64 x_max float64 y_min float64 y_max float64 z_min float64 z_max float64 max_life_time --- bool success GetCurrentModel \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- float64 mean float64 min float64 max float64 noise float64 mu LoadPlumeParticles \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. string plume_file --- bool success SetPlumeLimits \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 x_min float64 x_max float64 y_min float64 y_max float64 z_min float64 z_max --- bool success SetPlumeSourcePosition \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. geometry_msgs/Point source --- bool success CreateSpheroidPlume \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. geometry_msgs/Point source geometry_msgs/Quaternion orientation int32 n_points float32 a float32 c float64 x_min float64 x_max float64 y_min float64 y_max float64 z_min float64 z_max --- bool success SetCurrentModel \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 mean float64 min float64 max float64 noise float64 mu --- bool success GetNumParticles \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- int32 num_particles","title":"uuv_plume_msgs"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_msgs/#description","text":"Plume simulator messages and services package.","title":"Description"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_msgs/#ros-services","text":"","title":"ROS Services"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_msgs/#setcurrentdirection","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 angle --- bool success","title":"SetCurrentDirection"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_msgs/#getplumeconfiguration","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- string model_name int32 n_points int32 max_particles_per_iter geometry_msgs/Point source float64 x_min float64 x_max float64 y_min float64 y_max float64 z_min float64 z_max","title":"GetPlumeConfiguration"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_msgs/#setcurrentvelocity","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 velocity float64 horizontal_angle --- bool success","title":"SetCurrentVelocity"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_msgs/#storeplumestate","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. string output_dir string filename --- bool success string plume_file","title":"StorePlumeState"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_msgs/#deleteplume","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- bool success","title":"DeletePlume"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_msgs/#getplumesourceposition","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- geometry_msgs/Point source","title":"GetPlumeSourcePosition"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_msgs/#setplumeconfiguration","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. int32 n_points int32 max_particles_per_iter --- bool success","title":"SetPlumeConfiguration"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_msgs/#createpassivescalarturbulentplume","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. geometry_msgs/Vector3 turbulent_diffusion_coefficients geometry_msgs/Point source float64 buoyancy_flux float64 stability_param int32 n_points int32 max_particles_per_iter float64 x_min float64 x_max float64 y_min float64 y_max float64 z_min float64 z_max float64 max_life_time --- bool success","title":"CreatePassiveScalarTurbulentPlume"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_msgs/#getcurrentmodel","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- float64 mean float64 min float64 max float64 noise float64 mu","title":"GetCurrentModel"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_msgs/#loadplumeparticles","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. string plume_file --- bool success","title":"LoadPlumeParticles"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_msgs/#setplumelimits","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 x_min float64 x_max float64 y_min float64 y_max float64 z_min float64 z_max --- bool success","title":"SetPlumeLimits"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_msgs/#setplumesourceposition","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. geometry_msgs/Point source --- bool success","title":"SetPlumeSourcePosition"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_msgs/#createspheroidplume","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. geometry_msgs/Point source geometry_msgs/Quaternion orientation int32 n_points float32 a float32 c float64 x_min float64 x_max float64 y_min float64 y_max float64 z_min float64 z_max --- bool success","title":"CreateSpheroidPlume"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_msgs/#setcurrentmodel","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 mean float64 min float64 max float64 noise float64 mu --- bool success","title":"SetCurrentModel"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_msgs/#getnumparticles","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- int32 num_particles","title":"GetNumParticles"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_simulator/","text":"Link to the uuv_plume_simulator repository here Description \u00b6 Plume simulator package Launch files \u00b6 start_demo_turbulent_plume.launch \u00b6 Arguments use_gazebo ( default: false ) start_plume_example.launch \u00b6 Arguments use_gazebo ( default: false ) start_current_velocity_server.launch \u00b6 Arguments current_velocity_topic ( default: current_velocity ) update_rate ( default: 10 ) start_turbulent_plume.launch \u00b6 Arguments diffusion_coef_x ( default: 0.4 ) diffusion_coef_y ( default: 0.4 ) diffusion_coef_z ( default: 0.1 ) source_x ( default: -180.0 ) source_y ( default: 0.0 ) source_z ( default: -30.0 ) buoyancy_flux ( default: 0.1 ) stability_param ( default: 0.001 ) n_points ( default: 150000 ) x_min ( default: -200 ) x_max ( default: 200.0 ) y_min ( default: -75 ) y_max ( default: 75 ) z_min ( default: -60 ) z_max ( default: 0.0 ) max_particules_per_iter ( default: 80 ) max_life_time ( default: -1 ) start_plume_server.launch \u00b6 Arguments current_velocity_topic ( default: /hydrodynamics/current_velocity ) update_rate ( default: 5.0 ) Scripts \u00b6 set_demo_turbulent_plume \u00b6 Script type: shell plume_server \u00b6 Script type: python Description Passive turbulent plume server node. See also Description of the turbulent plume model Input ROS parameters update_rate ( default: 5 , type: int or float ): Update rate for the plume particle point cloud update Launch file snippet <group ns= \"plume\" > <node name= \"plume_simulation_server\" pkg= \"uuv_plume_simulator\" type= \"plume_server\" output= \"screen\" > <remap from= \"current_vel\" to= \"/hydrodynamics/current_velocity\" /> <rosparam subst_value= \"true\" > update_rate: 5 </rosparam> </node> </group> ROS services create_spheroid_plume Service description file uuv_plume_msgs/CreateSpheroidPlume Service call rosservice call /<plume_namespace>/create_spheroid_plume \"source: {x: 0.0, y: 0.0, z: 0.0} orientation: {x: 0.0, y: 0.0, z: 0.0, w: 0.0} n_points: 0 a: 0.0 c: 0.0 x_min: 0.0 x_max: 0.0 y_min: 0.0 y_max: 0.0 z_min: 0.0 z_max: 0.0\" Create a static plume in the shape of a spheroid. source : Plume source position wrt ENU frame orientation : Spheroid orientation in quaternion n_points : Number of plume particles a and c : Spheroid's semi-axis length x_min , x_max , y_min , y_max , z_min , z_max : Limits of the bounding box where the plume particles are allowed to exist create_passive_scalar_turbulent_plume Service description file uuv_plume_msgs/CreatePassiveScalarTurbulentPlume Service call rosservice call /<plume_namespace>/create_passive_scalar_turbulent_plume \"turbulent_diffusion_coefficients: {x: 0.0, y: 0.0, z: 0.0} source: {x: 0.0, y: 0.0, z: 0.0} buoyancy_flux: 0.0 stability_param: 0.0 n_points: 0 max_particles_per_iter: 0 x_min: 0.0 x_max: 0.0 y_min: 0.0 y_max: 0.0 z_min: 0.0 z_max: 0.0 max_life_time: 0.0\" Create a passive turbulent plume. turbulent_diffusion_coefficients : Coefficients ruling the diffusion of the particles for each degree of freedom of the particle. source : Position of the plume source wrt ENU frame buoyancy_flux and stability_param : Parameters controlling the plume rise n_points : Maximum number of plume particles to be generated max_particles_per_iter : Maximum number of particles generated at the source position at each iteration x_min , x_max , y_min , y_max , z_min , z_max : Limits of the bounding box where the plume particles are allowed to exist max_life_time : Maximum life time of each particle in seconds set_plume_limits Service description file uuv_plume_msgs/SetPlumeLimits Service call rosservice call /<plume_namespace>/set_plume_limits \"{x_min: 0.0, x_max: 0.0, y_min: 0.0, y_max: 0.0, z_min: 0.0, z_max: 0.0}\" Sets the bounds of the box where the plume particles are allowed to exist. x_min , x_max , y_min , y_max , z_min , z_max : Limits of the bounding box where the plume particles are allowed to exist set_plume_config Service description file uuv_plume_msgs/SetPlumeConfiguration Service call rosservice call /<plume_namespace>/set_plume_config \"n_points: 0 max_particles_per_iter: 0\" Configure the plume's particle generation parameters. n_points : Maximum number of plume particles to be generated max_particles_per_iter : Maximum number of particles generated at the source position at each iteration get_plume_config Service description file uuv_plume_msgs/GetPlumeConfiguration Service call rosservice call /<plume_namespace>/get_plume_config Return the plume's generation configuration parameters, including maximum number of particles, maximum number of particles per iteration, source position and limits of the bounding box. delete_plume Service description file uuv_plume_msgs/DeletePlume Service call rosservice call /<plume_namespace>/delete_plume Delete the source and the particles. set_plume_source_position Service description file uuv_plume_msgs/SetPlumeSourcePosition Service call rosservice call /<plume_namespace>/set_plume_source_position \"source: x: 0.0 y: 0.0 z: 0.0\" Set plume source position wrt ENU frame source : New plume source position wrt ENU frame get_plume_source_position Service description file uuv_plume_msgs/GetPlumeSourcePosition Service call rosservice call /<plume_namespace>/get_plume_source_position Return the plume source position coordinates. get_num_particles Service description file uuv_plume_msgs/GetNumParticles Service call rosservice call /<plume_namespace>/get_num_particles Return current number of plume particles. store_plume_state Service description file uuv_plume_msgs/StorePlumeState Service call rosservice call /<plume_namespace>/store_plume_state \"output_dir: '' filename: ''\" Store the position and time of creation for of each particle in a file as an YAML file. output_dir : Path to output directory filename : Output YAML file load_plume_particles Service description file uuv_plume_msgs/LoadPlumeParticles Service call rosservice call /<plume_namespace>/load_plume_particles \"plume_file: ''\" Load an YAML file with the plume particles' list positions and time of creation. plume_file : Plume YAML file current_velocity_server \u00b6 Script type: python Description Current velocity server node. In case no Gazebo simulation is providing the current velocity topic to steer the plume, this node generates a 2D current velocity topic. Both the current's velocity magnitude and horizontal angle are modeled using a Gaussian-Markov process of first order, as shown in Fossen's lecture notes . The velocity magnitude is described by \\dot{v_c}(t) + \\mu_c v_c(t) = w_c \\dot{v_c}(t) + \\mu_c v_c(t) = w_c and the horizontal angle \\phi \\phi is modeled similarly as \\dot{\\phi}(t) + \\mu_a \\phi(t) = w_a \\dot{\\phi}(t) + \\mu_a \\phi(t) = w_a where \\mu \\mu is the inverse of the time constant of the process and w w is a random variable described by a normal distribution. The final current velocity vector is then written as v(t) = ( v_c \\cos \\phi, v_c \\sin \\phi, 0 ) v(t) = ( v_c \\cos \\phi, v_c \\sin \\phi, 0 ) and published as a geometry_msgs/TwistStamped message. Input ROS parameters current_velocity_topic ( default: current_velocity , type: string ): Name of the output current velocity topic update_rate ( default: 10 , type: int or float ): Update rate of the output current velocity topic Launch file snippet <node name= \"current_velocity_server\" pkg= \"uuv_plume_simulator\" type= \"current_velocity_server\" output= \"screen\" > <rosparam subst_value= \"true\" > current_velocity_topic: /current_velocity update_rate: 10 </rosparam> </node> Running from the launch file roslaunch uuv_plume_simulator start_current_velocity_server.launch current_velocity_topic: = current_velocity update_rate: = 10 Warning Do NOT run the current velocity server with a Gazebo simulation that generates the same topic, it can cause unexpected behaviours to the plume's steering. ROS services get_current_velocity_model Service description file uuv_plume_msgs/GetCurrentModel Service call rosservice call /<namespace>/get_current_velocity_model Return the parameters for the Gauss-Markov process describing the current velocity magnitude v_c v_c . get_angle_model Service description file uuv_plume_msgs/GetCurrentModel Service call rosservice call /<namespace>/get_angle_model Return the parameters for the Gauss-Markov process describing the current's horizontal angle \\phi \\phi . set_current_velocity_model Service description file uuv_plume_msgs/SetCurrentModel Service call rosservice call /<namespace>/set_current_velocity_model \"{mean: 0.0, min: 0.0, max: 0.0, noise: 0.0, mu: 0.0}\" Set the parameters for the Gauss-Markov process describing the current velocity magnitude v_c v_c . mean : Mean value in m/s min and max : Bounds of the output velocity magnitude in m/s noise : Amplitude of the random noise value in m/s mu : Inverse of the process' time constant set_angle_model Service description file uuv_plume_msgs/SetCurrentModel Service call rosservice call /<namespace>/set_angle_model \"{mean: 0.0, min: 0.0, max: 0.0, noise: 0.0, mu: 0.0}\" Set the parameters for the Gauss-Markov process describing the current's horizontal angle \\phi \\phi . mean : Mean value in radians min and max : Bounds of the output angle in radians noise : Amplitude of the random noise value in radians mu : Inverse of the process' time constant set_current_velocity Service description file uuv_plume_msgs/SetCurrentVelocity Service call rosservice call /<namespace>/set_current_velocity \"velocity: 0.0 horizontal_angle: 0.0\" Set a default model for current velocity magnitude v_c v_c and horizontal angle \\phi \\phi . velocity : Mean current velocity magnitude in m/s `horizontal_angle: Mean horizonal angle in degrees set_demo_current_vel_gazebo \u00b6 Script type: shell set_demo_spheroid_plume \u00b6 Script type: shell load_plume_particles \u00b6 Script type: python Description Node to call the ROS service from the plume server to load the plume particles from an YAML file. Input ROS parameters filename ( type: string ): Input YAML file where the plume particles' coordinates and time of creation are stored ROS launch snippet <node name= \"load_plume_particles\" pkg= \"uuv_plume_simulator\" type= \"load_plume_particles\" output= \"screen\" > <rosparam> filename: / <path> /file.yaml </rosparam> </node> set_demo_current_vel \u00b6 Script type: shell set_turbulent_plume \u00b6 Script type: python Description Node to call the ROS service from the plume server to create a passive turbulent plume. !!! note \"See als [Description of the turbulent plume model](../user_guide/introduction.md) Input ROS parameters turbulent_diffusion_coefficients ( type: dict ): Dictionary with keys x , y and z ROS launch snippet Running from the launch file roslaunch uuv_plume_simulator start_turbulent_plume.launch","title":"uuv_plume_simulator"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_simulator/#description","text":"Plume simulator package","title":"Description"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_simulator/#launch-files","text":"","title":"Launch files"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_simulator/#start_demo_turbulent_plumelaunch","text":"Arguments use_gazebo ( default: false )","title":"start_demo_turbulent_plume.launch"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_simulator/#start_plume_examplelaunch","text":"Arguments use_gazebo ( default: false )","title":"start_plume_example.launch"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_simulator/#start_current_velocity_serverlaunch","text":"Arguments current_velocity_topic ( default: current_velocity ) update_rate ( default: 10 )","title":"start_current_velocity_server.launch"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_simulator/#start_turbulent_plumelaunch","text":"Arguments diffusion_coef_x ( default: 0.4 ) diffusion_coef_y ( default: 0.4 ) diffusion_coef_z ( default: 0.1 ) source_x ( default: -180.0 ) source_y ( default: 0.0 ) source_z ( default: -30.0 ) buoyancy_flux ( default: 0.1 ) stability_param ( default: 0.001 ) n_points ( default: 150000 ) x_min ( default: -200 ) x_max ( default: 200.0 ) y_min ( default: -75 ) y_max ( default: 75 ) z_min ( default: -60 ) z_max ( default: 0.0 ) max_particules_per_iter ( default: 80 ) max_life_time ( default: -1 )","title":"start_turbulent_plume.launch"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_simulator/#start_plume_serverlaunch","text":"Arguments current_velocity_topic ( default: /hydrodynamics/current_velocity ) update_rate ( default: 5.0 )","title":"start_plume_server.launch"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_simulator/#scripts","text":"","title":"Scripts"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_simulator/#set_demo_turbulent_plume","text":"Script type: shell","title":"set_demo_turbulent_plume"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_simulator/#plume_server","text":"Script type: python Description Passive turbulent plume server node. See also Description of the turbulent plume model Input ROS parameters update_rate ( default: 5 , type: int or float ): Update rate for the plume particle point cloud update Launch file snippet <group ns= \"plume\" > <node name= \"plume_simulation_server\" pkg= \"uuv_plume_simulator\" type= \"plume_server\" output= \"screen\" > <remap from= \"current_vel\" to= \"/hydrodynamics/current_velocity\" /> <rosparam subst_value= \"true\" > update_rate: 5 </rosparam> </node> </group> ROS services create_spheroid_plume Service description file uuv_plume_msgs/CreateSpheroidPlume Service call rosservice call /<plume_namespace>/create_spheroid_plume \"source: {x: 0.0, y: 0.0, z: 0.0} orientation: {x: 0.0, y: 0.0, z: 0.0, w: 0.0} n_points: 0 a: 0.0 c: 0.0 x_min: 0.0 x_max: 0.0 y_min: 0.0 y_max: 0.0 z_min: 0.0 z_max: 0.0\" Create a static plume in the shape of a spheroid. source : Plume source position wrt ENU frame orientation : Spheroid orientation in quaternion n_points : Number of plume particles a and c : Spheroid's semi-axis length x_min , x_max , y_min , y_max , z_min , z_max : Limits of the bounding box where the plume particles are allowed to exist create_passive_scalar_turbulent_plume Service description file uuv_plume_msgs/CreatePassiveScalarTurbulentPlume Service call rosservice call /<plume_namespace>/create_passive_scalar_turbulent_plume \"turbulent_diffusion_coefficients: {x: 0.0, y: 0.0, z: 0.0} source: {x: 0.0, y: 0.0, z: 0.0} buoyancy_flux: 0.0 stability_param: 0.0 n_points: 0 max_particles_per_iter: 0 x_min: 0.0 x_max: 0.0 y_min: 0.0 y_max: 0.0 z_min: 0.0 z_max: 0.0 max_life_time: 0.0\" Create a passive turbulent plume. turbulent_diffusion_coefficients : Coefficients ruling the diffusion of the particles for each degree of freedom of the particle. source : Position of the plume source wrt ENU frame buoyancy_flux and stability_param : Parameters controlling the plume rise n_points : Maximum number of plume particles to be generated max_particles_per_iter : Maximum number of particles generated at the source position at each iteration x_min , x_max , y_min , y_max , z_min , z_max : Limits of the bounding box where the plume particles are allowed to exist max_life_time : Maximum life time of each particle in seconds set_plume_limits Service description file uuv_plume_msgs/SetPlumeLimits Service call rosservice call /<plume_namespace>/set_plume_limits \"{x_min: 0.0, x_max: 0.0, y_min: 0.0, y_max: 0.0, z_min: 0.0, z_max: 0.0}\" Sets the bounds of the box where the plume particles are allowed to exist. x_min , x_max , y_min , y_max , z_min , z_max : Limits of the bounding box where the plume particles are allowed to exist set_plume_config Service description file uuv_plume_msgs/SetPlumeConfiguration Service call rosservice call /<plume_namespace>/set_plume_config \"n_points: 0 max_particles_per_iter: 0\" Configure the plume's particle generation parameters. n_points : Maximum number of plume particles to be generated max_particles_per_iter : Maximum number of particles generated at the source position at each iteration get_plume_config Service description file uuv_plume_msgs/GetPlumeConfiguration Service call rosservice call /<plume_namespace>/get_plume_config Return the plume's generation configuration parameters, including maximum number of particles, maximum number of particles per iteration, source position and limits of the bounding box. delete_plume Service description file uuv_plume_msgs/DeletePlume Service call rosservice call /<plume_namespace>/delete_plume Delete the source and the particles. set_plume_source_position Service description file uuv_plume_msgs/SetPlumeSourcePosition Service call rosservice call /<plume_namespace>/set_plume_source_position \"source: x: 0.0 y: 0.0 z: 0.0\" Set plume source position wrt ENU frame source : New plume source position wrt ENU frame get_plume_source_position Service description file uuv_plume_msgs/GetPlumeSourcePosition Service call rosservice call /<plume_namespace>/get_plume_source_position Return the plume source position coordinates. get_num_particles Service description file uuv_plume_msgs/GetNumParticles Service call rosservice call /<plume_namespace>/get_num_particles Return current number of plume particles. store_plume_state Service description file uuv_plume_msgs/StorePlumeState Service call rosservice call /<plume_namespace>/store_plume_state \"output_dir: '' filename: ''\" Store the position and time of creation for of each particle in a file as an YAML file. output_dir : Path to output directory filename : Output YAML file load_plume_particles Service description file uuv_plume_msgs/LoadPlumeParticles Service call rosservice call /<plume_namespace>/load_plume_particles \"plume_file: ''\" Load an YAML file with the plume particles' list positions and time of creation. plume_file : Plume YAML file","title":"plume_server"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_simulator/#current_velocity_server","text":"Script type: python Description Current velocity server node. In case no Gazebo simulation is providing the current velocity topic to steer the plume, this node generates a 2D current velocity topic. Both the current's velocity magnitude and horizontal angle are modeled using a Gaussian-Markov process of first order, as shown in Fossen's lecture notes . The velocity magnitude is described by \\dot{v_c}(t) + \\mu_c v_c(t) = w_c \\dot{v_c}(t) + \\mu_c v_c(t) = w_c and the horizontal angle \\phi \\phi is modeled similarly as \\dot{\\phi}(t) + \\mu_a \\phi(t) = w_a \\dot{\\phi}(t) + \\mu_a \\phi(t) = w_a where \\mu \\mu is the inverse of the time constant of the process and w w is a random variable described by a normal distribution. The final current velocity vector is then written as v(t) = ( v_c \\cos \\phi, v_c \\sin \\phi, 0 ) v(t) = ( v_c \\cos \\phi, v_c \\sin \\phi, 0 ) and published as a geometry_msgs/TwistStamped message. Input ROS parameters current_velocity_topic ( default: current_velocity , type: string ): Name of the output current velocity topic update_rate ( default: 10 , type: int or float ): Update rate of the output current velocity topic Launch file snippet <node name= \"current_velocity_server\" pkg= \"uuv_plume_simulator\" type= \"current_velocity_server\" output= \"screen\" > <rosparam subst_value= \"true\" > current_velocity_topic: /current_velocity update_rate: 10 </rosparam> </node> Running from the launch file roslaunch uuv_plume_simulator start_current_velocity_server.launch current_velocity_topic: = current_velocity update_rate: = 10 Warning Do NOT run the current velocity server with a Gazebo simulation that generates the same topic, it can cause unexpected behaviours to the plume's steering. ROS services get_current_velocity_model Service description file uuv_plume_msgs/GetCurrentModel Service call rosservice call /<namespace>/get_current_velocity_model Return the parameters for the Gauss-Markov process describing the current velocity magnitude v_c v_c . get_angle_model Service description file uuv_plume_msgs/GetCurrentModel Service call rosservice call /<namespace>/get_angle_model Return the parameters for the Gauss-Markov process describing the current's horizontal angle \\phi \\phi . set_current_velocity_model Service description file uuv_plume_msgs/SetCurrentModel Service call rosservice call /<namespace>/set_current_velocity_model \"{mean: 0.0, min: 0.0, max: 0.0, noise: 0.0, mu: 0.0}\" Set the parameters for the Gauss-Markov process describing the current velocity magnitude v_c v_c . mean : Mean value in m/s min and max : Bounds of the output velocity magnitude in m/s noise : Amplitude of the random noise value in m/s mu : Inverse of the process' time constant set_angle_model Service description file uuv_plume_msgs/SetCurrentModel Service call rosservice call /<namespace>/set_angle_model \"{mean: 0.0, min: 0.0, max: 0.0, noise: 0.0, mu: 0.0}\" Set the parameters for the Gauss-Markov process describing the current's horizontal angle \\phi \\phi . mean : Mean value in radians min and max : Bounds of the output angle in radians noise : Amplitude of the random noise value in radians mu : Inverse of the process' time constant set_current_velocity Service description file uuv_plume_msgs/SetCurrentVelocity Service call rosservice call /<namespace>/set_current_velocity \"velocity: 0.0 horizontal_angle: 0.0\" Set a default model for current velocity magnitude v_c v_c and horizontal angle \\phi \\phi . velocity : Mean current velocity magnitude in m/s `horizontal_angle: Mean horizonal angle in degrees","title":"current_velocity_server"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_simulator/#set_demo_current_vel_gazebo","text":"Script type: shell","title":"set_demo_current_vel_gazebo"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_simulator/#set_demo_spheroid_plume","text":"Script type: shell","title":"set_demo_spheroid_plume"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_simulator/#load_plume_particles","text":"Script type: python Description Node to call the ROS service from the plume server to load the plume particles from an YAML file. Input ROS parameters filename ( type: string ): Input YAML file where the plume particles' coordinates and time of creation are stored ROS launch snippet <node name= \"load_plume_particles\" pkg= \"uuv_plume_simulator\" type= \"load_plume_particles\" output= \"screen\" > <rosparam> filename: / <path> /file.yaml </rosparam> </node>","title":"load_plume_particles"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_simulator/#set_demo_current_vel","text":"Script type: shell","title":"set_demo_current_vel"},{"location":"packages/uuv_plume_simulator/docs/packages/uuv_plume_simulator/#set_turbulent_plume","text":"Script type: python Description Node to call the ROS service from the plume server to create a passive turbulent plume. !!! note \"See als [Description of the turbulent plume model](../user_guide/introduction.md) Input ROS parameters turbulent_diffusion_coefficients ( type: dict ): Dictionary with keys x , y and z ROS launch snippet Running from the launch file roslaunch uuv_plume_simulator start_turbulent_plume.launch","title":"set_turbulent_plume"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_gm_process/","text":"uuv_gm_process \u00b6 uuv_gm_process.gauss_markov_process \u00b6 GaussMarkovProcess \u00b6 GaussMarkovProcess ( self ) Gauss-Markov process of first order","title":"uuv_gm_process"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_gm_process/#uuv_gm_process","text":"","title":"uuv_gm_process"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_gm_process/#uuv_gm_processgauss_markov_process","text":"","title":"uuv_gm_process.gauss_markov_process"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_gm_process/#gaussmarkovprocess","text":"GaussMarkovProcess ( self ) Gauss-Markov process of first order","title":"GaussMarkovProcess"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/","text":"uuv_plume_model \u00b6 uuv_plume_model.plume \u00b6 Plume \u00b6 Plume ( self , source_pos , n_points , start_time ) Base class for plume model classes. Plume models should inherit this class and implement the update function to maintain a standard interface with the plume server. Each new inherited plume model must have an unique LABEL tag, since it will be used by the factory method to create plume models without the need to import all the plume model class files. LABEL \u00b6 str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object. n_points \u00b6 Return the maximum number of points to be created by the plume model. num_particles \u00b6 Return the current number of particles. points \u00b6 Return list of [N x 3] position vectors for particles created. source_pos \u00b6 Return the position vector with the Cartesian coordinates for the plume source time_of_creation \u00b6 Return the time of creation vector. x \u00b6 Return only the X coordinates for the particle positions. x_lim \u00b6 Return the lower and upper limit for the bounding box on the X axis. y \u00b6 Return only the Y coordinates for the particle positions. y_lim \u00b6 Return the lower and upper limit for the bounding box on the Y axis. z \u00b6 Return only the Z coordinates for the particle positions. z_lim \u00b6 Return the lower and upper limit for the bounding box on the Z axis. create_plume_model \u00b6 Plume . create_plume_model ( tag , * args ) Factory function to create the plume model using the LABEL attribute as identifier. Parameters tag ( type: str ): label of the plume model to be created args : list of input arguments for the specific plume model to be created set_n_points \u00b6 Plume . set_n_points ( self , n_points ) Set the maximum number of points to be created by the plume model. Parameters n_points (*type: int ): number maximum of particles (must be greater than zero). update_current_vel \u00b6 Plume . update_current_vel ( self , vel ) Update the current velocity vector. Parameters vel ( type: list or numpy.array ): current velocity vector containing three elements (u, v, w) (u, v, w) . set_x_lim \u00b6 Plume . set_x_lim ( self , min_value , max_value ) Set the X limits for the plume bounding box. The bounding box is defined with respect to the ENU inertial frame. Parameters min_value ( type: float ): lower limit for the bounding box over the X axis. max_value ( type: float ): upper limit for the bounding box over the X axis. Returns True if limits are valid. set_y_lim \u00b6 Plume . set_y_lim ( self , min_value , max_value ) Set the Y limits for the plume bounding box. The bounding box is defined with respect to the ENU inertial frame. Parameters min_value ( type: float ): lower limit for the bounding box over the Y axis. max_value ( type: float ): upper limit for the bounding box over the Y axis. Returns True if limits are valid. set_z_lim \u00b6 Plume . set_z_lim ( self , min_value , max_value ) Set the Z limits for the plume bounding box. The bounding box is defined with respect to the ENU inertial frame. Parameters min_value ( type: float ): lower limit for the bounding box over the Z axis. max_value ( type: float ): upper limit for the bounding box over the Z axis. Returns True if limits are valid. reset_plume \u00b6 Plume . reset_plume ( self ) Reset point cloud and time of creating vectors. get_contraints_filter \u00b6 Plume . get_contraints_filter ( self ) Return a binary vector of N N elements, N N being current number of particles created. The i i -th element is set to False if the i i -th particle finds itself outside of the bounding box limits. Returns Logical vector with elements set to True if they fulfill the constraints. apply_constraints \u00b6 Plume . apply_constraints ( self ) Truncate the position of the particle to the closest bounding box limit if the particle is positioned outside of the limits. set_plume_particles \u00b6 Plume . set_plume_particles ( self , t , x , y , z , time_creation ) Set the plume particles with the input coordinates wrt ENU frame and time of creation vector in seconds. Parameters t ( type: float ): Current time stamp in seconds x ( type: list ): List of X coordinates for the plume particles' positions y ( type: list ): List of Y coordinates for the plume particles' positions z ( type: list ): List of Z coordinates for the plume particles' positions time_creation ( type: list ): List of the relative time of creation for each particle in seconds get_point_cloud_as_msg \u00b6 Plume . get_point_cloud_as_msg ( self ) Return a ROS point cloud sensor message with the points representing the plume's particles and one channel containing the time of creation for each particle. Returns The plume particles as a sensor_msgs/PointCloud message or None if no particles are found. get_markers \u00b6 Plume . get_markers ( self ) Return a ROS marker array message structure with an sphere marker to represent the plume source, the bounding box and an arrow marker to show the direction of the current velocity if it's norm is greater than zero. Returns visualizaton_msgs/MarkerArray message with markers for the current velocity arrow and source position or None if no plume particles are found. update \u00b6 Plume . update ( self , t = 0.0 ) Plume dynamics update function. It must be implemented by the child class and will be used by the plume server to update the position of the plume particles at each iteration. uuv_plume_model.passive_scalar_turbulence \u00b6 PlumePassiveScalarTurbulence \u00b6 PlumePassiveScalarTurbulence ( self , turbulent_diffusion_coefficients , buoyancy_flux , stability_param , source_pos , n_points , start_time , max_particles_per_iter = 10 , max_life_time =- 1 ) Plume model implementation based on [1]. The chemical plume is described here by discretized particles generated that are generated on the Cartesian position given as the source of the plume. The plume is treated as a passive scalar turbulence, meaning that it will not affect the environmental fluid flow. To model the dynamics of the plume particles, the Lagrangian particle random walk approach [2] is used. The particles are generated from the source position in batches at each iteration to ensure a steady flow and each particle has its position (x_k, y_k, z_k) (x_k, y_k, z_k) at the instant t_k t_k computed as x_k = x_{k - 1} + (u_a + u_i) \\Delta t x_k = x_{k - 1} + (u_a + u_i) \\Delta t y_k = y_{k - 1} + (v_a + v_i) \\Delta t y_k = y_{k - 1} + (v_a + v_i) \\Delta t z_k = z_{k - 1} + (w_a + w_b + w_i) \\Delta t z_k = z_{k - 1} + (w_a + w_b + w_i) \\Delta t where (u_a, v_a, w_a) (u_a, v_a, w_a) are the particle's velocities due to the current velocity, (u_t, v_t, w_t) (u_t, v_t, w_t) are the particle's velocities due to turbulent diffusion, and w_b w_b is the vertical buoyant velocity. [1] Tian and Zhang, 2010 Yu Tian and Aiqun Zhang, \"Simulation environment and guidance system for AUV tracing chemical plume in 3-dimensions,\" 2010 2 nd International Asia Conference on Informatics in Control, Automation and Robotics (CAR 2010), Mar. 2010. [2] Mestres et al., 2003 M. Mestres et al., \"Modelling of the Ebro River plume. Validation with field observations,\" Scientia Marina, vol. 67, no. 4, pp. 379-391, Dec. 2003. LABEL \u00b6 str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object. max_particles_per_iter \u00b6 Return the maximum number of particles to be generated per iteration from the source of the plume. set_max_particles_per_iter \u00b6 PlumePassiveScalarTurbulence . set_max_particles_per_iter ( self , n_particles ) Set the maximum number of particles to be generated per iteration from the source of the plume. Parameters n_particles ( type: int ): number of particles Returns True if the new maximum number of particles could be set. False if the input is equal or smaller than zero. create_particles \u00b6 PlumePassiveScalarTurbulence . create_particles ( self , t ) Create random number of particles for one iteration up to the given maximum limit and remove all particles that have left the plume's bounding box limits. Parameters t ( type: float ): time stamp in seconds set_plume_particles \u00b6 PlumePassiveScalarTurbulence . set_plume_particles ( self , t , x , y , z , time_creation ) Load the plume particles' position vectors and time of creation. Parameters t ( type: float ): Current time stamp in seconds x ( type: list ): List of X coordinates y ( type: list ): List of Y coordinates z ( type: list ): List of Z coordinates time_creation ( type: list ): List of time stamps of creation of each particle compute_plume_rise \u00b6 PlumePassiveScalarTurbulence . compute_plume_rise ( self , t ) The plume rise equation is used to compute the vertical buoyant velocity. It is based on the experimental results presented in [1] and can be written as H(u, s, t) = 2.6 ( F t^2 / u )^{1/3} (t^2 s + 4.3)^{-1/3} H(u, s, t) = 2.6 ( F t^2 / u )^{1/3} (t^2 s + 4.3)^{-1/3} where F F is the buoyancy flux parameter and s s the stability parameters, and both can be tuned by the user. u u is the magnitude of the current velocity on the horizontal plane. The resulting vertical buoyant velocity will be computed as follows w_b = H(u, s, t + \\Delta t) - H(u, s, t) / \\Delta t w_b = H(u, s, t + \\Delta t) - H(u, s, t) / \\Delta t [1] Domenico, 1985 Anfossi, Domenico. \"Analysis of plume rise data from five TVA steam plants.\" Journal of climate and applied meteorology 24.11 (1985): 1225-1236. Parameters t ( type: float ): current time stamp in seconds Returns Plume rise velocity components vector. update \u00b6 PlumePassiveScalarTurbulence . update ( self , t = 0.0 ) Update the position of all particles and create/remove particles from the plume according to the bounding box limit constraints and the maximum number of particles allowed. Parameters t ( type: float ): current time stamp in seconds Returns True if update was succesful, False if computed time step is invalid. uuv_plume_model.spheroid \u00b6 PlumeSpheroid \u00b6 PlumeSpheroid ( self , a , c , orientation , source_pos , n_points , start_time ) Plume model to generate a static plume with spheroid form. LABEL \u00b6 str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object. update \u00b6 PlumeSpheroid . update ( self , t = 0.0 ) Update the position of all particles and create/remove particles from the plume according to the bounding box limit constraints and the maximum number of particles allowed. Parameters t (*type: float ): current time stamp in seconds Returns True if update was succesful, False if computed time step is invalid.","title":"uuv_plume_model"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#uuv_plume_model","text":"","title":"uuv_plume_model"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#uuv_plume_modelplume","text":"","title":"uuv_plume_model.plume"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#plume","text":"Plume ( self , source_pos , n_points , start_time ) Base class for plume model classes. Plume models should inherit this class and implement the update function to maintain a standard interface with the plume server. Each new inherited plume model must have an unique LABEL tag, since it will be used by the factory method to create plume models without the need to import all the plume model class files.","title":"Plume"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#label","text":"str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object.","title":"LABEL"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#n_points","text":"Return the maximum number of points to be created by the plume model.","title":"n_points"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#num_particles","text":"Return the current number of particles.","title":"num_particles"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#points","text":"Return list of [N x 3] position vectors for particles created.","title":"points"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#source_pos","text":"Return the position vector with the Cartesian coordinates for the plume source","title":"source_pos"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#time_of_creation","text":"Return the time of creation vector.","title":"time_of_creation"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#x","text":"Return only the X coordinates for the particle positions.","title":"x"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#x_lim","text":"Return the lower and upper limit for the bounding box on the X axis.","title":"x_lim"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#y","text":"Return only the Y coordinates for the particle positions.","title":"y"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#y_lim","text":"Return the lower and upper limit for the bounding box on the Y axis.","title":"y_lim"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#z","text":"Return only the Z coordinates for the particle positions.","title":"z"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#z_lim","text":"Return the lower and upper limit for the bounding box on the Z axis.","title":"z_lim"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#create_plume_model","text":"Plume . create_plume_model ( tag , * args ) Factory function to create the plume model using the LABEL attribute as identifier. Parameters tag ( type: str ): label of the plume model to be created args : list of input arguments for the specific plume model to be created","title":"create_plume_model"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#set_n_points","text":"Plume . set_n_points ( self , n_points ) Set the maximum number of points to be created by the plume model. Parameters n_points (*type: int ): number maximum of particles (must be greater than zero).","title":"set_n_points"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#update_current_vel","text":"Plume . update_current_vel ( self , vel ) Update the current velocity vector. Parameters vel ( type: list or numpy.array ): current velocity vector containing three elements (u, v, w) (u, v, w) .","title":"update_current_vel"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#set_x_lim","text":"Plume . set_x_lim ( self , min_value , max_value ) Set the X limits for the plume bounding box. The bounding box is defined with respect to the ENU inertial frame. Parameters min_value ( type: float ): lower limit for the bounding box over the X axis. max_value ( type: float ): upper limit for the bounding box over the X axis. Returns True if limits are valid.","title":"set_x_lim"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#set_y_lim","text":"Plume . set_y_lim ( self , min_value , max_value ) Set the Y limits for the plume bounding box. The bounding box is defined with respect to the ENU inertial frame. Parameters min_value ( type: float ): lower limit for the bounding box over the Y axis. max_value ( type: float ): upper limit for the bounding box over the Y axis. Returns True if limits are valid.","title":"set_y_lim"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#set_z_lim","text":"Plume . set_z_lim ( self , min_value , max_value ) Set the Z limits for the plume bounding box. The bounding box is defined with respect to the ENU inertial frame. Parameters min_value ( type: float ): lower limit for the bounding box over the Z axis. max_value ( type: float ): upper limit for the bounding box over the Z axis. Returns True if limits are valid.","title":"set_z_lim"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#reset_plume","text":"Plume . reset_plume ( self ) Reset point cloud and time of creating vectors.","title":"reset_plume"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#get_contraints_filter","text":"Plume . get_contraints_filter ( self ) Return a binary vector of N N elements, N N being current number of particles created. The i i -th element is set to False if the i i -th particle finds itself outside of the bounding box limits. Returns Logical vector with elements set to True if they fulfill the constraints.","title":"get_contraints_filter"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#apply_constraints","text":"Plume . apply_constraints ( self ) Truncate the position of the particle to the closest bounding box limit if the particle is positioned outside of the limits.","title":"apply_constraints"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#set_plume_particles","text":"Plume . set_plume_particles ( self , t , x , y , z , time_creation ) Set the plume particles with the input coordinates wrt ENU frame and time of creation vector in seconds. Parameters t ( type: float ): Current time stamp in seconds x ( type: list ): List of X coordinates for the plume particles' positions y ( type: list ): List of Y coordinates for the plume particles' positions z ( type: list ): List of Z coordinates for the plume particles' positions time_creation ( type: list ): List of the relative time of creation for each particle in seconds","title":"set_plume_particles"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#get_point_cloud_as_msg","text":"Plume . get_point_cloud_as_msg ( self ) Return a ROS point cloud sensor message with the points representing the plume's particles and one channel containing the time of creation for each particle. Returns The plume particles as a sensor_msgs/PointCloud message or None if no particles are found.","title":"get_point_cloud_as_msg"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#get_markers","text":"Plume . get_markers ( self ) Return a ROS marker array message structure with an sphere marker to represent the plume source, the bounding box and an arrow marker to show the direction of the current velocity if it's norm is greater than zero. Returns visualizaton_msgs/MarkerArray message with markers for the current velocity arrow and source position or None if no plume particles are found.","title":"get_markers"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#update","text":"Plume . update ( self , t = 0.0 ) Plume dynamics update function. It must be implemented by the child class and will be used by the plume server to update the position of the plume particles at each iteration.","title":"update"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#uuv_plume_modelpassive_scalar_turbulence","text":"","title":"uuv_plume_model.passive_scalar_turbulence"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#plumepassivescalarturbulence","text":"PlumePassiveScalarTurbulence ( self , turbulent_diffusion_coefficients , buoyancy_flux , stability_param , source_pos , n_points , start_time , max_particles_per_iter = 10 , max_life_time =- 1 ) Plume model implementation based on [1]. The chemical plume is described here by discretized particles generated that are generated on the Cartesian position given as the source of the plume. The plume is treated as a passive scalar turbulence, meaning that it will not affect the environmental fluid flow. To model the dynamics of the plume particles, the Lagrangian particle random walk approach [2] is used. The particles are generated from the source position in batches at each iteration to ensure a steady flow and each particle has its position (x_k, y_k, z_k) (x_k, y_k, z_k) at the instant t_k t_k computed as x_k = x_{k - 1} + (u_a + u_i) \\Delta t x_k = x_{k - 1} + (u_a + u_i) \\Delta t y_k = y_{k - 1} + (v_a + v_i) \\Delta t y_k = y_{k - 1} + (v_a + v_i) \\Delta t z_k = z_{k - 1} + (w_a + w_b + w_i) \\Delta t z_k = z_{k - 1} + (w_a + w_b + w_i) \\Delta t where (u_a, v_a, w_a) (u_a, v_a, w_a) are the particle's velocities due to the current velocity, (u_t, v_t, w_t) (u_t, v_t, w_t) are the particle's velocities due to turbulent diffusion, and w_b w_b is the vertical buoyant velocity. [1] Tian and Zhang, 2010 Yu Tian and Aiqun Zhang, \"Simulation environment and guidance system for AUV tracing chemical plume in 3-dimensions,\" 2010 2 nd International Asia Conference on Informatics in Control, Automation and Robotics (CAR 2010), Mar. 2010. [2] Mestres et al., 2003 M. Mestres et al., \"Modelling of the Ebro River plume. Validation with field observations,\" Scientia Marina, vol. 67, no. 4, pp. 379-391, Dec. 2003.","title":"PlumePassiveScalarTurbulence"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#label_1","text":"str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object.","title":"LABEL"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#max_particles_per_iter","text":"Return the maximum number of particles to be generated per iteration from the source of the plume.","title":"max_particles_per_iter"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#set_max_particles_per_iter","text":"PlumePassiveScalarTurbulence . set_max_particles_per_iter ( self , n_particles ) Set the maximum number of particles to be generated per iteration from the source of the plume. Parameters n_particles ( type: int ): number of particles Returns True if the new maximum number of particles could be set. False if the input is equal or smaller than zero.","title":"set_max_particles_per_iter"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#create_particles","text":"PlumePassiveScalarTurbulence . create_particles ( self , t ) Create random number of particles for one iteration up to the given maximum limit and remove all particles that have left the plume's bounding box limits. Parameters t ( type: float ): time stamp in seconds","title":"create_particles"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#set_plume_particles_1","text":"PlumePassiveScalarTurbulence . set_plume_particles ( self , t , x , y , z , time_creation ) Load the plume particles' position vectors and time of creation. Parameters t ( type: float ): Current time stamp in seconds x ( type: list ): List of X coordinates y ( type: list ): List of Y coordinates z ( type: list ): List of Z coordinates time_creation ( type: list ): List of time stamps of creation of each particle","title":"set_plume_particles"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#compute_plume_rise","text":"PlumePassiveScalarTurbulence . compute_plume_rise ( self , t ) The plume rise equation is used to compute the vertical buoyant velocity. It is based on the experimental results presented in [1] and can be written as H(u, s, t) = 2.6 ( F t^2 / u )^{1/3} (t^2 s + 4.3)^{-1/3} H(u, s, t) = 2.6 ( F t^2 / u )^{1/3} (t^2 s + 4.3)^{-1/3} where F F is the buoyancy flux parameter and s s the stability parameters, and both can be tuned by the user. u u is the magnitude of the current velocity on the horizontal plane. The resulting vertical buoyant velocity will be computed as follows w_b = H(u, s, t + \\Delta t) - H(u, s, t) / \\Delta t w_b = H(u, s, t + \\Delta t) - H(u, s, t) / \\Delta t [1] Domenico, 1985 Anfossi, Domenico. \"Analysis of plume rise data from five TVA steam plants.\" Journal of climate and applied meteorology 24.11 (1985): 1225-1236. Parameters t ( type: float ): current time stamp in seconds Returns Plume rise velocity components vector.","title":"compute_plume_rise"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#update_1","text":"PlumePassiveScalarTurbulence . update ( self , t = 0.0 ) Update the position of all particles and create/remove particles from the plume according to the bounding box limit constraints and the maximum number of particles allowed. Parameters t ( type: float ): current time stamp in seconds Returns True if update was succesful, False if computed time step is invalid.","title":"update"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#uuv_plume_modelspheroid","text":"","title":"uuv_plume_model.spheroid"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#plumespheroid","text":"PlumeSpheroid ( self , a , c , orientation , source_pos , n_points , start_time ) Plume model to generate a static plume with spheroid form.","title":"PlumeSpheroid"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#label_2","text":"str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object.","title":"LABEL"},{"location":"packages/uuv_plume_simulator/docs/python_api/uuv_plume_model/#update_2","text":"PlumeSpheroid . update ( self , t = 0.0 ) Update the position of all particles and create/remove particles from the plume according to the bounding box limit constraints and the maximum number of particles allowed. Parameters t (*type: float ): current time stamp in seconds Returns True if update was succesful, False if computed time step is invalid.","title":"update"},{"location":"packages/uuv_plume_simulator/docs/user_guide/how_to_start_a_turbulent_plume/","text":"To start the simulation of a passive turbulent plume, first you need to start the plume server node roslaunch uuv_plume_simulator start_plume_server.launch current_velocity_topic: = /hydrodynamics/current_velocity update_rate: = 5 The current velocity topic must be generated either from a Gazebo underwater scenario running the underwater current ROS plugin ( libuuv_underwater_current_ros_plugin.so ). It must publish the current velocity as a geometry_msgs/Twist message. The current velocity will steer the plume and control its rise. Without any current, the plume particles will accumulate around the plume source. Generation of the current velocity topic \u00b6 Start the plume simulaton with Gazebo for current velocity generation \u00b6 All Gazebo worlds included in the uuv_gazebo_worlds include the underwater current plugin and can be started as: roslaunch uuv_gazebo_worlds ocean_waves.launch A new world can be built at the same manner by including following snippet in the .world file <plugin name= \"underwater_current_plugin\" filename= \"libuuv_underwater_current_ros_plugin.so\" > <namespace> hydrodynamics </namespace> <constant_current> <topic> current_velocity </topic> <velocity> <mean> 0 </mean> <min> 0 </min> <max> 5 </max> <mu> 0.0 </mu> <noiseAmp> 0.0 </noiseAmp> </velocity> <horizontal_angle> <mean> 0 </mean> <min> -3.141592653589793238 </min> <max> 3.141592653589793238 </max> <mu> 0.0 </mu> <noiseAmp> 0.0 </noiseAmp> </horizontal_angle> <vertical_angle> <mean> 0 </mean> <min> -3.141592653589793238 </min> <max> 3.141592653589793238 </max> <mu> 0.0 </mu> <noiseAmp> 0.0 </noiseAmp> </vertical_angle> </constant_current> </plugin> The current velocity will be published in /hydrodynamics/current_velocity and the same topic must be read by the plume server. Start the current velocity server \u00b6 Warning Do not start the current velocity server node AND a Gazebo scenario. The topics will conflict with each other and be ovewritten. To run the plume simulation independently from Gazebo, a current velocity server can be started by running roslaunch uuv_plume_simulator start_current_velocity_server.launch current_velocity_topic: = /hydrodynamics/current_velocity Start the passive turbulent plume \u00b6 The can be started by using a plume server's service create_passive_scalar_turbulent_plume as follows: rosservice call /create_passive_scalar_turbulent_plume \"turbulent_diffusion_coefficients: {x: 0.05, y: 0.05, z: 0.05} source: {x: -0.0, y: 0.0, z: -40.0} buoyancy_flux: 0.05 stability_param: 0.001 n_points: 100000 max_particles_per_iter: 10 x_min: -200.0 x_max: 200.0 y_min: -75.0 y_max: 75.0 z_min: -50.0 z_max: 0.0 max_life_time: -1\" where turbulent_diffusion_coefficients are the coefficients used for the computation of the turbulent diffusion velocity components source is the position of the source of the plume in the ENU frame buoyancy_flux and stability_param are the parameters used for computation of the vertical buoyant velocity (see the previous tutorial for more details) n_points is the maximum number of particles allowed to exist at any time max_particles_per_iter is the maximum number of particles generated by the source at each iteration x_min , x_max , y_min , y_max , z_min , z_max are the limits of the bounding box where the particles are allowed to exist in max_life_time is the maximum amount of seconds each particle is allowed to exist before being destroyed (-1 for not limit, the particles will then only be destroyed when they reach the limits of the bounding box) Note The particles will be destroyed when reaching the bounding box's walls, except if the upper box limit is equal or above z=0 z=0 , in which case the position of the particle will be always the minimum between 0 and the current z z position wrt the ENU frame. Running the example \u00b6 The full tutorial to start a turbulent plume can be started with the following commands: roslaunch uuv_plume_simulator start_plume_example.launch rosrun uuv_plume_simulator set_demo_current_vel rosrun uuv_plume_simulator set_demo_turbulent_plume Services to configure and control the plume \u00b6 Plume server Current velocity server","title":"How to start a turbulent passive plume"},{"location":"packages/uuv_plume_simulator/docs/user_guide/how_to_start_a_turbulent_plume/#generation-of-the-current-velocity-topic","text":"","title":"Generation of the current velocity topic"},{"location":"packages/uuv_plume_simulator/docs/user_guide/how_to_start_a_turbulent_plume/#start-the-plume-simulaton-with-gazebo-for-current-velocity-generation","text":"All Gazebo worlds included in the uuv_gazebo_worlds include the underwater current plugin and can be started as: roslaunch uuv_gazebo_worlds ocean_waves.launch A new world can be built at the same manner by including following snippet in the .world file <plugin name= \"underwater_current_plugin\" filename= \"libuuv_underwater_current_ros_plugin.so\" > <namespace> hydrodynamics </namespace> <constant_current> <topic> current_velocity </topic> <velocity> <mean> 0 </mean> <min> 0 </min> <max> 5 </max> <mu> 0.0 </mu> <noiseAmp> 0.0 </noiseAmp> </velocity> <horizontal_angle> <mean> 0 </mean> <min> -3.141592653589793238 </min> <max> 3.141592653589793238 </max> <mu> 0.0 </mu> <noiseAmp> 0.0 </noiseAmp> </horizontal_angle> <vertical_angle> <mean> 0 </mean> <min> -3.141592653589793238 </min> <max> 3.141592653589793238 </max> <mu> 0.0 </mu> <noiseAmp> 0.0 </noiseAmp> </vertical_angle> </constant_current> </plugin> The current velocity will be published in /hydrodynamics/current_velocity and the same topic must be read by the plume server.","title":"Start the plume simulaton with Gazebo for current velocity generation"},{"location":"packages/uuv_plume_simulator/docs/user_guide/how_to_start_a_turbulent_plume/#start-the-current-velocity-server","text":"Warning Do not start the current velocity server node AND a Gazebo scenario. The topics will conflict with each other and be ovewritten. To run the plume simulation independently from Gazebo, a current velocity server can be started by running roslaunch uuv_plume_simulator start_current_velocity_server.launch current_velocity_topic: = /hydrodynamics/current_velocity","title":"Start the current velocity server"},{"location":"packages/uuv_plume_simulator/docs/user_guide/how_to_start_a_turbulent_plume/#start-the-passive-turbulent-plume","text":"The can be started by using a plume server's service create_passive_scalar_turbulent_plume as follows: rosservice call /create_passive_scalar_turbulent_plume \"turbulent_diffusion_coefficients: {x: 0.05, y: 0.05, z: 0.05} source: {x: -0.0, y: 0.0, z: -40.0} buoyancy_flux: 0.05 stability_param: 0.001 n_points: 100000 max_particles_per_iter: 10 x_min: -200.0 x_max: 200.0 y_min: -75.0 y_max: 75.0 z_min: -50.0 z_max: 0.0 max_life_time: -1\" where turbulent_diffusion_coefficients are the coefficients used for the computation of the turbulent diffusion velocity components source is the position of the source of the plume in the ENU frame buoyancy_flux and stability_param are the parameters used for computation of the vertical buoyant velocity (see the previous tutorial for more details) n_points is the maximum number of particles allowed to exist at any time max_particles_per_iter is the maximum number of particles generated by the source at each iteration x_min , x_max , y_min , y_max , z_min , z_max are the limits of the bounding box where the particles are allowed to exist in max_life_time is the maximum amount of seconds each particle is allowed to exist before being destroyed (-1 for not limit, the particles will then only be destroyed when they reach the limits of the bounding box) Note The particles will be destroyed when reaching the bounding box's walls, except if the upper box limit is equal or above z=0 z=0 , in which case the position of the particle will be always the minimum between 0 and the current z z position wrt the ENU frame.","title":"Start the passive turbulent plume"},{"location":"packages/uuv_plume_simulator/docs/user_guide/how_to_start_a_turbulent_plume/#running-the-example","text":"The full tutorial to start a turbulent plume can be started with the following commands: roslaunch uuv_plume_simulator start_plume_example.launch rosrun uuv_plume_simulator set_demo_current_vel rosrun uuv_plume_simulator set_demo_turbulent_plume","title":"Running the example"},{"location":"packages/uuv_plume_simulator/docs/user_guide/how_to_start_a_turbulent_plume/#services-to-configure-and-control-the-plume","text":"Plume server Current velocity server","title":"Services to configure and control the plume"},{"location":"packages/uuv_plume_simulator/docs/user_guide/introduction/","text":"This package is the implementation of the algorithm presented in Tian and Zhang, 2010 for the generation of passive turbulent underwater plumes. The plume is represented by a set of particles and to model the dynamics of the plume particles, the Lagrangian particle random walk approach from Mestres et al., 2003 is used. The particles are generated from a pre-defined source position in space in batches at each iteration to ensure a steady flow. Per default, 10 particles are generated at each iteration until the maximum number of particles is reached. Each i i -th particle has its position (x_{i_k}, y_{i_k}, z_{i_k}) (x_{i_k}, y_{i_k}, z_{i_k}) described at the instant t_k t_k as: x_k = x_{k - 1} + (u_a + u_t) \\Delta t \\\\ y_k = y_{k - 1} + (v_a + v_t) \\Delta t \\\\ z_k = z_{k - 1} + (w_a + w_b + w_t) \\Delta t x_k = x_{k - 1} + (u_a + u_t) \\Delta t \\\\ y_k = y_{k - 1} + (v_a + v_t) \\Delta t \\\\ z_k = z_{k - 1} + (w_a + w_b + w_t) \\Delta t where (u_a, v_a, w_a) (u_a, v_a, w_a) are the particle's velocities due to the current velocity, (u_t, v_t, w_t) (u_t, v_t, w_t) are the particle's velocities due to turbulent diffusion, and w_b w_b is the vertical buoyant velocity that simulates the rise of the plume. The plume is also limited to a box provided by the user. Once the particles reach the limits of the box, they are destroyed and it allows the same number of particles to be created in the source again. Turbulent diffusion velocity \u00b6 The turbulent diffusion velocity (u_t, v_t, w_t) (u_t, v_t, w_t) is ruled by the turbulent diffusion coefficients (d_u, d_v, d_w) (d_u, d_v, d_w) given by the user and is computed as follows u_t = 2 (0.5 - \\text{rand}()) \\sqrt{6 \\frac{d_u}{\\Delta t}} \\\\ v_t = 2 (0.5 - \\text{rand}()) \\sqrt{6 \\frac{d_v}{\\Delta t}} \\\\ w_t = 2 (0.5 - \\text{rand}()) \\sqrt{6 \\frac{d_w}{\\Delta t}} u_t = 2 (0.5 - \\text{rand}()) \\sqrt{6 \\frac{d_u}{\\Delta t}} \\\\ v_t = 2 (0.5 - \\text{rand}()) \\sqrt{6 \\frac{d_v}{\\Delta t}} \\\\ w_t = 2 (0.5 - \\text{rand}()) \\sqrt{6 \\frac{d_w}{\\Delta t}} \\text{rand()} \\text{rand()} being a random number from an uniform distribution generated in the interval [0, 1] [0, 1] and \\Delta t \\Delta t being the simulation time step. Plume rise \u00b6 The plume rise equation is used to compute the vertical buoyant velocity w_b w_b . It is based on the experimental results presented in Domenico, 1985 and can be written as H(u, s, t) = 2.6 \\left ( \\frac{F t^2}{u} \\right )^{1/3} (t^2 s + 4.3)^{-1/3} H(u, s, t) = 2.6 \\left ( \\frac{F t^2}{u} \\right )^{1/3} (t^2 s + 4.3)^{-1/3} where F F is the buoyancy flux parameter and s s the stability parameters, and both can be tuned by the user, and u u is the magnitude of the current velocity on the horizontal plane. The resulting vertical buoyant velocity will be computed as follows w_b = \\frac{H(u, s, t + \\Delta t) - H(u, s, t)}{\\Delta t} w_b = \\frac{H(u, s, t + \\Delta t) - H(u, s, t)}{\\Delta t} Bibliography \u00b6 Tian and Zhang, 2010 Yu Tian and Aiqun Zhang, \"Simulation environment and guidance system for AUV tracing chemical plume in 3-dimensions,\" 2010 2 nd International Asia Conference on Informatics in Control, Automation and Robotics (CAR 2010), Mar. 2010. Mestres et al., 2003 M. Mestres et al., \"Modelling of the Ebro River plume. Validation with field observations,\" Scientia Marina, vol. 67, no. 4, pp. 379-391, Dec. 2003. Domenico, 1985 Anfossi, Domenico. \"Analysis of plume rise data from five TVA steam plants.\" Journal of climate and applied meteorology 24.11 (1985): 1225-1236.","title":"Introduction"},{"location":"packages/uuv_plume_simulator/docs/user_guide/introduction/#turbulent-diffusion-velocity","text":"The turbulent diffusion velocity (u_t, v_t, w_t) (u_t, v_t, w_t) is ruled by the turbulent diffusion coefficients (d_u, d_v, d_w) (d_u, d_v, d_w) given by the user and is computed as follows u_t = 2 (0.5 - \\text{rand}()) \\sqrt{6 \\frac{d_u}{\\Delta t}} \\\\ v_t = 2 (0.5 - \\text{rand}()) \\sqrt{6 \\frac{d_v}{\\Delta t}} \\\\ w_t = 2 (0.5 - \\text{rand}()) \\sqrt{6 \\frac{d_w}{\\Delta t}} u_t = 2 (0.5 - \\text{rand}()) \\sqrt{6 \\frac{d_u}{\\Delta t}} \\\\ v_t = 2 (0.5 - \\text{rand}()) \\sqrt{6 \\frac{d_v}{\\Delta t}} \\\\ w_t = 2 (0.5 - \\text{rand}()) \\sqrt{6 \\frac{d_w}{\\Delta t}} \\text{rand()} \\text{rand()} being a random number from an uniform distribution generated in the interval [0, 1] [0, 1] and \\Delta t \\Delta t being the simulation time step.","title":"Turbulent diffusion velocity"},{"location":"packages/uuv_plume_simulator/docs/user_guide/introduction/#plume-rise","text":"The plume rise equation is used to compute the vertical buoyant velocity w_b w_b . It is based on the experimental results presented in Domenico, 1985 and can be written as H(u, s, t) = 2.6 \\left ( \\frac{F t^2}{u} \\right )^{1/3} (t^2 s + 4.3)^{-1/3} H(u, s, t) = 2.6 \\left ( \\frac{F t^2}{u} \\right )^{1/3} (t^2 s + 4.3)^{-1/3} where F F is the buoyancy flux parameter and s s the stability parameters, and both can be tuned by the user, and u u is the magnitude of the current velocity on the horizontal plane. The resulting vertical buoyant velocity will be computed as follows w_b = \\frac{H(u, s, t + \\Delta t) - H(u, s, t)}{\\Delta t} w_b = \\frac{H(u, s, t + \\Delta t) - H(u, s, t)}{\\Delta t}","title":"Plume rise"},{"location":"packages/uuv_plume_simulator/docs/user_guide/introduction/#bibliography","text":"Tian and Zhang, 2010 Yu Tian and Aiqun Zhang, \"Simulation environment and guidance system for AUV tracing chemical plume in 3-dimensions,\" 2010 2 nd International Asia Conference on Informatics in Control, Automation and Robotics (CAR 2010), Mar. 2010. Mestres et al., 2003 M. Mestres et al., \"Modelling of the Ebro River plume. Validation with field observations,\" Scientia Marina, vol. 67, no. 4, pp. 379-391, Dec. 2003. Domenico, 1985 Anfossi, Domenico. \"Analysis of plume rise data from five TVA steam plants.\" Journal of climate and applied meteorology 24.11 (1985): 1225-1236.","title":"Bibliography"},{"location":"packages/uuv_simulator/intro/","text":"Link to the uuv_simulator repository here Link to the documentation page Chat on Discord The Unmanned Underwater Vehicle Simulator is a set of packages that include plugins and ROS applications that allow simulation of underwater vehicles in Gazebo . If you are using this simulator for your publication, please cite: @inproceedings{Manhaes_2016, doi = {10.1109/oceans.2016.7761080}, url = {https://doi.org/10.1109%2Foceans.2016.7761080}, year = 2016, month = {sep}, publisher = {{ IEEE }} , author = {Musa Morena Marcusso Manh{\\~{a}}es and Sebastian A. Scherer and Martin Voss and Luiz Ricardo Douat and Thomas Rauschenbach}, title = {{ UUV } Simulator : A Gazebo-based package for underwater intervention and multi-robot simulation }, booktitle = {{ OCEANS } 2016 { MTS }/{ IEEE } Monterey } } In you are willing to contribute to this package, please check the instructions in CONTRIBUTING . Features \u00b6 Gazebo/ROS plugins Implementation of Fossen's equations of motion for underwater vehicles Thruster modules with implementations for thruster's angular velocity to output thrust force based on Yoerger el al., 1990 and Bessa et al., 2006 Lift and drag plugin for simulation of fins Simulation of 3D current velocity models (constant or based on first-order Gauss-Markov processes) Sensor plugins Controllers For AUVs casadi -based effort allocation algorithm Geometric tracking PD controller For ROVs Thruster manager with computation of the thruster allocation matrix based on the thruster frames available in /tf Model-based feedback linearization controller ( Fossen, 2011 ) Nonlinear PID controller ( Fossen, 2011 ) Non-model-based sliding mode controller ( Garc\u00eda-Valdovinos el al., 2014 and Salgado-Jim\u00e9nez et al., 2011 ) PD controller with restoration forces compensation 6-DOF PID controller Singularity-free tracking controller ( Fjellstad and Fossen, 1994 ) Teleoperation nodes for AUVs and ROVs Gazebo world models Ocean wave shaders for wave animation Scenarios from the SWARMs project demonstration locations (e.g. Mangalia, Romania and Trondheim, Norway) Subsea BOP panel for manipulation tasks Vehicle models Work-class ROV rexrov based on the model presetend in Berg, 2012 eca_a9 lauv_gazebo desistek_saga rexrov2 Installation \u00b6 This packages has been released for the following ROS distributions kinetic (See installation instructions for ROS Kinetic ) lunar (See installation instructions for ROS Lunar ) melodic (See installation instructions for ROS Melodic ) Once the ros-<distro>-desktop-full package for the desired distribution is installed, the uuv_simulator can be installed as kinetic sudo apt install ros-kinetic-uuv-simulator lunar sudo apt install ros-lunar-uuv-simulator melodic sudo apt install ros-melodic-uuv-simulator For instructions on how to install the package from source, check this instructions page Purpose of the project \u00b6 This software is a research prototype, originally developed for the EU ECSEL Project 662107 SWARMs . The software is not ready for production use. However, the license conditions of the applicable Open Source licenses allow you to adapt the software to your needs. Before using it in a safety relevant setting, make sure that the software fulfills your requirements and adjust it according to any applicable safety standards (e.g. ISO 26262). License \u00b6 UUV Simulator is open-sourced under the Apache-2.0 license. See the LICENSE file for details. For a list of other open source components included in UUV Simulator, see the file 3 rd -party-licenses.txt . Releases \u00b6","title":"Introduction"},{"location":"packages/uuv_simulator/intro/#features","text":"Gazebo/ROS plugins Implementation of Fossen's equations of motion for underwater vehicles Thruster modules with implementations for thruster's angular velocity to output thrust force based on Yoerger el al., 1990 and Bessa et al., 2006 Lift and drag plugin for simulation of fins Simulation of 3D current velocity models (constant or based on first-order Gauss-Markov processes) Sensor plugins Controllers For AUVs casadi -based effort allocation algorithm Geometric tracking PD controller For ROVs Thruster manager with computation of the thruster allocation matrix based on the thruster frames available in /tf Model-based feedback linearization controller ( Fossen, 2011 ) Nonlinear PID controller ( Fossen, 2011 ) Non-model-based sliding mode controller ( Garc\u00eda-Valdovinos el al., 2014 and Salgado-Jim\u00e9nez et al., 2011 ) PD controller with restoration forces compensation 6-DOF PID controller Singularity-free tracking controller ( Fjellstad and Fossen, 1994 ) Teleoperation nodes for AUVs and ROVs Gazebo world models Ocean wave shaders for wave animation Scenarios from the SWARMs project demonstration locations (e.g. Mangalia, Romania and Trondheim, Norway) Subsea BOP panel for manipulation tasks Vehicle models Work-class ROV rexrov based on the model presetend in Berg, 2012 eca_a9 lauv_gazebo desistek_saga rexrov2","title":"Features"},{"location":"packages/uuv_simulator/intro/#installation","text":"This packages has been released for the following ROS distributions kinetic (See installation instructions for ROS Kinetic ) lunar (See installation instructions for ROS Lunar ) melodic (See installation instructions for ROS Melodic ) Once the ros-<distro>-desktop-full package for the desired distribution is installed, the uuv_simulator can be installed as kinetic sudo apt install ros-kinetic-uuv-simulator lunar sudo apt install ros-lunar-uuv-simulator melodic sudo apt install ros-melodic-uuv-simulator For instructions on how to install the package from source, check this instructions page","title":"Installation"},{"location":"packages/uuv_simulator/intro/#purpose-of-the-project","text":"This software is a research prototype, originally developed for the EU ECSEL Project 662107 SWARMs . The software is not ready for production use. However, the license conditions of the applicable Open Source licenses allow you to adapt the software to your needs. Before using it in a safety relevant setting, make sure that the software fulfills your requirements and adjust it according to any applicable safety standards (e.g. ISO 26262).","title":"Purpose of the project"},{"location":"packages/uuv_simulator/intro/#license","text":"UUV Simulator is open-sourced under the Apache-2.0 license. See the LICENSE file for details. For a list of other open source components included in UUV Simulator, see the file 3 rd -party-licenses.txt .","title":"License"},{"location":"packages/uuv_simulator/intro/#releases","text":"","title":"Releases"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/","text":"class gazebo::AccelerationsTestPlugin \u00b6 class gazebo :: AccelerationsTestPlugin : public ModelPlugin Gazebo model plugin class for underwater objects. Summary \u00b6 Members Descriptions public AccelerationsTestPlugin () Constructor. public virtual ~AccelerationsTestPlugin () Destructor. public virtual void Load (gazebo::physics::ModelPtr _model,sdf::ElementPtr _sdf) public virtual void Init () public void Update (const gazebo::common::UpdateInfo & _info) Update the simulation state. protected gazebo::event::ConnectionPtr updateConnection Update event. protected gazebo::physics::WorldPtr world Pointer to the world plugin. protected gazebo::physics::ModelPtr model Pointer to the model structure. protected gazebo::transport::NodePtr node Gazebo node. protected physics::LinkPtr link Link of test object. protected ros::Publisher pub_accel_b_gazebo protected ros::Publisher pub_accel_b_numeric protected ros::Publisher pub_accel_w_gazebo protected ros::Publisher pub_accel_w_numeric protected Eigen::Vector6d last_w_v_w_b Velocity of link with respect to world frame in previous time step. protected common::Time lastTime Time stamp of previous time step. protected virtual void Connect () Connects the update event callback. Members \u00b6 public AccelerationsTestPlugin () \u00b6 Constructor. public virtual ~AccelerationsTestPlugin () \u00b6 Destructor. public virtual void Load (gazebo::physics::ModelPtr _model,sdf::ElementPtr _sdf) \u00b6 public virtual void Init () \u00b6 public void Update (const gazebo::common::UpdateInfo & _info) \u00b6 Update the simulation state. Parameters \u00b6 _info Information used in the update event. protected gazebo::event::ConnectionPtr updateConnection \u00b6 Update event. protected gazebo::physics::WorldPtr world \u00b6 Pointer to the world plugin. protected gazebo::physics::ModelPtr model \u00b6 Pointer to the model structure. protected gazebo::transport::NodePtr node \u00b6 Gazebo node. protected physics::LinkPtr link \u00b6 Link of test object. protected ros::Publisher pub_accel_b_gazebo \u00b6 protected ros::Publisher pub_accel_b_numeric \u00b6 protected ros::Publisher pub_accel_w_gazebo \u00b6 protected ros::Publisher pub_accel_w_numeric \u00b6 protected Eigen::Vector6d last_w_v_w_b \u00b6 Velocity of link with respect to world frame in previous time step. protected common::Time lastTime \u00b6 Time stamp of previous time step. protected virtual void Connect () \u00b6 Connects the update event callback.","title":"AccelerationsTestPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#class-gazeboaccelerationstestplugin","text":"class gazebo :: AccelerationsTestPlugin : public ModelPlugin Gazebo model plugin class for underwater objects.","title":"class gazebo::AccelerationsTestPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#summary","text":"Members Descriptions public AccelerationsTestPlugin () Constructor. public virtual ~AccelerationsTestPlugin () Destructor. public virtual void Load (gazebo::physics::ModelPtr _model,sdf::ElementPtr _sdf) public virtual void Init () public void Update (const gazebo::common::UpdateInfo & _info) Update the simulation state. protected gazebo::event::ConnectionPtr updateConnection Update event. protected gazebo::physics::WorldPtr world Pointer to the world plugin. protected gazebo::physics::ModelPtr model Pointer to the model structure. protected gazebo::transport::NodePtr node Gazebo node. protected physics::LinkPtr link Link of test object. protected ros::Publisher pub_accel_b_gazebo protected ros::Publisher pub_accel_b_numeric protected ros::Publisher pub_accel_w_gazebo protected ros::Publisher pub_accel_w_numeric protected Eigen::Vector6d last_w_v_w_b Velocity of link with respect to world frame in previous time step. protected common::Time lastTime Time stamp of previous time step. protected virtual void Connect () Connects the update event callback.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#publicaccelerationstestplugin","text":"Constructor.","title":"publicAccelerationsTestPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#public-virtualaccelerationstestplugin","text":"Destructor.","title":"public virtual~AccelerationsTestPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#public-virtual-voidloadgazebophysicsmodelptr-_modelsdfelementptr-_sdf","text":"","title":"public virtual voidLoad(gazebo::physics::ModelPtr _model,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#public-virtual-voidinit","text":"","title":"public virtual voidInit()"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#public-voidupdateconst-gazebocommonupdateinfo-_info","text":"Update the simulation state.","title":"public voidUpdate(const gazebo::common::UpdateInfo &amp; _info)"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#parameters","text":"_info Information used in the update event.","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#protected-gazeboeventconnectionptrupdateconnection","text":"Update event.","title":"protected gazebo::event::ConnectionPtrupdateConnection"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#protected-gazebophysicsworldptrworld","text":"Pointer to the world plugin.","title":"protected gazebo::physics::WorldPtrworld"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#protected-gazebophysicsmodelptrmodel","text":"Pointer to the model structure.","title":"protected gazebo::physics::ModelPtrmodel"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#protected-gazebotransportnodeptrnode","text":"Gazebo node.","title":"protected gazebo::transport::NodePtrnode"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#protected-physicslinkptrlink","text":"Link of test object.","title":"protected physics::LinkPtrlink"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#protected-rospublisherpub_accel_b_gazebo","text":"","title":"protected ros::Publisherpub_accel_b_gazebo"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#protected-rospublisherpub_accel_b_numeric","text":"","title":"protected ros::Publisherpub_accel_b_numeric"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#protected-rospublisherpub_accel_w_gazebo","text":"","title":"protected ros::Publisherpub_accel_w_gazebo"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#protected-rospublisherpub_accel_w_numeric","text":"","title":"protected ros::Publisherpub_accel_w_numeric"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#protected-eigenvector6dlast_w_v_w_b","text":"Velocity of link with respect to world frame in previous time step.","title":"protected Eigen::Vector6dlast_w_v_w_b"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#protected-commontimelasttime","text":"Time stamp of previous time step.","title":"protected common::TimelastTime"},{"location":"packages/uuv_simulator/docs/api/gazebo::AccelerationsTestPlugin/#protected-virtual-voidconnect","text":"Connects the update event callback.","title":"protected virtual voidConnect()"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/","text":"class gazebo::BuoyantObject \u00b6 Class describing the dynamics of a buoyant object, useful for simple representations of underwater structures. Summary \u00b6 Members Descriptions public BuoyantObject (physics::LinkPtr _link) Constructor. public ~BuoyantObject () Destructor. public void GetBuoyancyForce (const ignition::math::Pose3d & _pose,ignition::math::Vector3d & buoyancyForce,ignition::math::Vector3d & buoyancyTorque) Returns the buoyancy force vector in the world frame. public void ApplyBuoyancyForce () Applies buoyancy force on link. public void SetVolume (double _volume) Sets the link's submerged volume. public double GetVolume () Returns the stored link submerged volume. public void SetFluidDensity (double _fluidDensity) Sets the fluid density in kg/m^3. public double GetFluidDensity () Returns the stored fluid density. public void SetCoB (const ignition::math::Vector3d & _centerOfBuoyancy) Sets the position of the center of buoyancy on the body frame. public ignition::math::Vector3d GetCoB () Returns the stored center of buoyancy. public void SetGravity (double _g) Set acceleration of gravity. public double GetGravity () Get stored acceleration of gravity. public void SetBoundingBox (const ignition::math::Box & _bBox) Sets bounding box. public void SetStoreVector (std::string _tag) Adds a field in the hydroWrench map. public ignition::math::Vector3d GetStoredVector (std::string _tag) Get vector from the hydroWrench map. public void SetDebugFlag (bool _debugOn) Set debug flag to store intermediate forces and torques. public bool IsSubmerged () Returns true if the robot is completely submerged. public bool IsNeutrallyBuoyant () Returns true if the link was set to be neutrally buoyant. public bool GetDebugFlag () Returns the debug flag. public void SetNeutrallyBuoyant () Sets this link as neutrally buoyant. protected double volume Volume of fluid displaced by the submerged object. protected double scalingVolume Scaling factor for the volume. protected double offsetVolume Offset for the volume. protected double fluidDensity Fluid density. protected double g Acceleration of gravity. protected ignition::math::Vector3d centerOfBuoyancy Center of buoyancy in the body frame. protected ignition::math::Box boundingBox TEMP for calculation of the buoyancy force close to the surface. protected std::map< std::string, ignition::math::Vector3d > hydroWrench Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes. protected bool debugFlag Debug flag, storing all intermediate forces and torques. protected bool isSubmerged Is submerged flag. protected physics::LinkPtr link Pointer to the correspondent robot link. protected bool neutrallyBuoyant If true, the restoring force will be equal to the gravitational. protected double metacentricWidth protected double metacentricLength Metacentric length of the robot, used only for surface vessels and floating objects. protected double waterLevelPlaneArea If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box. protected double submergedHeight Height of the robot that is submerged (only for surface vessels) protected bool isSurfaceVessel Flag set to true if the information about the metacentric width and height is available. protected bool isSurfaceVesselFloating Flag set to true if the vessel has reached its submerged height. protected void StoreVector (std::string _tag,ignition::math::Vector3d _vec) Store vector in the hydroWrench map if the field has been created. Members \u00b6 public BuoyantObject (physics::LinkPtr _link) \u00b6 Constructor. public ~BuoyantObject () \u00b6 Destructor. public void GetBuoyancyForce (const ignition::math::Pose3d & _pose,ignition::math::Vector3d & buoyancyForce,ignition::math::Vector3d & buoyancyTorque) \u00b6 Returns the buoyancy force vector in the world frame. public void ApplyBuoyancyForce () \u00b6 Applies buoyancy force on link. public void SetVolume (double _volume) \u00b6 Sets the link's submerged volume. public double GetVolume () \u00b6 Returns the stored link submerged volume. public void SetFluidDensity (double _fluidDensity) \u00b6 Sets the fluid density in kg/m^3. public double GetFluidDensity () \u00b6 Returns the stored fluid density. public void SetCoB (const ignition::math::Vector3d & _centerOfBuoyancy) \u00b6 Sets the position of the center of buoyancy on the body frame. public ignition::math::Vector3d GetCoB () \u00b6 Returns the stored center of buoyancy. public void SetGravity (double _g) \u00b6 Set acceleration of gravity. public double GetGravity () \u00b6 Get stored acceleration of gravity. public void SetBoundingBox (const ignition::math::Box & _bBox) \u00b6 Sets bounding box. public void SetStoreVector (std::string _tag) \u00b6 Adds a field in the hydroWrench map. public ignition::math::Vector3d GetStoredVector (std::string _tag) \u00b6 Get vector from the hydroWrench map. public void SetDebugFlag (bool _debugOn) \u00b6 Set debug flag to store intermediate forces and torques. public bool IsSubmerged () \u00b6 Returns true if the robot is completely submerged. public bool IsNeutrallyBuoyant () \u00b6 Returns true if the link was set to be neutrally buoyant. public bool GetDebugFlag () \u00b6 Returns the debug flag. public void SetNeutrallyBuoyant () \u00b6 Sets this link as neutrally buoyant. protected double volume \u00b6 Volume of fluid displaced by the submerged object. protected double scalingVolume \u00b6 Scaling factor for the volume. protected double offsetVolume \u00b6 Offset for the volume. protected double fluidDensity \u00b6 Fluid density. protected double g \u00b6 Acceleration of gravity. protected ignition::math::Vector3d centerOfBuoyancy \u00b6 Center of buoyancy in the body frame. protected ignition::math::Box boundingBox \u00b6 TEMP for calculation of the buoyancy force close to the surface. protected std::map< std::string, ignition::math::Vector3d > hydroWrench \u00b6 Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes. protected bool debugFlag \u00b6 Debug flag, storing all intermediate forces and torques. protected bool isSubmerged \u00b6 Is submerged flag. protected physics::LinkPtr link \u00b6 Pointer to the correspondent robot link. protected bool neutrallyBuoyant \u00b6 If true, the restoring force will be equal to the gravitational. protected double metacentricWidth \u00b6 protected double metacentricLength \u00b6 Metacentric length of the robot, used only for surface vessels and floating objects. protected double waterLevelPlaneArea \u00b6 If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box. protected double submergedHeight \u00b6 Height of the robot that is submerged (only for surface vessels) protected bool isSurfaceVessel \u00b6 Flag set to true if the information about the metacentric width and height is available. protected bool isSurfaceVesselFloating \u00b6 Flag set to true if the vessel has reached its submerged height. protected void StoreVector (std::string _tag,ignition::math::Vector3d _vec) \u00b6 Store vector in the hydroWrench map if the field has been created.","title":"BuoyantObject"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#class-gazebobuoyantobject","text":"Class describing the dynamics of a buoyant object, useful for simple representations of underwater structures.","title":"class gazebo::BuoyantObject"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#summary","text":"Members Descriptions public BuoyantObject (physics::LinkPtr _link) Constructor. public ~BuoyantObject () Destructor. public void GetBuoyancyForce (const ignition::math::Pose3d & _pose,ignition::math::Vector3d & buoyancyForce,ignition::math::Vector3d & buoyancyTorque) Returns the buoyancy force vector in the world frame. public void ApplyBuoyancyForce () Applies buoyancy force on link. public void SetVolume (double _volume) Sets the link's submerged volume. public double GetVolume () Returns the stored link submerged volume. public void SetFluidDensity (double _fluidDensity) Sets the fluid density in kg/m^3. public double GetFluidDensity () Returns the stored fluid density. public void SetCoB (const ignition::math::Vector3d & _centerOfBuoyancy) Sets the position of the center of buoyancy on the body frame. public ignition::math::Vector3d GetCoB () Returns the stored center of buoyancy. public void SetGravity (double _g) Set acceleration of gravity. public double GetGravity () Get stored acceleration of gravity. public void SetBoundingBox (const ignition::math::Box & _bBox) Sets bounding box. public void SetStoreVector (std::string _tag) Adds a field in the hydroWrench map. public ignition::math::Vector3d GetStoredVector (std::string _tag) Get vector from the hydroWrench map. public void SetDebugFlag (bool _debugOn) Set debug flag to store intermediate forces and torques. public bool IsSubmerged () Returns true if the robot is completely submerged. public bool IsNeutrallyBuoyant () Returns true if the link was set to be neutrally buoyant. public bool GetDebugFlag () Returns the debug flag. public void SetNeutrallyBuoyant () Sets this link as neutrally buoyant. protected double volume Volume of fluid displaced by the submerged object. protected double scalingVolume Scaling factor for the volume. protected double offsetVolume Offset for the volume. protected double fluidDensity Fluid density. protected double g Acceleration of gravity. protected ignition::math::Vector3d centerOfBuoyancy Center of buoyancy in the body frame. protected ignition::math::Box boundingBox TEMP for calculation of the buoyancy force close to the surface. protected std::map< std::string, ignition::math::Vector3d > hydroWrench Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes. protected bool debugFlag Debug flag, storing all intermediate forces and torques. protected bool isSubmerged Is submerged flag. protected physics::LinkPtr link Pointer to the correspondent robot link. protected bool neutrallyBuoyant If true, the restoring force will be equal to the gravitational. protected double metacentricWidth protected double metacentricLength Metacentric length of the robot, used only for surface vessels and floating objects. protected double waterLevelPlaneArea If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box. protected double submergedHeight Height of the robot that is submerged (only for surface vessels) protected bool isSurfaceVessel Flag set to true if the information about the metacentric width and height is available. protected bool isSurfaceVesselFloating Flag set to true if the vessel has reached its submerged height. protected void StoreVector (std::string _tag,ignition::math::Vector3d _vec) Store vector in the hydroWrench map if the field has been created.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#publicbuoyantobjectphysicslinkptr-_link","text":"Constructor.","title":"publicBuoyantObject(physics::LinkPtr _link)"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#publicbuoyantobject","text":"Destructor.","title":"public~BuoyantObject()"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#public-voidgetbuoyancyforceconst-ignitionmathpose3d-_poseignitionmathvector3d-buoyancyforceignitionmathvector3d-buoyancytorque","text":"Returns the buoyancy force vector in the world frame.","title":"public voidGetBuoyancyForce(const ignition::math::Pose3d &amp; _pose,ignition::math::Vector3d &amp; buoyancyForce,ignition::math::Vector3d &amp; buoyancyTorque)"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#public-voidapplybuoyancyforce","text":"Applies buoyancy force on link.","title":"public voidApplyBuoyancyForce()"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#public-voidsetvolumedouble-_volume","text":"Sets the link's submerged volume.","title":"public voidSetVolume(double _volume)"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#public-doublegetvolume","text":"Returns the stored link submerged volume.","title":"public doubleGetVolume()"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#public-voidsetfluiddensitydouble-_fluiddensity","text":"Sets the fluid density in kg/m^3.","title":"public voidSetFluidDensity(double _fluidDensity)"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#public-doublegetfluiddensity","text":"Returns the stored fluid density.","title":"public doubleGetFluidDensity()"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#public-voidsetcobconst-ignitionmathvector3d-_centerofbuoyancy","text":"Sets the position of the center of buoyancy on the body frame.","title":"public voidSetCoB(const ignition::math::Vector3d &amp; _centerOfBuoyancy)"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#public-ignitionmathvector3dgetcob","text":"Returns the stored center of buoyancy.","title":"public ignition::math::Vector3dGetCoB()"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#public-voidsetgravitydouble-_g","text":"Set acceleration of gravity.","title":"public voidSetGravity(double _g)"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#public-doublegetgravity","text":"Get stored acceleration of gravity.","title":"public doubleGetGravity()"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#public-voidsetboundingboxconst-ignitionmathbox-_bbox","text":"Sets bounding box.","title":"public voidSetBoundingBox(const ignition::math::Box &amp; _bBox)"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#public-voidsetstorevectorstdstring-_tag","text":"Adds a field in the hydroWrench map.","title":"public voidSetStoreVector(std::string _tag)"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#public-ignitionmathvector3dgetstoredvectorstdstring-_tag","text":"Get vector from the hydroWrench map.","title":"public ignition::math::Vector3dGetStoredVector(std::string _tag)"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#public-voidsetdebugflagbool-_debugon","text":"Set debug flag to store intermediate forces and torques.","title":"public voidSetDebugFlag(bool _debugOn)"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#public-boolissubmerged","text":"Returns true if the robot is completely submerged.","title":"public boolIsSubmerged()"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#public-boolisneutrallybuoyant","text":"Returns true if the link was set to be neutrally buoyant.","title":"public boolIsNeutrallyBuoyant()"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#public-boolgetdebugflag","text":"Returns the debug flag.","title":"public boolGetDebugFlag()"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#public-voidsetneutrallybuoyant","text":"Sets this link as neutrally buoyant.","title":"public voidSetNeutrallyBuoyant()"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-doublevolume","text":"Volume of fluid displaced by the submerged object.","title":"protected doublevolume"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-doublescalingvolume","text":"Scaling factor for the volume.","title":"protected doublescalingVolume"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-doubleoffsetvolume","text":"Offset for the volume.","title":"protected doubleoffsetVolume"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-doublefluiddensity","text":"Fluid density.","title":"protected doublefluidDensity"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-doubleg","text":"Acceleration of gravity.","title":"protected doubleg"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-ignitionmathvector3dcenterofbuoyancy","text":"Center of buoyancy in the body frame.","title":"protected ignition::math::Vector3dcenterOfBuoyancy"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-ignitionmathboxboundingbox","text":"TEMP for calculation of the buoyancy force close to the surface.","title":"protected ignition::math::BoxboundingBox"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-stdmap-stdstring-ignitionmathvector3d-hydrowrench","text":"Storage for hydrodynamic and hydrostatic forces and torques for debugging purposes.","title":"protected std::map&lt; std::string, ignition::math::Vector3d &gt;hydroWrench"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-booldebugflag","text":"Debug flag, storing all intermediate forces and torques.","title":"protected booldebugFlag"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-boolissubmerged","text":"Is submerged flag.","title":"protected boolisSubmerged"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-physicslinkptrlink","text":"Pointer to the correspondent robot link.","title":"protected physics::LinkPtrlink"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-boolneutrallybuoyant","text":"If true, the restoring force will be equal to the gravitational.","title":"protected boolneutrallyBuoyant"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-doublemetacentricwidth","text":"","title":"protected doublemetacentricWidth"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-doublemetacentriclength","text":"Metacentric length of the robot, used only for surface vessels and floating objects.","title":"protected doublemetacentricLength"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-doublewaterlevelplanearea","text":"If the cross section area around water level of the surface vessel is not given, it will be computed from the object's bounding box.","title":"protected doublewaterLevelPlaneArea"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-doublesubmergedheight","text":"Height of the robot that is submerged (only for surface vessels)","title":"protected doublesubmergedHeight"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-boolissurfacevessel","text":"Flag set to true if the information about the metacentric width and height is available.","title":"protected boolisSurfaceVessel"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-boolissurfacevesselfloating","text":"Flag set to true if the vessel has reached its submerged height.","title":"protected boolisSurfaceVesselFloating"},{"location":"packages/uuv_simulator/docs/api/gazebo::BuoyantObject/#protected-voidstorevectorstdstring-_tagignitionmathvector3d-_vec","text":"Store vector in the hydroWrench map if the field has been created.","title":"protected voidStoreVector(std::string _tag,ignition::math::Vector3d _vec)"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/","text":"class gazebo::CPCROSPlugin \u00b6 class gazebo :: CPCROSPlugin : public gazebo :: ROSBaseModelPlugin Summary \u00b6 Members Descriptions public CPCROSPlugin () Class constructor. public virtual ~CPCROSPlugin () Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) Load the plugin. protected ros::Subscriber particlesSub Input topic for the plume particle point cloud. protected ros::Publisher salinityPub Output topic for salinity measurements based on the particle concentration. protected bool updatingCloud Flag to ensure the cloud and measurement update don't coincide. protected double gamma Gamma velocity parameter for the smoothing function. protected double gain Sensor gain. protected double smoothingLength protected ros::Time lastUpdateTimestamp Last update from the point cloud callback. protected uuv_sensor_ros_plugins_msgs::ChemicalParticleConcentration outputMsg Output measurement topic. protected uuv_sensor_ros_plugins_msgs::Salinity salinityMsg Output salinity measurement message. protected double waterSalinityValue protected double plumeSalinityValue protected virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. protected virtual void OnPlumeParticlesUpdate (const sensor_msgs::PointCloud::ConstPtr & _msg) Update callback from simulator. Members \u00b6 public CPCROSPlugin () \u00b6 Class constructor. public virtual ~CPCROSPlugin () \u00b6 Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) \u00b6 Load the plugin. protected ros::Subscriber particlesSub \u00b6 Input topic for the plume particle point cloud. protected ros::Publisher salinityPub \u00b6 Output topic for salinity measurements based on the particle concentration. protected bool updatingCloud \u00b6 Flag to ensure the cloud and measurement update don't coincide. protected double gamma \u00b6 Gamma velocity parameter for the smoothing function. protected double gain \u00b6 Sensor gain. protected double smoothingLength \u00b6 protected ros::Time lastUpdateTimestamp \u00b6 Last update from the point cloud callback. protected uuv_sensor_ros_plugins_msgs::ChemicalParticleConcentration outputMsg \u00b6 Output measurement topic. protected uuv_sensor_ros_plugins_msgs::Salinity salinityMsg \u00b6 Output salinity measurement message. protected double waterSalinityValue \u00b6 protected double plumeSalinityValue \u00b6 protected virtual bool OnUpdate (const common::UpdateInfo & _info) \u00b6 Update sensor measurement. protected virtual void OnPlumeParticlesUpdate (const sensor_msgs::PointCloud::ConstPtr & _msg) \u00b6 Update callback from simulator.","title":"CPCROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#class-gazebocpcrosplugin","text":"class gazebo :: CPCROSPlugin : public gazebo :: ROSBaseModelPlugin","title":"class gazebo::CPCROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#summary","text":"Members Descriptions public CPCROSPlugin () Class constructor. public virtual ~CPCROSPlugin () Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) Load the plugin. protected ros::Subscriber particlesSub Input topic for the plume particle point cloud. protected ros::Publisher salinityPub Output topic for salinity measurements based on the particle concentration. protected bool updatingCloud Flag to ensure the cloud and measurement update don't coincide. protected double gamma Gamma velocity parameter for the smoothing function. protected double gain Sensor gain. protected double smoothingLength protected ros::Time lastUpdateTimestamp Last update from the point cloud callback. protected uuv_sensor_ros_plugins_msgs::ChemicalParticleConcentration outputMsg Output measurement topic. protected uuv_sensor_ros_plugins_msgs::Salinity salinityMsg Output salinity measurement message. protected double waterSalinityValue protected double plumeSalinityValue protected virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. protected virtual void OnPlumeParticlesUpdate (const sensor_msgs::PointCloud::ConstPtr & _msg) Update callback from simulator.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#publiccpcrosplugin","text":"Class constructor.","title":"publicCPCROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#public-virtualcpcrosplugin","text":"Class destructor.","title":"public virtual~CPCROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#public-virtual-voidloadphysicsmodelptr-_modelsdfelementptr-_sdf","text":"Load the plugin.","title":"public virtual voidLoad(physics::ModelPtr _model,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#protected-rossubscriberparticlessub","text":"Input topic for the plume particle point cloud.","title":"protected ros::SubscriberparticlesSub"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#protected-rospublishersalinitypub","text":"Output topic for salinity measurements based on the particle concentration.","title":"protected ros::PublishersalinityPub"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#protected-boolupdatingcloud","text":"Flag to ensure the cloud and measurement update don't coincide.","title":"protected boolupdatingCloud"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#protected-doublegamma","text":"Gamma velocity parameter for the smoothing function.","title":"protected doublegamma"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#protected-doublegain","text":"Sensor gain.","title":"protected doublegain"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#protected-doublesmoothinglength","text":"","title":"protected doublesmoothingLength"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#protected-rostimelastupdatetimestamp","text":"Last update from the point cloud callback.","title":"protected ros::TimelastUpdateTimestamp"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#protected-uuv_sensor_ros_plugins_msgschemicalparticleconcentrationoutputmsg","text":"Output measurement topic.","title":"protected uuv_sensor_ros_plugins_msgs::ChemicalParticleConcentrationoutputMsg"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#protected-uuv_sensor_ros_plugins_msgssalinitysalinitymsg","text":"Output salinity measurement message.","title":"protected uuv_sensor_ros_plugins_msgs::SalinitysalinityMsg"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#protected-doublewatersalinityvalue","text":"","title":"protected doublewaterSalinityValue"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#protected-doubleplumesalinityvalue","text":"","title":"protected doubleplumeSalinityValue"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#protected-virtual-boolonupdateconst-commonupdateinfo-_info","text":"Update sensor measurement.","title":"protected virtual boolOnUpdate(const common::UpdateInfo &amp; _info)"},{"location":"packages/uuv_simulator/docs/api/gazebo::CPCROSPlugin/#protected-virtual-voidonplumeparticlesupdateconst-sensor_msgspointcloudconstptr-_msg","text":"Update callback from simulator.","title":"protected virtual voidOnPlumeParticlesUpdate(const sensor_msgs::PointCloud::ConstPtr &amp; _msg)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunction/","text":"class gazebo::ConversionFunction \u00b6 Abstact base class for a thruster conversion function. Summary \u00b6 Members Descriptions public inline virtual ~ConversionFunction () Destructor. public std::string GetType () Return (derived) type of conversion function. public bool GetParam (std::string _tag,double & _output) Return paramater in vector form for the given tag. public inline virtual std::map< double, double > GetTable () Return input and output vectors of the lookup table. public double convert (double _cmd) Convert thruster state (e.g. angular velocity) to thrust force. protected inline ConversionFunction () Protected constructor: Use the factory instead. Members \u00b6 public inline virtual ~ConversionFunction () \u00b6 Destructor. public std::string GetType () \u00b6 Return (derived) type of conversion function. public bool GetParam (std::string _tag,double & _output) \u00b6 Return paramater in vector form for the given tag. public inline virtual std::map< double, double > GetTable () \u00b6 Return input and output vectors of the lookup table. public double convert (double _cmd) \u00b6 Convert thruster state (e.g. angular velocity) to thrust force. protected inline ConversionFunction () \u00b6 Protected constructor: Use the factory instead.","title":"ConversionFunction"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunction/#class-gazeboconversionfunction","text":"Abstact base class for a thruster conversion function.","title":"class gazebo::ConversionFunction"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunction/#summary","text":"Members Descriptions public inline virtual ~ConversionFunction () Destructor. public std::string GetType () Return (derived) type of conversion function. public bool GetParam (std::string _tag,double & _output) Return paramater in vector form for the given tag. public inline virtual std::map< double, double > GetTable () Return input and output vectors of the lookup table. public double convert (double _cmd) Convert thruster state (e.g. angular velocity) to thrust force. protected inline ConversionFunction () Protected constructor: Use the factory instead.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunction/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunction/#public-inline-virtualconversionfunction","text":"Destructor.","title":"public inline virtual~ConversionFunction()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunction/#public-stdstringgettype","text":"Return (derived) type of conversion function.","title":"public std::stringGetType()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunction/#public-boolgetparamstdstring-_tagdouble-_output","text":"Return paramater in vector form for the given tag.","title":"public boolGetParam(std::string _tag,double &amp; _output)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunction/#public-inline-virtual-stdmap-double-double-gettable","text":"Return input and output vectors of the lookup table.","title":"public inline virtual std::map&lt; double, double &gt;GetTable()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunction/#public-doubleconvertdouble-_cmd","text":"Convert thruster state (e.g. angular velocity) to thrust force.","title":"public doubleconvert(double _cmd)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunction/#protected-inlineconversionfunction","text":"Protected constructor: Use the factory instead.","title":"protected inlineConversionFunction()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionBasic/","text":"class gazebo::ConversionFunctionBasic \u00b6 class gazebo :: ConversionFunctionBasic : public gazebo :: ConversionFunction The most basic conversion function: Thrust = const.*w*abs(w) This corresponds to what is attrributed to Yoerger et al. and called Model 1 in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation. Summary \u00b6 Members Descriptions public inline virtual std::string GetType () Return (derived) type of conversion function. public virtual bool GetParam (std::string _tag,double & _output) Return paramater in scalar form for the given tag. public virtual double convert (double _cmd) Convert thruster state (e.g. angular velocity) to thrust force. Members \u00b6 public inline virtual std::string GetType () \u00b6 Return (derived) type of conversion function. public virtual bool GetParam (std::string _tag,double & _output) \u00b6 Return paramater in scalar form for the given tag. public virtual double convert (double _cmd) \u00b6 Convert thruster state (e.g. angular velocity) to thrust force.","title":"ConversionFunctionBasic"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionBasic/#class-gazeboconversionfunctionbasic","text":"class gazebo :: ConversionFunctionBasic : public gazebo :: ConversionFunction The most basic conversion function: Thrust = const.*w*abs(w) This corresponds to what is attrributed to Yoerger et al. and called Model 1 in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation.","title":"class gazebo::ConversionFunctionBasic"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionBasic/#summary","text":"Members Descriptions public inline virtual std::string GetType () Return (derived) type of conversion function. public virtual bool GetParam (std::string _tag,double & _output) Return paramater in scalar form for the given tag. public virtual double convert (double _cmd) Convert thruster state (e.g. angular velocity) to thrust force.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionBasic/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionBasic/#public-inline-virtual-stdstringgettype","text":"Return (derived) type of conversion function.","title":"public inline virtual std::stringGetType()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionBasic/#public-virtual-boolgetparamstdstring-_tagdouble-_output","text":"Return paramater in scalar form for the given tag.","title":"public virtual boolGetParam(std::string _tag,double &amp; _output)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionBasic/#public-virtual-doubleconvertdouble-_cmd","text":"Convert thruster state (e.g. angular velocity) to thrust force.","title":"public virtual doubleconvert(double _cmd)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionBessa/","text":"class gazebo::ConversionFunctionBessa \u00b6 class gazebo :: ConversionFunctionBessa : public gazebo :: ConversionFunction Asymmetric conversion function with dead-zone nonlinearity. This corresponds to what is called Model 2 in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation. Summary \u00b6 Members Descriptions public inline virtual std::string GetType () Return (derived) type of conversion function. public virtual bool GetParam (std::string _tag,double & _output) Return paramater in scalar form for the given tag. public virtual double convert (double _cmd) Convert thruster state (e.g. angular velocity) to thrust force. Members \u00b6 public inline virtual std::string GetType () \u00b6 Return (derived) type of conversion function. public virtual bool GetParam (std::string _tag,double & _output) \u00b6 Return paramater in scalar form for the given tag. public virtual double convert (double _cmd) \u00b6 Convert thruster state (e.g. angular velocity) to thrust force.","title":"ConversionFunctionBessa"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionBessa/#class-gazeboconversionfunctionbessa","text":"class gazebo :: ConversionFunctionBessa : public gazebo :: ConversionFunction Asymmetric conversion function with dead-zone nonlinearity. This corresponds to what is called Model 2 in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation.","title":"class gazebo::ConversionFunctionBessa"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionBessa/#summary","text":"Members Descriptions public inline virtual std::string GetType () Return (derived) type of conversion function. public virtual bool GetParam (std::string _tag,double & _output) Return paramater in scalar form for the given tag. public virtual double convert (double _cmd) Convert thruster state (e.g. angular velocity) to thrust force.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionBessa/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionBessa/#public-inline-virtual-stdstringgettype","text":"Return (derived) type of conversion function.","title":"public inline virtual std::stringGetType()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionBessa/#public-virtual-boolgetparamstdstring-_tagdouble-_output","text":"Return paramater in scalar form for the given tag.","title":"public virtual boolGetParam(std::string _tag,double &amp; _output)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionBessa/#public-virtual-doubleconvertdouble-_cmd","text":"Convert thruster state (e.g. angular velocity) to thrust force.","title":"public virtual doubleconvert(double _cmd)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionFactory/","text":"class gazebo::ConversionFunctionFactory \u00b6 Factory singleton class that creates a ConversionFunction from sdf. Summary \u00b6 Members Descriptions public ConversionFunction * CreateConversionFunction (sdf::ElementPtr _sdf) Create a ConversionFunction object according to its sdf Description. public bool RegisterCreator (const std::string & _identifier,ConversionFunctionCreator _creator) Register a ConversionFunction class with its creator. Members \u00b6 public ConversionFunction * CreateConversionFunction (sdf::ElementPtr _sdf) \u00b6 Create a ConversionFunction object according to its sdf Description. public bool RegisterCreator (const std::string & _identifier,ConversionFunctionCreator _creator) \u00b6 Register a ConversionFunction class with its creator.","title":"ConversionFunctionFactory"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionFactory/#class-gazeboconversionfunctionfactory","text":"Factory singleton class that creates a ConversionFunction from sdf.","title":"class gazebo::ConversionFunctionFactory"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionFactory/#summary","text":"Members Descriptions public ConversionFunction * CreateConversionFunction (sdf::ElementPtr _sdf) Create a ConversionFunction object according to its sdf Description. public bool RegisterCreator (const std::string & _identifier,ConversionFunctionCreator _creator) Register a ConversionFunction class with its creator.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionFactory/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionFactory/#publicconversionfunctioncreateconversionfunctionsdfelementptr-_sdf","text":"Create a ConversionFunction object according to its sdf Description.","title":"publicConversionFunction*CreateConversionFunction(sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionFactory/#public-boolregistercreatorconst-stdstring-_identifierconversionfunctioncreator-_creator","text":"Register a ConversionFunction class with its creator.","title":"public boolRegisterCreator(const std::string &amp; _identifier,ConversionFunctionCreator _creator)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionLinearInterp/","text":"class gazebo::ConversionFunctionLinearInterp \u00b6 class gazebo :: ConversionFunctionLinearInterp : public gazebo :: ConversionFunction Conversion using linear interpolation between given data points. Summary \u00b6 Members Descriptions public inline virtual std::string GetType () Return (derived) type of conversion function. public virtual bool GetParam (std::string _tag,double & _output) Return paramater in scalar form for the given tag. public virtual std::map< double, double > GetTable () Return input and output vectors of the lookup table. public virtual double convert (double _cmd) Convert thruster state (e.g. angular velocity) to thrust force. Members \u00b6 public inline virtual std::string GetType () \u00b6 Return (derived) type of conversion function. public virtual bool GetParam (std::string _tag,double & _output) \u00b6 Return paramater in scalar form for the given tag. public virtual std::map< double, double > GetTable () \u00b6 Return input and output vectors of the lookup table. public virtual double convert (double _cmd) \u00b6 Convert thruster state (e.g. angular velocity) to thrust force.","title":"ConversionFunctionLinearInterp"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionLinearInterp/#class-gazeboconversionfunctionlinearinterp","text":"class gazebo :: ConversionFunctionLinearInterp : public gazebo :: ConversionFunction Conversion using linear interpolation between given data points.","title":"class gazebo::ConversionFunctionLinearInterp"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionLinearInterp/#summary","text":"Members Descriptions public inline virtual std::string GetType () Return (derived) type of conversion function. public virtual bool GetParam (std::string _tag,double & _output) Return paramater in scalar form for the given tag. public virtual std::map< double, double > GetTable () Return input and output vectors of the lookup table. public virtual double convert (double _cmd) Convert thruster state (e.g. angular velocity) to thrust force.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionLinearInterp/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionLinearInterp/#public-inline-virtual-stdstringgettype","text":"Return (derived) type of conversion function.","title":"public inline virtual std::stringGetType()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionLinearInterp/#public-virtual-boolgetparamstdstring-_tagdouble-_output","text":"Return paramater in scalar form for the given tag.","title":"public virtual boolGetParam(std::string _tag,double &amp; _output)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionLinearInterp/#public-virtual-stdmap-double-double-gettable","text":"Return input and output vectors of the lookup table.","title":"public virtual std::map&lt; double, double &gt;GetTable()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ConversionFunctionLinearInterp/#public-virtual-doubleconvertdouble-_cmd","text":"Convert thruster state (e.g. angular velocity) to thrust force.","title":"public virtual doubleconvert(double _cmd)"},{"location":"packages/uuv_simulator/docs/api/gazebo::CustomBatteryConsumerROSPlugin/","text":"class gazebo::CustomBatteryConsumerROSPlugin \u00b6 class gazebo :: CustomBatteryConsumerROSPlugin : public ModelPlugin Summary \u00b6 Members Descriptions public CustomBatteryConsumerROSPlugin () Constructor. public virtual ~CustomBatteryConsumerROSPlugin () Destructor. public void Load (physics::ModelPtr _parent,sdf::ElementPtr _sdf) Load module and read parameters from SDF. protected boost::scoped_ptr< ros::NodeHandle > rosNode Pointer to this ROS node's handle. protected ros::Subscriber deviceStateSub Subscriber to the device state flag. protected common::BatteryPtr battery Pointer to battery. protected bool isDeviceOn Flag to signal whether a specific device is running. protected double powerLoad Power load in W. protected int consumerID Battery consumer ID. protected std::string linkName Link name. protected std::string batteryName Battery model name. protected event::ConnectionPtr rosPublishConnection Connection for callbacks on update world. protected void UpdateDeviceState (const std_msgs::Bool::ConstPtr & _msg) Callback for the device state topic subscriber. protected void UpdatePowerLoad (double _powerLoad) Update power load. Members \u00b6 public CustomBatteryConsumerROSPlugin () \u00b6 Constructor. public virtual ~CustomBatteryConsumerROSPlugin () \u00b6 Destructor. public void Load (physics::ModelPtr _parent,sdf::ElementPtr _sdf) \u00b6 Load module and read parameters from SDF. protected boost::scoped_ptr< ros::NodeHandle > rosNode \u00b6 Pointer to this ROS node's handle. protected ros::Subscriber deviceStateSub \u00b6 Subscriber to the device state flag. protected common::BatteryPtr battery \u00b6 Pointer to battery. protected bool isDeviceOn \u00b6 Flag to signal whether a specific device is running. protected double powerLoad \u00b6 Power load in W. protected int consumerID \u00b6 Battery consumer ID. protected std::string linkName \u00b6 Link name. protected std::string batteryName \u00b6 Battery model name. protected event::ConnectionPtr rosPublishConnection \u00b6 Connection for callbacks on update world. protected void UpdateDeviceState (const std_msgs::Bool::ConstPtr & _msg) \u00b6 Callback for the device state topic subscriber. protected void UpdatePowerLoad (double _powerLoad) \u00b6 Update power load.","title":"CustomBatteryConsumerROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::CustomBatteryConsumerROSPlugin/#class-gazebocustombatteryconsumerrosplugin","text":"class gazebo :: CustomBatteryConsumerROSPlugin : public ModelPlugin","title":"class gazebo::CustomBatteryConsumerROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::CustomBatteryConsumerROSPlugin/#summary","text":"Members Descriptions public CustomBatteryConsumerROSPlugin () Constructor. public virtual ~CustomBatteryConsumerROSPlugin () Destructor. public void Load (physics::ModelPtr _parent,sdf::ElementPtr _sdf) Load module and read parameters from SDF. protected boost::scoped_ptr< ros::NodeHandle > rosNode Pointer to this ROS node's handle. protected ros::Subscriber deviceStateSub Subscriber to the device state flag. protected common::BatteryPtr battery Pointer to battery. protected bool isDeviceOn Flag to signal whether a specific device is running. protected double powerLoad Power load in W. protected int consumerID Battery consumer ID. protected std::string linkName Link name. protected std::string batteryName Battery model name. protected event::ConnectionPtr rosPublishConnection Connection for callbacks on update world. protected void UpdateDeviceState (const std_msgs::Bool::ConstPtr & _msg) Callback for the device state topic subscriber. protected void UpdatePowerLoad (double _powerLoad) Update power load.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::CustomBatteryConsumerROSPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::CustomBatteryConsumerROSPlugin/#publiccustombatteryconsumerrosplugin","text":"Constructor.","title":"publicCustomBatteryConsumerROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::CustomBatteryConsumerROSPlugin/#public-virtualcustombatteryconsumerrosplugin","text":"Destructor.","title":"public virtual~CustomBatteryConsumerROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::CustomBatteryConsumerROSPlugin/#public-voidloadphysicsmodelptr-_parentsdfelementptr-_sdf","text":"Load module and read parameters from SDF.","title":"public voidLoad(physics::ModelPtr _parent,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::CustomBatteryConsumerROSPlugin/#protected-boostscoped_ptr-rosnodehandle-rosnode","text":"Pointer to this ROS node's handle.","title":"protected boost::scoped_ptr&lt; ros::NodeHandle &gt;rosNode"},{"location":"packages/uuv_simulator/docs/api/gazebo::CustomBatteryConsumerROSPlugin/#protected-rossubscriberdevicestatesub","text":"Subscriber to the device state flag.","title":"protected ros::SubscriberdeviceStateSub"},{"location":"packages/uuv_simulator/docs/api/gazebo::CustomBatteryConsumerROSPlugin/#protected-commonbatteryptrbattery","text":"Pointer to battery.","title":"protected common::BatteryPtrbattery"},{"location":"packages/uuv_simulator/docs/api/gazebo::CustomBatteryConsumerROSPlugin/#protected-boolisdeviceon","text":"Flag to signal whether a specific device is running.","title":"protected boolisDeviceOn"},{"location":"packages/uuv_simulator/docs/api/gazebo::CustomBatteryConsumerROSPlugin/#protected-doublepowerload","text":"Power load in W.","title":"protected doublepowerLoad"},{"location":"packages/uuv_simulator/docs/api/gazebo::CustomBatteryConsumerROSPlugin/#protected-intconsumerid","text":"Battery consumer ID.","title":"protected intconsumerID"},{"location":"packages/uuv_simulator/docs/api/gazebo::CustomBatteryConsumerROSPlugin/#protected-stdstringlinkname","text":"Link name.","title":"protected std::stringlinkName"},{"location":"packages/uuv_simulator/docs/api/gazebo::CustomBatteryConsumerROSPlugin/#protected-stdstringbatteryname","text":"Battery model name.","title":"protected std::stringbatteryName"},{"location":"packages/uuv_simulator/docs/api/gazebo::CustomBatteryConsumerROSPlugin/#protected-eventconnectionptrrospublishconnection","text":"Connection for callbacks on update world.","title":"protected event::ConnectionPtrrosPublishConnection"},{"location":"packages/uuv_simulator/docs/api/gazebo::CustomBatteryConsumerROSPlugin/#protected-voidupdatedevicestateconst-std_msgsboolconstptr-_msg","text":"Callback for the device state topic subscriber.","title":"protected voidUpdateDeviceState(const std_msgs::Bool::ConstPtr &amp; _msg)"},{"location":"packages/uuv_simulator/docs/api/gazebo::CustomBatteryConsumerROSPlugin/#protected-voidupdatepowerloaddouble-_powerload","text":"Update power load.","title":"protected voidUpdatePowerLoad(double _powerLoad)"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/","text":"class gazebo::DVLROSPlugin \u00b6 class gazebo :: DVLROSPlugin : public gazebo :: ROSBaseModelPlugin TODO: Modify computation of velocity using the beams. Summary \u00b6 Members Descriptions public DVLROSPlugin () Class constructor. public virtual ~DVLROSPlugin () Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) Load the plugin. protected bool beamTransformsInitialized protected double altitude Measured altitude in meters. protected uuv_sensor_ros_plugins_msgs::DVL dvlROSMsg ROS DVL message. protected std::vector< uuv_sensor_ros_plugins_msgs::DVLBeam > dvlBeamMsgs protected ros::Publisher twistPub ROS publisher for twist data. protected geometry_msgs::TwistWithCovarianceStamped twistROSMsg Store pose message since many attributes do not change (cov.). protected std::vector< std::string > beamsLinkNames List of beam links. protected std::vector< std::string > beamTopics List of beam topics. protected std::vector< ignition::math::Pose3d > beamPoses List of poses of each beam wrt to the DVL frame. protected boost::shared_ptr< message_filters::TimeSynchronizer< sensor_msgs::Range, sensor_msgs::Range, sensor_msgs::Range, sensor_msgs::Range > > syncBeamMessages protected boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub0 protected boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub1 protected boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub2 protected boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub3 protected tf::TransformListener transformListener protected virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. protected void OnBeamCallback (const sensor_msgs::RangeConstPtr & _range0,const sensor_msgs::RangeConstPtr & _range1,const sensor_msgs::RangeConstPtr & _range2,const sensor_msgs::RangeConstPtr & _range3) Get beam Range message update. protected bool UpdateBeamTransforms () Updates the poses of each beam wrt the DVL frame. Members \u00b6 public DVLROSPlugin () \u00b6 Class constructor. public virtual ~DVLROSPlugin () \u00b6 Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) \u00b6 Load the plugin. protected bool beamTransformsInitialized \u00b6 protected double altitude \u00b6 Measured altitude in meters. protected uuv_sensor_ros_plugins_msgs::DVL dvlROSMsg \u00b6 ROS DVL message. protected std::vector< uuv_sensor_ros_plugins_msgs::DVLBeam > dvlBeamMsgs \u00b6 protected ros::Publisher twistPub \u00b6 ROS publisher for twist data. protected geometry_msgs::TwistWithCovarianceStamped twistROSMsg \u00b6 Store pose message since many attributes do not change (cov.). protected std::vector< std::string > beamsLinkNames \u00b6 List of beam links. protected std::vector< std::string > beamTopics \u00b6 List of beam topics. protected std::vector< ignition::math::Pose3d > beamPoses \u00b6 List of poses of each beam wrt to the DVL frame. protected boost::shared_ptr< message_filters::TimeSynchronizer< sensor_msgs::Range, sensor_msgs::Range, sensor_msgs::Range, sensor_msgs::Range > > syncBeamMessages \u00b6 protected boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub0 \u00b6 protected boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub1 \u00b6 protected boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub2 \u00b6 protected boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub3 \u00b6 protected tf::TransformListener transformListener \u00b6 protected virtual bool OnUpdate (const common::UpdateInfo & _info) \u00b6 Update sensor measurement. protected void OnBeamCallback (const sensor_msgs::RangeConstPtr & _range0,const sensor_msgs::RangeConstPtr & _range1,const sensor_msgs::RangeConstPtr & _range2,const sensor_msgs::RangeConstPtr & _range3) \u00b6 Get beam Range message update. protected bool UpdateBeamTransforms () \u00b6 Updates the poses of each beam wrt the DVL frame.","title":"DVLROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#class-gazebodvlrosplugin","text":"class gazebo :: DVLROSPlugin : public gazebo :: ROSBaseModelPlugin TODO: Modify computation of velocity using the beams.","title":"class gazebo::DVLROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#summary","text":"Members Descriptions public DVLROSPlugin () Class constructor. public virtual ~DVLROSPlugin () Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) Load the plugin. protected bool beamTransformsInitialized protected double altitude Measured altitude in meters. protected uuv_sensor_ros_plugins_msgs::DVL dvlROSMsg ROS DVL message. protected std::vector< uuv_sensor_ros_plugins_msgs::DVLBeam > dvlBeamMsgs protected ros::Publisher twistPub ROS publisher for twist data. protected geometry_msgs::TwistWithCovarianceStamped twistROSMsg Store pose message since many attributes do not change (cov.). protected std::vector< std::string > beamsLinkNames List of beam links. protected std::vector< std::string > beamTopics List of beam topics. protected std::vector< ignition::math::Pose3d > beamPoses List of poses of each beam wrt to the DVL frame. protected boost::shared_ptr< message_filters::TimeSynchronizer< sensor_msgs::Range, sensor_msgs::Range, sensor_msgs::Range, sensor_msgs::Range > > syncBeamMessages protected boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub0 protected boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub1 protected boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub2 protected boost::shared_ptr< message_filters::Subscriber< sensor_msgs::Range > > beamSub3 protected tf::TransformListener transformListener protected virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. protected void OnBeamCallback (const sensor_msgs::RangeConstPtr & _range0,const sensor_msgs::RangeConstPtr & _range1,const sensor_msgs::RangeConstPtr & _range2,const sensor_msgs::RangeConstPtr & _range3) Get beam Range message update. protected bool UpdateBeamTransforms () Updates the poses of each beam wrt the DVL frame.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#publicdvlrosplugin","text":"Class constructor.","title":"publicDVLROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#public-virtualdvlrosplugin","text":"Class destructor.","title":"public virtual~DVLROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#public-virtual-voidloadphysicsmodelptr-_modelsdfelementptr-_sdf","text":"Load the plugin.","title":"public virtual voidLoad(physics::ModelPtr _model,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#protected-boolbeamtransformsinitialized","text":"","title":"protected boolbeamTransformsInitialized"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#protected-doublealtitude","text":"Measured altitude in meters.","title":"protected doublealtitude"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#protected-uuv_sensor_ros_plugins_msgsdvldvlrosmsg","text":"ROS DVL message.","title":"protected uuv_sensor_ros_plugins_msgs::DVLdvlROSMsg"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#protected-stdvector-uuv_sensor_ros_plugins_msgsdvlbeam-dvlbeammsgs","text":"","title":"protected std::vector&lt; uuv_sensor_ros_plugins_msgs::DVLBeam &gt;dvlBeamMsgs"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#protected-rospublishertwistpub","text":"ROS publisher for twist data.","title":"protected ros::PublishertwistPub"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#protected-geometry_msgstwistwithcovariancestampedtwistrosmsg","text":"Store pose message since many attributes do not change (cov.).","title":"protected geometry_msgs::TwistWithCovarianceStampedtwistROSMsg"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#protected-stdvector-stdstring-beamslinknames","text":"List of beam links.","title":"protected std::vector&lt; std::string &gt;beamsLinkNames"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#protected-stdvector-stdstring-beamtopics","text":"List of beam topics.","title":"protected std::vector&lt; std::string &gt;beamTopics"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#protected-stdvector-ignitionmathpose3d-beamposes","text":"List of poses of each beam wrt to the DVL frame.","title":"protected std::vector&lt; ignition::math::Pose3d &gt;beamPoses"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#protected-boostshared_ptr-message_filterstimesynchronizer-sensor_msgsrange-sensor_msgsrange-sensor_msgsrange-sensor_msgsrange-syncbeammessages","text":"","title":"protected boost::shared_ptr&lt; message_filters::TimeSynchronizer&lt; sensor_msgs::Range, sensor_msgs::Range, sensor_msgs::Range, sensor_msgs::Range &gt; &gt;syncBeamMessages"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#protected-boostshared_ptr-message_filterssubscriber-sensor_msgsrange-beamsub0","text":"","title":"protected boost::shared_ptr&lt; message_filters::Subscriber&lt; sensor_msgs::Range &gt; &gt;beamSub0"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#protected-boostshared_ptr-message_filterssubscriber-sensor_msgsrange-beamsub1","text":"","title":"protected boost::shared_ptr&lt; message_filters::Subscriber&lt; sensor_msgs::Range &gt; &gt;beamSub1"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#protected-boostshared_ptr-message_filterssubscriber-sensor_msgsrange-beamsub2","text":"","title":"protected boost::shared_ptr&lt; message_filters::Subscriber&lt; sensor_msgs::Range &gt; &gt;beamSub2"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#protected-boostshared_ptr-message_filterssubscriber-sensor_msgsrange-beamsub3","text":"","title":"protected boost::shared_ptr&lt; message_filters::Subscriber&lt; sensor_msgs::Range &gt; &gt;beamSub3"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#protected-tftransformlistenertransformlistener","text":"","title":"protected tf::TransformListenertransformListener"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#protected-virtual-boolonupdateconst-commonupdateinfo-_info","text":"Update sensor measurement.","title":"protected virtual boolOnUpdate(const common::UpdateInfo &amp; _info)"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#protected-voidonbeamcallbackconst-sensor_msgsrangeconstptr-_range0const-sensor_msgsrangeconstptr-_range1const-sensor_msgsrangeconstptr-_range2const-sensor_msgsrangeconstptr-_range3","text":"Get beam Range message update.","title":"protected voidOnBeamCallback(const sensor_msgs::RangeConstPtr &amp; _range0,const sensor_msgs::RangeConstPtr &amp; _range1,const sensor_msgs::RangeConstPtr &amp; _range2,const sensor_msgs::RangeConstPtr &amp; _range3)"},{"location":"packages/uuv_simulator/docs/api/gazebo::DVLROSPlugin/#protected-boolupdatebeamtransforms","text":"Updates the poses of each beam wrt the DVL frame.","title":"protected boolUpdateBeamTransforms()"},{"location":"packages/uuv_simulator/docs/api/gazebo::Dynamics/","text":"class gazebo::Dynamics \u00b6 Abstract base class for thruster dynamics. Summary \u00b6 Members Descriptions public inline virtual ~Dynamics () Destructor. public std::string GetType () Return (derived) type of thruster dynamics. public double update (double _cmd,double _t) Update the dynamic model. public virtual void Reset () protected double prevTime Time of last state update. protected double state Latest state. protected inline Dynamics () Protected constructor: Use the factory for object creation. Members \u00b6 public inline virtual ~Dynamics () \u00b6 Destructor. public std::string GetType () \u00b6 Return (derived) type of thruster dynamics. public double update (double _cmd,double _t) \u00b6 Update the dynamic model. Parameters \u00b6 _cmd The commanded value. _t Time stamp of command. public virtual void Reset () \u00b6 protected double prevTime \u00b6 Time of last state update. protected double state \u00b6 Latest state. protected inline Dynamics () \u00b6 Protected constructor: Use the factory for object creation.","title":"Dynamics"},{"location":"packages/uuv_simulator/docs/api/gazebo::Dynamics/#class-gazebodynamics","text":"Abstract base class for thruster dynamics.","title":"class gazebo::Dynamics"},{"location":"packages/uuv_simulator/docs/api/gazebo::Dynamics/#summary","text":"Members Descriptions public inline virtual ~Dynamics () Destructor. public std::string GetType () Return (derived) type of thruster dynamics. public double update (double _cmd,double _t) Update the dynamic model. public virtual void Reset () protected double prevTime Time of last state update. protected double state Latest state. protected inline Dynamics () Protected constructor: Use the factory for object creation.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::Dynamics/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::Dynamics/#public-inline-virtualdynamics","text":"Destructor.","title":"public inline virtual~Dynamics()"},{"location":"packages/uuv_simulator/docs/api/gazebo::Dynamics/#public-stdstringgettype","text":"Return (derived) type of thruster dynamics.","title":"public std::stringGetType()"},{"location":"packages/uuv_simulator/docs/api/gazebo::Dynamics/#public-doubleupdatedouble-_cmddouble-_t","text":"Update the dynamic model.","title":"public doubleupdate(double _cmd,double _t)"},{"location":"packages/uuv_simulator/docs/api/gazebo::Dynamics/#parameters","text":"_cmd The commanded value. _t Time stamp of command.","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::Dynamics/#public-virtual-voidreset","text":"","title":"public virtual voidReset()"},{"location":"packages/uuv_simulator/docs/api/gazebo::Dynamics/#protected-doubleprevtime","text":"Time of last state update.","title":"protected doubleprevTime"},{"location":"packages/uuv_simulator/docs/api/gazebo::Dynamics/#protected-doublestate","text":"Latest state.","title":"protected doublestate"},{"location":"packages/uuv_simulator/docs/api/gazebo::Dynamics/#protected-inlinedynamics","text":"Protected constructor: Use the factory for object creation.","title":"protected inlineDynamics()"},{"location":"packages/uuv_simulator/docs/api/gazebo::DynamicsFactory/","text":"class gazebo::DynamicsFactory \u00b6 Factory singleton class that creates a ThrusterDynamics from sdf. Summary \u00b6 Members Descriptions public Dynamics * CreateDynamics (sdf::ElementPtr _sdf) Create ThrusterDynamics object according to its sdf Description. public bool RegisterCreator (const std::string & _identifier,DynamicsCreator _creator) Register a ThrusterDynamic class with its creator. Members \u00b6 public Dynamics * CreateDynamics (sdf::ElementPtr _sdf) \u00b6 Create ThrusterDynamics object according to its sdf Description. public bool RegisterCreator (const std::string & _identifier,DynamicsCreator _creator) \u00b6 Register a ThrusterDynamic class with its creator.","title":"DynamicsFactory"},{"location":"packages/uuv_simulator/docs/api/gazebo::DynamicsFactory/#class-gazebodynamicsfactory","text":"Factory singleton class that creates a ThrusterDynamics from sdf.","title":"class gazebo::DynamicsFactory"},{"location":"packages/uuv_simulator/docs/api/gazebo::DynamicsFactory/#summary","text":"Members Descriptions public Dynamics * CreateDynamics (sdf::ElementPtr _sdf) Create ThrusterDynamics object according to its sdf Description. public bool RegisterCreator (const std::string & _identifier,DynamicsCreator _creator) Register a ThrusterDynamic class with its creator.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::DynamicsFactory/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::DynamicsFactory/#publicdynamicscreatedynamicssdfelementptr-_sdf","text":"Create ThrusterDynamics object according to its sdf Description.","title":"publicDynamics*CreateDynamics(sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::DynamicsFactory/#public-boolregistercreatorconst-stdstring-_identifierdynamicscreator-_creator","text":"Register a ThrusterDynamic class with its creator.","title":"public boolRegisterCreator(const std::string &amp; _identifier,DynamicsCreator _creator)"},{"location":"packages/uuv_simulator/docs/api/gazebo::DynamicsFirstOrder/","text":"class gazebo::DynamicsFirstOrder \u00b6 class gazebo :: DynamicsFirstOrder : public gazebo :: Dynamics First-order dynamic system. Summary \u00b6 Members Descriptions public inline virtual std::string GetType () Return (derived) type of dynamic system. public virtual double update (double _cmd,double _t) Update dynamical model given input value and time. Members \u00b6 public inline virtual std::string GetType () \u00b6 Return (derived) type of dynamic system. public virtual double update (double _cmd,double _t) \u00b6 Update dynamical model given input value and time.","title":"DynamicsFirstOrder"},{"location":"packages/uuv_simulator/docs/api/gazebo::DynamicsFirstOrder/#class-gazebodynamicsfirstorder","text":"class gazebo :: DynamicsFirstOrder : public gazebo :: Dynamics First-order dynamic system.","title":"class gazebo::DynamicsFirstOrder"},{"location":"packages/uuv_simulator/docs/api/gazebo::DynamicsFirstOrder/#summary","text":"Members Descriptions public inline virtual std::string GetType () Return (derived) type of dynamic system. public virtual double update (double _cmd,double _t) Update dynamical model given input value and time.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::DynamicsFirstOrder/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::DynamicsFirstOrder/#public-inline-virtual-stdstringgettype","text":"Return (derived) type of dynamic system.","title":"public inline virtual std::stringGetType()"},{"location":"packages/uuv_simulator/docs/api/gazebo::DynamicsFirstOrder/#public-virtual-doubleupdatedouble-_cmddouble-_t","text":"Update dynamical model given input value and time.","title":"public virtual doubleupdate(double _cmd,double _t)"},{"location":"packages/uuv_simulator/docs/api/gazebo::DynamicsZeroOrder/","text":"class gazebo::DynamicsZeroOrder \u00b6 class gazebo :: DynamicsZeroOrder : public gazebo :: Dynamics Trivial (no dynamics) zero-order dynamic system. Summary \u00b6 Members Descriptions public inline virtual std::string GetType () Return (derived) type of dynamic system. public virtual double update (double _cmd,double _t) Update dynamical model given input value and time. Members \u00b6 public inline virtual std::string GetType () \u00b6 Return (derived) type of dynamic system. public virtual double update (double _cmd,double _t) \u00b6 Update dynamical model given input value and time.","title":"DynamicsZeroOrder"},{"location":"packages/uuv_simulator/docs/api/gazebo::DynamicsZeroOrder/#class-gazebodynamicszeroorder","text":"class gazebo :: DynamicsZeroOrder : public gazebo :: Dynamics Trivial (no dynamics) zero-order dynamic system.","title":"class gazebo::DynamicsZeroOrder"},{"location":"packages/uuv_simulator/docs/api/gazebo::DynamicsZeroOrder/#summary","text":"Members Descriptions public inline virtual std::string GetType () Return (derived) type of dynamic system. public virtual double update (double _cmd,double _t) Update dynamical model given input value and time.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::DynamicsZeroOrder/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::DynamicsZeroOrder/#public-inline-virtual-stdstringgettype","text":"Return (derived) type of dynamic system.","title":"public inline virtual std::stringGetType()"},{"location":"packages/uuv_simulator/docs/api/gazebo::DynamicsZeroOrder/#public-virtual-doubleupdatedouble-_cmddouble-_t","text":"Update dynamical model given input value and time.","title":"public virtual doubleupdate(double _cmd,double _t)"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/","text":"class gazebo::FinPlugin \u00b6 class gazebo :: FinPlugin : public ModelPlugin Summary \u00b6 Members Descriptions public FinPlugin () Constructor. public virtual ~FinPlugin () Destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) public virtual void Init () public void OnUpdate (const common::UpdateInfo & _info) Update the simulation state. protected std::shared_ptr< Dynamics > dynamics Fin dynamic model. protected std::shared_ptr< LiftDrag > liftdrag Lift&Drag model. protected event::ConnectionPtr updateConnection Update event. protected transport::NodePtr node Gazebo node. protected physics::JointPtr joint The fin joint. protected physics::LinkPtr link The fin link. protected transport::SubscriberPtr commandSubscriber Subscriber to the reference signal topic. protected transport::PublisherPtr anglePublisher Publisher to the output thrust topic. protected ignition::math::Vector3d finForce Force component calculated from the lift and drag module. protected double inputCommand Latest input command. protected int finID Fin ID. protected std::string topicPrefix Topic prefix. protected double angle Latest fin angle in [rad]. protected common::Time angleStamp Time stamp of latest thrust force. protected transport::SubscriberPtr currentSubscriber Subcriber to current message. protected ignition::math::Vector3d currentVelocity Current velocity vector read from topic. protected void UpdateInput ( ConstDoublePtr & _msg) Callback for the input topic subscriber. protected void UpdateCurrentVelocity (ConstVector3dPtr & _msg) Reads current velocity topic. Members \u00b6 public FinPlugin () \u00b6 Constructor. public virtual ~FinPlugin () \u00b6 Destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) \u00b6 public virtual void Init () \u00b6 public void OnUpdate (const common::UpdateInfo & _info) \u00b6 Update the simulation state. Parameters \u00b6 _info Information used in the update event. protected std::shared_ptr< Dynamics > dynamics \u00b6 Fin dynamic model. protected std::shared_ptr< LiftDrag > liftdrag \u00b6 Lift&Drag model. protected event::ConnectionPtr updateConnection \u00b6 Update event. protected transport::NodePtr node \u00b6 Gazebo node. protected physics::JointPtr joint \u00b6 The fin joint. protected physics::LinkPtr link \u00b6 The fin link. protected transport::SubscriberPtr commandSubscriber \u00b6 Subscriber to the reference signal topic. protected transport::PublisherPtr anglePublisher \u00b6 Publisher to the output thrust topic. protected ignition::math::Vector3d finForce \u00b6 Force component calculated from the lift and drag module. protected double inputCommand \u00b6 Latest input command. protected int finID \u00b6 Fin ID. protected std::string topicPrefix \u00b6 Topic prefix. protected double angle \u00b6 Latest fin angle in [rad]. protected common::Time angleStamp \u00b6 Time stamp of latest thrust force. protected transport::SubscriberPtr currentSubscriber \u00b6 Subcriber to current message. protected ignition::math::Vector3d currentVelocity \u00b6 Current velocity vector read from topic. protected void UpdateInput ( ConstDoublePtr & _msg) \u00b6 Callback for the input topic subscriber. protected void UpdateCurrentVelocity (ConstVector3dPtr & _msg) \u00b6 Reads current velocity topic.","title":"FinPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#class-gazebofinplugin","text":"class gazebo :: FinPlugin : public ModelPlugin","title":"class gazebo::FinPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#summary","text":"Members Descriptions public FinPlugin () Constructor. public virtual ~FinPlugin () Destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) public virtual void Init () public void OnUpdate (const common::UpdateInfo & _info) Update the simulation state. protected std::shared_ptr< Dynamics > dynamics Fin dynamic model. protected std::shared_ptr< LiftDrag > liftdrag Lift&Drag model. protected event::ConnectionPtr updateConnection Update event. protected transport::NodePtr node Gazebo node. protected physics::JointPtr joint The fin joint. protected physics::LinkPtr link The fin link. protected transport::SubscriberPtr commandSubscriber Subscriber to the reference signal topic. protected transport::PublisherPtr anglePublisher Publisher to the output thrust topic. protected ignition::math::Vector3d finForce Force component calculated from the lift and drag module. protected double inputCommand Latest input command. protected int finID Fin ID. protected std::string topicPrefix Topic prefix. protected double angle Latest fin angle in [rad]. protected common::Time angleStamp Time stamp of latest thrust force. protected transport::SubscriberPtr currentSubscriber Subcriber to current message. protected ignition::math::Vector3d currentVelocity Current velocity vector read from topic. protected void UpdateInput ( ConstDoublePtr & _msg) Callback for the input topic subscriber. protected void UpdateCurrentVelocity (ConstVector3dPtr & _msg) Reads current velocity topic.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#publicfinplugin","text":"Constructor.","title":"publicFinPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#public-virtualfinplugin","text":"Destructor.","title":"public virtual~FinPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#public-virtual-voidloadphysicsmodelptr-_modelsdfelementptr-_sdf","text":"","title":"public virtual voidLoad(physics::ModelPtr _model,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#public-virtual-voidinit","text":"","title":"public virtual voidInit()"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#public-voidonupdateconst-commonupdateinfo-_info","text":"Update the simulation state.","title":"public voidOnUpdate(const common::UpdateInfo &amp; _info)"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#parameters","text":"_info Information used in the update event.","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#protected-stdshared_ptrdynamicsdynamics","text":"Fin dynamic model.","title":"protected std::shared_ptr&lt;Dynamics&gt;dynamics"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#protected-stdshared_ptrliftdragliftdrag","text":"Lift&Drag model.","title":"protected std::shared_ptr&lt;LiftDrag&gt;liftdrag"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#protected-eventconnectionptrupdateconnection","text":"Update event.","title":"protected event::ConnectionPtrupdateConnection"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#protected-transportnodeptrnode","text":"Gazebo node.","title":"protected transport::NodePtrnode"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#protected-physicsjointptrjoint","text":"The fin joint.","title":"protected physics::JointPtrjoint"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#protected-physicslinkptrlink","text":"The fin link.","title":"protected physics::LinkPtrlink"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#protected-transportsubscriberptrcommandsubscriber","text":"Subscriber to the reference signal topic.","title":"protected transport::SubscriberPtrcommandSubscriber"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#protected-transportpublisherptranglepublisher","text":"Publisher to the output thrust topic.","title":"protected transport::PublisherPtranglePublisher"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#protected-ignitionmathvector3dfinforce","text":"Force component calculated from the lift and drag module.","title":"protected ignition::math::Vector3dfinForce"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#protected-doubleinputcommand","text":"Latest input command.","title":"protected doubleinputCommand"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#protected-intfinid","text":"Fin ID.","title":"protected intfinID"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#protected-stdstringtopicprefix","text":"Topic prefix.","title":"protected std::stringtopicPrefix"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#protected-doubleangle","text":"Latest fin angle in [rad].","title":"protected doubleangle"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#protected-commontimeanglestamp","text":"Time stamp of latest thrust force.","title":"protected common::TimeangleStamp"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#protected-transportsubscriberptrcurrentsubscriber","text":"Subcriber to current message.","title":"protected transport::SubscriberPtrcurrentSubscriber"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#protected-ignitionmathvector3dcurrentvelocity","text":"Current velocity vector read from topic.","title":"protected ignition::math::Vector3dcurrentVelocity"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#protected-voidupdateinputconstdoubleptr-_msg","text":"Callback for the input topic subscriber.","title":"protected voidUpdateInput(ConstDoublePtr&amp; _msg)"},{"location":"packages/uuv_simulator/docs/api/gazebo::FinPlugin/#protected-voidupdatecurrentvelocityconstvector3dptr-_msg","text":"Reads current velocity topic.","title":"protected voidUpdateCurrentVelocity(ConstVector3dPtr &amp; _msg)"},{"location":"packages/uuv_simulator/docs/api/gazebo::GPSROSPlugin/","text":"class gazebo::GPSROSPlugin \u00b6 class gazebo :: GPSROSPlugin : public gazebo :: ROSBaseSensorPlugin Summary \u00b6 Members Descriptions public GPSROSPlugin () Class constructor. public virtual ~GPSROSPlugin () Class destructor. public virtual void Load (sensors::SensorPtr _parent,sdf::ElementPtr _sdf) Load module and read parameters from SDF. public bool OnUpdateGPS () Update GPS ROS message. protected sensors::GpsSensorPtr gazeboGPSSensor Pointer to the parent sensor. protected sensor_msgs::NavSatFix gpsMessage Output GPS ROS message. Members \u00b6 public GPSROSPlugin () \u00b6 Class constructor. public virtual ~GPSROSPlugin () \u00b6 Class destructor. public virtual void Load (sensors::SensorPtr _parent,sdf::ElementPtr _sdf) \u00b6 Load module and read parameters from SDF. public bool OnUpdateGPS () \u00b6 Update GPS ROS message. protected sensors::GpsSensorPtr gazeboGPSSensor \u00b6 Pointer to the parent sensor. protected sensor_msgs::NavSatFix gpsMessage \u00b6 Output GPS ROS message.","title":"GPSROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::GPSROSPlugin/#class-gazebogpsrosplugin","text":"class gazebo :: GPSROSPlugin : public gazebo :: ROSBaseSensorPlugin","title":"class gazebo::GPSROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::GPSROSPlugin/#summary","text":"Members Descriptions public GPSROSPlugin () Class constructor. public virtual ~GPSROSPlugin () Class destructor. public virtual void Load (sensors::SensorPtr _parent,sdf::ElementPtr _sdf) Load module and read parameters from SDF. public bool OnUpdateGPS () Update GPS ROS message. protected sensors::GpsSensorPtr gazeboGPSSensor Pointer to the parent sensor. protected sensor_msgs::NavSatFix gpsMessage Output GPS ROS message.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::GPSROSPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::GPSROSPlugin/#publicgpsrosplugin","text":"Class constructor.","title":"publicGPSROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::GPSROSPlugin/#public-virtualgpsrosplugin","text":"Class destructor.","title":"public virtual~GPSROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::GPSROSPlugin/#public-virtual-voidloadsensorssensorptr-_parentsdfelementptr-_sdf","text":"Load module and read parameters from SDF.","title":"public virtual voidLoad(sensors::SensorPtr _parent,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::GPSROSPlugin/#public-boolonupdategps","text":"Update GPS ROS message.","title":"public boolOnUpdateGPS()"},{"location":"packages/uuv_simulator/docs/api/gazebo::GPSROSPlugin/#protected-sensorsgpssensorptrgazebogpssensor","text":"Pointer to the parent sensor.","title":"protected sensors::GpsSensorPtrgazeboGPSSensor"},{"location":"packages/uuv_simulator/docs/api/gazebo::GPSROSPlugin/#protected-sensor_msgsnavsatfixgpsmessage","text":"Output GPS ROS message.","title":"protected sensor_msgs::NavSatFixgpsMessage"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/","text":"class gazebo::GaussMarkovProcess \u00b6 Implementation of a Gauss-Markov process to model the current velocity and direction according to [1] [1] Fossen, Thor I. Handbook of marine craft hydrodynamics and motion control. John Wiley & Sons, 2011. Summary \u00b6 Members Descriptions public double var Process variable. public double mean Mean process value. public double min Minimum limit for the process variable. public double max Maximum limit for the process variable. public double mu Process constant, if zero, process becomes a random walk. public double noiseAmp Gaussian white noise amplitude. public double lastUpdate Timestamp for the last update. public GaussMarkovProcess () Class constructor. public void Reset () Resets the process parameters. public bool SetModel (double _mean,double _min,double _max,double _mu,double _noise) Sets all the necessary parameters for the computation. public bool SetMean (double _mean) Set mean process value. public double Update (double _time) Update function for a new time stamp. public void Print () Print current model paramters. Members \u00b6 public double var \u00b6 Process variable. public double mean \u00b6 Mean process value. public double min \u00b6 Minimum limit for the process variable. public double max \u00b6 Maximum limit for the process variable. public double mu \u00b6 Process constant, if zero, process becomes a random walk. public double noiseAmp \u00b6 Gaussian white noise amplitude. public double lastUpdate \u00b6 Timestamp for the last update. public GaussMarkovProcess () \u00b6 Class constructor. public void Reset () \u00b6 Resets the process parameters. public bool SetModel (double _mean,double _min,double _max,double _mu,double _noise) \u00b6 Sets all the necessary parameters for the computation. Parameters \u00b6 _mean Mean value _min Minimum limit _max Maximum limit _mu Process constant _noise Amplitude for the Gaussian white noise Returns \u00b6 True, if all parameters were valid public bool SetMean (double _mean) \u00b6 Set mean process value. Parameters \u00b6 _mean New mean value Returns \u00b6 True, if value inside the limit range public double Update (double _time) \u00b6 Update function for a new time stamp. Parameters \u00b6 _time Current time stamp public void Print () \u00b6 Print current model paramters.","title":"GaussMarkovProcess"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#class-gazebogaussmarkovprocess","text":"Implementation of a Gauss-Markov process to model the current velocity and direction according to [1] [1] Fossen, Thor I. Handbook of marine craft hydrodynamics and motion control. John Wiley & Sons, 2011.","title":"class gazebo::GaussMarkovProcess"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#summary","text":"Members Descriptions public double var Process variable. public double mean Mean process value. public double min Minimum limit for the process variable. public double max Maximum limit for the process variable. public double mu Process constant, if zero, process becomes a random walk. public double noiseAmp Gaussian white noise amplitude. public double lastUpdate Timestamp for the last update. public GaussMarkovProcess () Class constructor. public void Reset () Resets the process parameters. public bool SetModel (double _mean,double _min,double _max,double _mu,double _noise) Sets all the necessary parameters for the computation. public bool SetMean (double _mean) Set mean process value. public double Update (double _time) Update function for a new time stamp. public void Print () Print current model paramters.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#public-doublevar","text":"Process variable.","title":"public doublevar"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#public-doublemean","text":"Mean process value.","title":"public doublemean"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#public-doublemin","text":"Minimum limit for the process variable.","title":"public doublemin"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#public-doublemax","text":"Maximum limit for the process variable.","title":"public doublemax"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#public-doublemu","text":"Process constant, if zero, process becomes a random walk.","title":"public doublemu"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#public-doublenoiseamp","text":"Gaussian white noise amplitude.","title":"public doublenoiseAmp"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#public-doublelastupdate","text":"Timestamp for the last update.","title":"public doublelastUpdate"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#publicgaussmarkovprocess","text":"Class constructor.","title":"publicGaussMarkovProcess()"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#public-voidreset","text":"Resets the process parameters.","title":"public voidReset()"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#public-boolsetmodeldouble-_meandouble-_mindouble-_maxdouble-_mudouble-_noise","text":"Sets all the necessary parameters for the computation.","title":"public boolSetModel(double _mean,double _min,double _max,double _mu,double _noise)"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#parameters","text":"_mean Mean value _min Minimum limit _max Maximum limit _mu Process constant _noise Amplitude for the Gaussian white noise","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#returns","text":"True, if all parameters were valid","title":"Returns"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#public-boolsetmeandouble-_mean","text":"Set mean process value.","title":"public boolSetMean(double _mean)"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#parameters_1","text":"_mean New mean value","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#returns_1","text":"True, if value inside the limit range","title":"Returns"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#public-doubleupdatedouble-_time","text":"Update function for a new time stamp.","title":"public doubleUpdate(double _time)"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#parameters_2","text":"_time Current time stamp","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::GaussMarkovProcess/#public-voidprint","text":"Print current model paramters.","title":"public voidPrint()"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/","text":"class gazebo::GazeboRosImageSonar \u00b6 class gazebo :: GazeboRosImageSonar : public SensorPlugin : private GazeboRosCameraUtils Summary \u00b6 Members Descriptions public GazeboRosImageSonar () Constructor. public ~GazeboRosImageSonar () Destructor. public virtual void Load (sensors::SensorPtr _parent,sdf::ElementPtr _sdf) Load the plugin. public virtual void Advertise () Advertise point cloud and depth image. protected ros::Publisher depth_image_camera_info_pub_ protected unsigned int width protected unsigned int height protected unsigned int depth protected std::string format protected cv::Mat dist_matrix_ protected std::vector< std::vector< int > > angle_range_indices_ protected std::vector< int > angle_nbr_indices_ protected sensors::DepthCameraSensorPtr parentSensor protected rendering::DepthCameraPtr depthCamera protected virtual void OnNewDepthFrame (const float * _image,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string & _format) Update the controller. protected virtual void OnNewRGBPointCloud (const float * _pcd,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string & _format) Update the controller. protected virtual void OnNewImageFrame (const unsigned char * _image,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string & _format) Update the controller. protected virtual void PublishCameraInfo () Members \u00b6 public GazeboRosImageSonar () \u00b6 Constructor. Parameters \u00b6 parent The parent entity, must be a Model or a Sensor public ~GazeboRosImageSonar () \u00b6 Destructor. public virtual void Load (sensors::SensorPtr _parent,sdf::ElementPtr _sdf) \u00b6 Load the plugin. Parameters \u00b6 take in SDF root element public virtual void Advertise () \u00b6 Advertise point cloud and depth image. protected ros::Publisher depth_image_camera_info_pub_ \u00b6 protected unsigned int width \u00b6 protected unsigned int height \u00b6 protected unsigned int depth \u00b6 protected std::string format \u00b6 protected cv::Mat dist_matrix_ \u00b6 protected std::vector< std::vector< int > > angle_range_indices_ \u00b6 protected std::vector< int > angle_nbr_indices_ \u00b6 protected sensors::DepthCameraSensorPtr parentSensor \u00b6 protected rendering::DepthCameraPtr depthCamera \u00b6 protected virtual void OnNewDepthFrame (const float * _image,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string & _format) \u00b6 Update the controller. protected virtual void OnNewRGBPointCloud (const float * _pcd,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string & _format) \u00b6 Update the controller. protected virtual void OnNewImageFrame (const unsigned char * _image,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string & _format) \u00b6 Update the controller. protected virtual void PublishCameraInfo () \u00b6","title":"GazeboRosImageSonar"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#class-gazebogazeborosimagesonar","text":"class gazebo :: GazeboRosImageSonar : public SensorPlugin : private GazeboRosCameraUtils","title":"class gazebo::GazeboRosImageSonar"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#summary","text":"Members Descriptions public GazeboRosImageSonar () Constructor. public ~GazeboRosImageSonar () Destructor. public virtual void Load (sensors::SensorPtr _parent,sdf::ElementPtr _sdf) Load the plugin. public virtual void Advertise () Advertise point cloud and depth image. protected ros::Publisher depth_image_camera_info_pub_ protected unsigned int width protected unsigned int height protected unsigned int depth protected std::string format protected cv::Mat dist_matrix_ protected std::vector< std::vector< int > > angle_range_indices_ protected std::vector< int > angle_nbr_indices_ protected sensors::DepthCameraSensorPtr parentSensor protected rendering::DepthCameraPtr depthCamera protected virtual void OnNewDepthFrame (const float * _image,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string & _format) Update the controller. protected virtual void OnNewRGBPointCloud (const float * _pcd,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string & _format) Update the controller. protected virtual void OnNewImageFrame (const unsigned char * _image,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string & _format) Update the controller. protected virtual void PublishCameraInfo ()","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#publicgazeborosimagesonar","text":"Constructor.","title":"publicGazeboRosImageSonar()"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#parameters","text":"parent The parent entity, must be a Model or a Sensor","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#publicgazeborosimagesonar_1","text":"Destructor.","title":"public~GazeboRosImageSonar()"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#public-virtual-voidloadsensorssensorptr-_parentsdfelementptr-_sdf","text":"Load the plugin.","title":"public virtual voidLoad(sensors::SensorPtr _parent,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#parameters_1","text":"take in SDF root element","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#public-virtual-voidadvertise","text":"Advertise point cloud and depth image.","title":"public virtual voidAdvertise()"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#protected-rospublisherdepth_image_camera_info_pub_","text":"","title":"protected ros::Publisherdepth_image_camera_info_pub_"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#protected-unsigned-intwidth","text":"","title":"protected unsigned intwidth"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#protected-unsigned-intheight","text":"","title":"protected unsigned intheight"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#protected-unsigned-intdepth","text":"","title":"protected unsigned intdepth"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#protected-stdstringformat","text":"","title":"protected std::stringformat"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#protected-cvmatdist_matrix_","text":"","title":"protected cv::Matdist_matrix_"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#protected-stdvector-stdvector-int-angle_range_indices_","text":"","title":"protected std::vector&lt; std::vector&lt; int &gt; &gt;angle_range_indices_"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#protected-stdvector-int-angle_nbr_indices_","text":"","title":"protected std::vector&lt; int &gt;angle_nbr_indices_"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#protected-sensorsdepthcamerasensorptrparentsensor","text":"","title":"protected sensors::DepthCameraSensorPtrparentSensor"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#protected-renderingdepthcameraptrdepthcamera","text":"","title":"protected rendering::DepthCameraPtrdepthCamera"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#protected-virtual-voidonnewdepthframeconst-float-_imageunsigned-int-_widthunsigned-int-_heightunsigned-int-_depthconst-stdstring-_format","text":"Update the controller.","title":"protected virtual voidOnNewDepthFrame(const float * _image,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string &amp; _format)"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#protected-virtual-voidonnewrgbpointcloudconst-float-_pcdunsigned-int-_widthunsigned-int-_heightunsigned-int-_depthconst-stdstring-_format","text":"Update the controller.","title":"protected virtual voidOnNewRGBPointCloud(const float * _pcd,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string &amp; _format)"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#protected-virtual-voidonnewimageframeconst-unsigned-char-_imageunsigned-int-_widthunsigned-int-_heightunsigned-int-_depthconst-stdstring-_format","text":"Update the controller.","title":"protected virtual voidOnNewImageFrame(const unsigned char * _image,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string &amp; _format)"},{"location":"packages/uuv_simulator/docs/api/gazebo::GazeboRosImageSonar/#protected-virtual-voidpublishcamerainfo","text":"","title":"protected virtual voidPublishCameraInfo()"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMBox/","text":"class gazebo::HMBox \u00b6 class gazebo :: HMBox : public gazebo :: HMFossen Class containing the methods and attributes for a hydrodynamic model for a box in the fluid. Summary \u00b6 Members Descriptions public inline virtual std::string GetType () Return (derived) type of hydrodynamic model. public virtual void Print (std::string _paramName,std::string _message) Prints parameters. protected double Cd Drag coefficient. protected double length Length of the box. protected double width Width of the box. protected double height Height of the box. protected HMBox (sdf::ElementPtr _sdf,physics::LinkPtr _link) Constructor. Members \u00b6 public inline virtual std::string GetType () \u00b6 Return (derived) type of hydrodynamic model. public virtual void Print (std::string _paramName,std::string _message) \u00b6 Prints parameters. protected double Cd \u00b6 Drag coefficient. protected double length \u00b6 Length of the box. protected double width \u00b6 Width of the box. protected double height \u00b6 Height of the box. protected HMBox (sdf::ElementPtr _sdf,physics::LinkPtr _link) \u00b6 Constructor.","title":"HMBox"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMBox/#class-gazebohmbox","text":"class gazebo :: HMBox : public gazebo :: HMFossen Class containing the methods and attributes for a hydrodynamic model for a box in the fluid.","title":"class gazebo::HMBox"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMBox/#summary","text":"Members Descriptions public inline virtual std::string GetType () Return (derived) type of hydrodynamic model. public virtual void Print (std::string _paramName,std::string _message) Prints parameters. protected double Cd Drag coefficient. protected double length Length of the box. protected double width Width of the box. protected double height Height of the box. protected HMBox (sdf::ElementPtr _sdf,physics::LinkPtr _link) Constructor.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMBox/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMBox/#public-inline-virtual-stdstringgettype","text":"Return (derived) type of hydrodynamic model.","title":"public inline virtual std::stringGetType()"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMBox/#public-virtual-voidprintstdstring-_paramnamestdstring-_message","text":"Prints parameters.","title":"public virtual voidPrint(std::string _paramName,std::string _message)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMBox/#protected-doublecd","text":"Drag coefficient.","title":"protected doubleCd"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMBox/#protected-doublelength","text":"Length of the box.","title":"protected doublelength"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMBox/#protected-doublewidth","text":"Width of the box.","title":"protected doublewidth"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMBox/#protected-doubleheight","text":"Height of the box.","title":"protected doubleheight"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMBox/#protectedhmboxsdfelementptr-_sdfphysicslinkptr-_link","text":"Constructor.","title":"protectedHMBox(sdf::ElementPtr _sdf,physics::LinkPtr _link)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMCylinder/","text":"class gazebo::HMCylinder \u00b6 class gazebo :: HMCylinder : public gazebo :: HMFossen Class containing the methods and attributes for a hydrodynamic model for a cylinder in the fluid. Summary \u00b6 Members Descriptions public inline virtual std::string GetType () Return (derived) type of hydrodynamic model. public virtual void Print (std::string _paramName,std::string _message) Prints parameters. protected double length Length of the cylinder. protected double radius Sphere radius. protected std::string axis Name of the unit rotation axis (just a tag for x, y or z) protected double dimRatio Ratio between length and diameter. protected double cdCirc Approximated drag coefficient for the circular area. protected double cdLength Approximated drag coefficient for the rectangular section. protected HMCylinder (sdf::ElementPtr _sdf,physics::LinkPtr _link) Members \u00b6 public inline virtual std::string GetType () \u00b6 Return (derived) type of hydrodynamic model. public virtual void Print (std::string _paramName,std::string _message) \u00b6 Prints parameters. protected double length \u00b6 Length of the cylinder. protected double radius \u00b6 Sphere radius. protected std::string axis \u00b6 Name of the unit rotation axis (just a tag for x, y or z) protected double dimRatio \u00b6 Ratio between length and diameter. protected double cdCirc \u00b6 Approximated drag coefficient for the circular area. protected double cdLength \u00b6 Approximated drag coefficient for the rectangular section. protected HMCylinder (sdf::ElementPtr _sdf,physics::LinkPtr _link) \u00b6","title":"HMCylinder"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMCylinder/#class-gazebohmcylinder","text":"class gazebo :: HMCylinder : public gazebo :: HMFossen Class containing the methods and attributes for a hydrodynamic model for a cylinder in the fluid.","title":"class gazebo::HMCylinder"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMCylinder/#summary","text":"Members Descriptions public inline virtual std::string GetType () Return (derived) type of hydrodynamic model. public virtual void Print (std::string _paramName,std::string _message) Prints parameters. protected double length Length of the cylinder. protected double radius Sphere radius. protected std::string axis Name of the unit rotation axis (just a tag for x, y or z) protected double dimRatio Ratio between length and diameter. protected double cdCirc Approximated drag coefficient for the circular area. protected double cdLength Approximated drag coefficient for the rectangular section. protected HMCylinder (sdf::ElementPtr _sdf,physics::LinkPtr _link)","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMCylinder/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMCylinder/#public-inline-virtual-stdstringgettype","text":"Return (derived) type of hydrodynamic model.","title":"public inline virtual std::stringGetType()"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMCylinder/#public-virtual-voidprintstdstring-_paramnamestdstring-_message","text":"Prints parameters.","title":"public virtual voidPrint(std::string _paramName,std::string _message)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMCylinder/#protected-doublelength","text":"Length of the cylinder.","title":"protected doublelength"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMCylinder/#protected-doubleradius","text":"Sphere radius.","title":"protected doubleradius"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMCylinder/#protected-stdstringaxis","text":"Name of the unit rotation axis (just a tag for x, y or z)","title":"protected std::stringaxis"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMCylinder/#protected-doubledimratio","text":"Ratio between length and diameter.","title":"protected doubledimRatio"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMCylinder/#protected-doublecdcirc","text":"Approximated drag coefficient for the circular area.","title":"protected doublecdCirc"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMCylinder/#protected-doublecdlength","text":"Approximated drag coefficient for the rectangular section.","title":"protected doublecdLength"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMCylinder/#protectedhmcylindersdfelementptr-_sdfphysicslinkptr-_link","text":"","title":"protectedHMCylinder(sdf::ElementPtr _sdf,physics::LinkPtr _link)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/","text":"class gazebo::HMFossen \u00b6 class gazebo :: HMFossen : public gazebo :: HydrodynamicModel Class containting the methods and attributes for a Fossen robot-like hydrodynamic model. The restoring forces are applied by the BuoyantObject class methods. Using the plugin for UUV models will use both this and the buoyant object class definitions, therefore the restoring forces were not inherited here. References: Fossen, Thor, \"Handbook of Marine Craft and Hydrodynamics and Motion Control\", 2011 Summary \u00b6 Members Descriptions public inline virtual std::string GetType () Return (derived) type of hydrodynamic model. public virtual void Print (std::string _paramName,std::string _message) Prints parameters. public virtual bool GetParam (std::string _tag,std::vector< double > & _output) Return paramater in vector form for the given tag. public virtual bool GetParam (std::string _tag,double & _output) Return paramater in scalar form for the given tag. public virtual bool SetParam (std::string _tag,double _input) Set scalar parameter. public virtual void ApplyHydrodynamicForces (double time,const ignition::math::Vector3d & _flowVelWorld) Computation of the hydrodynamic forces. protected Eigen::Matrix6d Ma Added-mass matrix. protected double scalingAddedMass Scaling of the added-mass matrix. protected double offsetAddedMass Offset for the added-mass matrix. protected Eigen::Matrix6d Ca Added-mass associated Coriolis matrix. protected Eigen::Matrix6d D Damping matrix. protected double scalingDamping Scaling of the damping matrix. protected double offsetLinearDamping Offset for the linear damping matrix. protected double offsetLinForwardSpeedDamping Offset for the linear damping matrix. protected double offsetNonLinDamping Offset for the linear damping matrix. protected Eigen::Matrix6d DLin Linear damping matrix. protected Eigen::Matrix6d DLinForwardSpeed Linear damping matrix proportional only to the forward speed (useful for modeling AUVs). From [1], according to Newman (1977), there is a damping force component that linearly increases with the presence of forward speed, particularly so for slender bodies. protected Eigen::Matrix6d DNonLin Nonlinear damping coefficients. protected std::vector< double > linearDampCoef Linear damping coefficients. protected std::vector< double > quadDampCoef Quadratic damping coefficients. protected REGISTER_HYDRODYNAMICMODEL ( HMFossen ) Register this model with the factory. protected HMFossen (sdf::ElementPtr _sdf,physics::LinkPtr _link) protected void ComputeAddedCoriolisMatrix (const Eigen::Vector6d & _vel,const Eigen::Matrix6d & _Ma, Eigen::Matrix6d & _Ca) const Computes the added-mass Coriolis matrix Ca. protected void ComputeDampingMatrix (const Eigen::Vector6d & _vel, Eigen::Matrix6d & _D) const Updates the damping matrix for the current velocity. protected Eigen::Matrix6d GetAddedMass () const Returns the added-mass matrix with the scaling and offset. Members \u00b6 public inline virtual std::string GetType () \u00b6 Return (derived) type of hydrodynamic model. public virtual void Print (std::string _paramName,std::string _message) \u00b6 Prints parameters. public virtual bool GetParam (std::string _tag,std::vector< double > & _output) \u00b6 Return paramater in vector form for the given tag. public virtual bool GetParam (std::string _tag,double & _output) \u00b6 Return paramater in scalar form for the given tag. public virtual bool SetParam (std::string _tag,double _input) \u00b6 Set scalar parameter. public virtual void ApplyHydrodynamicForces (double time,const ignition::math::Vector3d & _flowVelWorld) \u00b6 Computation of the hydrodynamic forces. protected Eigen::Matrix6d Ma \u00b6 Added-mass matrix. protected double scalingAddedMass \u00b6 Scaling of the added-mass matrix. protected double offsetAddedMass \u00b6 Offset for the added-mass matrix. protected Eigen::Matrix6d Ca \u00b6 Added-mass associated Coriolis matrix. protected Eigen::Matrix6d D \u00b6 Damping matrix. protected double scalingDamping \u00b6 Scaling of the damping matrix. protected double offsetLinearDamping \u00b6 Offset for the linear damping matrix. protected double offsetLinForwardSpeedDamping \u00b6 Offset for the linear damping matrix. protected double offsetNonLinDamping \u00b6 Offset for the linear damping matrix. protected Eigen::Matrix6d DLin \u00b6 Linear damping matrix. protected Eigen::Matrix6d DLinForwardSpeed \u00b6 Linear damping matrix proportional only to the forward speed (useful for modeling AUVs). From [1], according to Newman (1977), there is a damping force component that linearly increases with the presence of forward speed, particularly so for slender bodies. References: [1] Refsnes - 2007 - Nonlinear model-based control of slender body AUVs protected Eigen::Matrix6d DNonLin \u00b6 Nonlinear damping coefficients. protected std::vector< double > linearDampCoef \u00b6 Linear damping coefficients. protected std::vector< double > quadDampCoef \u00b6 Quadratic damping coefficients. protected REGISTER_HYDRODYNAMICMODEL ( HMFossen ) \u00b6 Register this model with the factory. protected HMFossen (sdf::ElementPtr _sdf,physics::LinkPtr _link) \u00b6 protected void ComputeAddedCoriolisMatrix (const Eigen::Vector6d & _vel,const Eigen::Matrix6d & _Ma, Eigen::Matrix6d & _Ca) const \u00b6 Computes the added-mass Coriolis matrix Ca. protected void ComputeDampingMatrix (const Eigen::Vector6d & _vel, Eigen::Matrix6d & _D) const \u00b6 Updates the damping matrix for the current velocity. protected Eigen::Matrix6d GetAddedMass () const \u00b6 Returns the added-mass matrix with the scaling and offset.","title":"HMFossen"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#class-gazebohmfossen","text":"class gazebo :: HMFossen : public gazebo :: HydrodynamicModel Class containting the methods and attributes for a Fossen robot-like hydrodynamic model. The restoring forces are applied by the BuoyantObject class methods. Using the plugin for UUV models will use both this and the buoyant object class definitions, therefore the restoring forces were not inherited here. References: Fossen, Thor, \"Handbook of Marine Craft and Hydrodynamics and Motion Control\", 2011","title":"class gazebo::HMFossen"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#summary","text":"Members Descriptions public inline virtual std::string GetType () Return (derived) type of hydrodynamic model. public virtual void Print (std::string _paramName,std::string _message) Prints parameters. public virtual bool GetParam (std::string _tag,std::vector< double > & _output) Return paramater in vector form for the given tag. public virtual bool GetParam (std::string _tag,double & _output) Return paramater in scalar form for the given tag. public virtual bool SetParam (std::string _tag,double _input) Set scalar parameter. public virtual void ApplyHydrodynamicForces (double time,const ignition::math::Vector3d & _flowVelWorld) Computation of the hydrodynamic forces. protected Eigen::Matrix6d Ma Added-mass matrix. protected double scalingAddedMass Scaling of the added-mass matrix. protected double offsetAddedMass Offset for the added-mass matrix. protected Eigen::Matrix6d Ca Added-mass associated Coriolis matrix. protected Eigen::Matrix6d D Damping matrix. protected double scalingDamping Scaling of the damping matrix. protected double offsetLinearDamping Offset for the linear damping matrix. protected double offsetLinForwardSpeedDamping Offset for the linear damping matrix. protected double offsetNonLinDamping Offset for the linear damping matrix. protected Eigen::Matrix6d DLin Linear damping matrix. protected Eigen::Matrix6d DLinForwardSpeed Linear damping matrix proportional only to the forward speed (useful for modeling AUVs). From [1], according to Newman (1977), there is a damping force component that linearly increases with the presence of forward speed, particularly so for slender bodies. protected Eigen::Matrix6d DNonLin Nonlinear damping coefficients. protected std::vector< double > linearDampCoef Linear damping coefficients. protected std::vector< double > quadDampCoef Quadratic damping coefficients. protected REGISTER_HYDRODYNAMICMODEL ( HMFossen ) Register this model with the factory. protected HMFossen (sdf::ElementPtr _sdf,physics::LinkPtr _link) protected void ComputeAddedCoriolisMatrix (const Eigen::Vector6d & _vel,const Eigen::Matrix6d & _Ma, Eigen::Matrix6d & _Ca) const Computes the added-mass Coriolis matrix Ca. protected void ComputeDampingMatrix (const Eigen::Vector6d & _vel, Eigen::Matrix6d & _D) const Updates the damping matrix for the current velocity. protected Eigen::Matrix6d GetAddedMass () const Returns the added-mass matrix with the scaling and offset.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#public-inline-virtual-stdstringgettype","text":"Return (derived) type of hydrodynamic model.","title":"public inline virtual std::stringGetType()"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#public-virtual-voidprintstdstring-_paramnamestdstring-_message","text":"Prints parameters.","title":"public virtual voidPrint(std::string _paramName,std::string _message)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#public-virtual-boolgetparamstdstring-_tagstdvector-double-_output","text":"Return paramater in vector form for the given tag.","title":"public virtual boolGetParam(std::string _tag,std::vector&lt; double &gt; &amp; _output)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#public-virtual-boolgetparamstdstring-_tagdouble-_output","text":"Return paramater in scalar form for the given tag.","title":"public virtual boolGetParam(std::string _tag,double &amp; _output)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#public-virtual-boolsetparamstdstring-_tagdouble-_input","text":"Set scalar parameter.","title":"public virtual boolSetParam(std::string _tag,double _input)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#public-virtual-voidapplyhydrodynamicforcesdouble-timeconst-ignitionmathvector3d-_flowvelworld","text":"Computation of the hydrodynamic forces.","title":"public virtual voidApplyHydrodynamicForces(double time,const ignition::math::Vector3d &amp; _flowVelWorld)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protectedeigenmatrix6dma","text":"Added-mass matrix.","title":"protectedEigen::Matrix6dMa"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protected-doublescalingaddedmass","text":"Scaling of the added-mass matrix.","title":"protected doublescalingAddedMass"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protected-doubleoffsetaddedmass","text":"Offset for the added-mass matrix.","title":"protected doubleoffsetAddedMass"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protectedeigenmatrix6dca","text":"Added-mass associated Coriolis matrix.","title":"protectedEigen::Matrix6dCa"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protectedeigenmatrix6dd","text":"Damping matrix.","title":"protectedEigen::Matrix6dD"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protected-doublescalingdamping","text":"Scaling of the damping matrix.","title":"protected doublescalingDamping"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protected-doubleoffsetlineardamping","text":"Offset for the linear damping matrix.","title":"protected doubleoffsetLinearDamping"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protected-doubleoffsetlinforwardspeeddamping","text":"Offset for the linear damping matrix.","title":"protected doubleoffsetLinForwardSpeedDamping"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protected-doubleoffsetnonlindamping","text":"Offset for the linear damping matrix.","title":"protected doubleoffsetNonLinDamping"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protectedeigenmatrix6ddlin","text":"Linear damping matrix.","title":"protectedEigen::Matrix6dDLin"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protectedeigenmatrix6ddlinforwardspeed","text":"Linear damping matrix proportional only to the forward speed (useful for modeling AUVs). From [1], according to Newman (1977), there is a damping force component that linearly increases with the presence of forward speed, particularly so for slender bodies. References: [1] Refsnes - 2007 - Nonlinear model-based control of slender body AUVs","title":"protectedEigen::Matrix6dDLinForwardSpeed"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protectedeigenmatrix6ddnonlin","text":"Nonlinear damping coefficients.","title":"protectedEigen::Matrix6dDNonLin"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protected-stdvector-double-lineardampcoef","text":"Linear damping coefficients.","title":"protected std::vector&lt; double &gt;linearDampCoef"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protected-stdvector-double-quaddampcoef","text":"Quadratic damping coefficients.","title":"protected std::vector&lt; double &gt;quadDampCoef"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protectedregister_hydrodynamicmodelhmfossen","text":"Register this model with the factory.","title":"protectedREGISTER_HYDRODYNAMICMODEL(HMFossen)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protectedhmfossensdfelementptr-_sdfphysicslinkptr-_link","text":"","title":"protectedHMFossen(sdf::ElementPtr _sdf,physics::LinkPtr _link)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protected-voidcomputeaddedcoriolismatrixconsteigenvector6d-_velconsteigenmatrix6d-_maeigenmatrix6d-_ca-const","text":"Computes the added-mass Coriolis matrix Ca.","title":"protected voidComputeAddedCoriolisMatrix(constEigen::Vector6d&amp; _vel,constEigen::Matrix6d&amp; _Ma,Eigen::Matrix6d&amp; _Ca) const"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protected-voidcomputedampingmatrixconsteigenvector6d-_veleigenmatrix6d-_d-const","text":"Updates the damping matrix for the current velocity.","title":"protected voidComputeDampingMatrix(constEigen::Vector6d&amp; _vel,Eigen::Matrix6d&amp; _D) const"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMFossen/#protectedeigenmatrix6dgetaddedmass-const","text":"Returns the added-mass matrix with the scaling and offset.","title":"protectedEigen::Matrix6dGetAddedMass() const"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSphere/","text":"class gazebo::HMSphere \u00b6 class gazebo :: HMSphere : public gazebo :: HMFossen Class containing the methods and attributes for a hydrodynamic model for a sphere in the fluid. Summary \u00b6 Members Descriptions public inline virtual std::string GetType () Return (derived) type of hydrodynamic model. public virtual void Print (std::string _paramName,std::string _message) Prints parameters. protected double radius Sphere radius. protected double Cd Drag coefficient. protected double areaSection Area of the cross section. protected REGISTER_HYDRODYNAMICMODEL ( HMSphere ) Register this model with the factory. protected HMSphere (sdf::ElementPtr _sdf,physics::LinkPtr _link) Members \u00b6 public inline virtual std::string GetType () \u00b6 Return (derived) type of hydrodynamic model. public virtual void Print (std::string _paramName,std::string _message) \u00b6 Prints parameters. protected double radius \u00b6 Sphere radius. protected double Cd \u00b6 Drag coefficient. protected double areaSection \u00b6 Area of the cross section. protected REGISTER_HYDRODYNAMICMODEL ( HMSphere ) \u00b6 Register this model with the factory. protected HMSphere (sdf::ElementPtr _sdf,physics::LinkPtr _link) \u00b6","title":"HMSphere"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSphere/#class-gazebohmsphere","text":"class gazebo :: HMSphere : public gazebo :: HMFossen Class containing the methods and attributes for a hydrodynamic model for a sphere in the fluid.","title":"class gazebo::HMSphere"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSphere/#summary","text":"Members Descriptions public inline virtual std::string GetType () Return (derived) type of hydrodynamic model. public virtual void Print (std::string _paramName,std::string _message) Prints parameters. protected double radius Sphere radius. protected double Cd Drag coefficient. protected double areaSection Area of the cross section. protected REGISTER_HYDRODYNAMICMODEL ( HMSphere ) Register this model with the factory. protected HMSphere (sdf::ElementPtr _sdf,physics::LinkPtr _link)","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSphere/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSphere/#public-inline-virtual-stdstringgettype","text":"Return (derived) type of hydrodynamic model.","title":"public inline virtual std::stringGetType()"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSphere/#public-virtual-voidprintstdstring-_paramnamestdstring-_message","text":"Prints parameters.","title":"public virtual voidPrint(std::string _paramName,std::string _message)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSphere/#protected-doubleradius","text":"Sphere radius.","title":"protected doubleradius"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSphere/#protected-doublecd","text":"Drag coefficient.","title":"protected doubleCd"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSphere/#protected-doubleareasection","text":"Area of the cross section.","title":"protected doubleareaSection"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSphere/#protectedregister_hydrodynamicmodelhmsphere","text":"Register this model with the factory.","title":"protectedREGISTER_HYDRODYNAMICMODEL(HMSphere)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSphere/#protectedhmspheresdfelementptr-_sdfphysicslinkptr-_link","text":"","title":"protectedHMSphere(sdf::ElementPtr _sdf,physics::LinkPtr _link)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSpheroid/","text":"class gazebo::HMSpheroid \u00b6 class gazebo :: HMSpheroid : public gazebo :: HMFossen Class containing the methods and attributes for a hydrodynamic model for a spheroid in the fluid Reference: Antonelli - Underwater Robots. Summary \u00b6 Members Descriptions public inline virtual std::string GetType () Return (derived) type of hydrodynamic model. public virtual void Print (std::string _paramName,std::string _message) Prints parameters. protected double length Length of the sphroid. protected double radius Prolate spheroid's smaller radius. protected HMSpheroid (sdf::ElementPtr _sdf,physics::LinkPtr _link) Members \u00b6 public inline virtual std::string GetType () \u00b6 Return (derived) type of hydrodynamic model. public virtual void Print (std::string _paramName,std::string _message) \u00b6 Prints parameters. protected double length \u00b6 Length of the sphroid. protected double radius \u00b6 Prolate spheroid's smaller radius. protected HMSpheroid (sdf::ElementPtr _sdf,physics::LinkPtr _link) \u00b6","title":"HMSpheroid"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSpheroid/#class-gazebohmspheroid","text":"class gazebo :: HMSpheroid : public gazebo :: HMFossen Class containing the methods and attributes for a hydrodynamic model for a spheroid in the fluid Reference: Antonelli - Underwater Robots.","title":"class gazebo::HMSpheroid"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSpheroid/#summary","text":"Members Descriptions public inline virtual std::string GetType () Return (derived) type of hydrodynamic model. public virtual void Print (std::string _paramName,std::string _message) Prints parameters. protected double length Length of the sphroid. protected double radius Prolate spheroid's smaller radius. protected HMSpheroid (sdf::ElementPtr _sdf,physics::LinkPtr _link)","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSpheroid/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSpheroid/#public-inline-virtual-stdstringgettype","text":"Return (derived) type of hydrodynamic model.","title":"public inline virtual std::stringGetType()"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSpheroid/#public-virtual-voidprintstdstring-_paramnamestdstring-_message","text":"Prints parameters.","title":"public virtual voidPrint(std::string _paramName,std::string _message)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSpheroid/#protected-doublelength","text":"Length of the sphroid.","title":"protected doublelength"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSpheroid/#protected-doubleradius","text":"Prolate spheroid's smaller radius.","title":"protected doubleradius"},{"location":"packages/uuv_simulator/docs/api/gazebo::HMSpheroid/#protectedhmspheroidsdfelementptr-_sdfphysicslinkptr-_link","text":"","title":"protectedHMSpheroid(sdf::ElementPtr _sdf,physics::LinkPtr _link)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/","text":"class gazebo::HydrodynamicModel \u00b6 class gazebo :: HydrodynamicModel : public gazebo :: BuoyantObject Summary \u00b6 Members Descriptions public std::string GetType () Returns type of model. public void ApplyHydrodynamicForces (double time,const ignition::math::Vector3d & _flowVelWorld) Computation of the hydrodynamic forces. public void Print (std::string _paramName,std::string _message) Prints parameters. public bool GetParam (std::string _tag,std::vector< double > & _output) Return paramater in vector form for the given tag. public bool GetParam (std::string _tag,double & _output) Return paramater in vector form for the given tag. public bool SetParam (std::string _tag,double _input) Set a scalar parameters. protected Eigen::Vector6d filteredAcc Filtered linear & angular acceleration vector in link frame. This is used to prevent the model to become unstable given that Gazebo only calls the update function at the beginning or at the end of a iteration of the physics engine. protected double lastTime Last timestamp (in seconds) at which ApplyHydrodynamicForces was called. protected Eigen::Vector6d lastVelRel Last body-fixed relative velocity (nu_R in Fossen's equations) protected std::vector< std::string > params List of parameters needed from the SDF element. protected double Re Reynolds number (not used by all models) protected double temperature Temperature (not used by all models) protected HydrodynamicModel (sdf::ElementPtr _sdf,physics::LinkPtr _link) Protected constructor: Use the factory for object creation. protected void ComputeAcc ( Eigen::Vector6d _velRel,double _time,double _alpha) Filter acceleration (fix due to the update structure of Gazebo) protected bool CheckParams (sdf::ElementPtr _sdf) Returns true if all parameters are available from the SDF element. protected ignition::math::Vector3d ToNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. protected ignition::math::Vector3d FromNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. Members \u00b6 public std::string GetType () \u00b6 Returns type of model. public void ApplyHydrodynamicForces (double time,const ignition::math::Vector3d & _flowVelWorld) \u00b6 Computation of the hydrodynamic forces. public void Print (std::string _paramName,std::string _message) \u00b6 Prints parameters. public bool GetParam (std::string _tag,std::vector< double > & _output) \u00b6 Return paramater in vector form for the given tag. public bool GetParam (std::string _tag,double & _output) \u00b6 Return paramater in vector form for the given tag. public bool SetParam (std::string _tag,double _input) \u00b6 Set a scalar parameters. protected Eigen::Vector6d filteredAcc \u00b6 Filtered linear & angular acceleration vector in link frame. This is used to prevent the model to become unstable given that Gazebo only calls the update function at the beginning or at the end of a iteration of the physics engine. protected double lastTime \u00b6 Last timestamp (in seconds) at which ApplyHydrodynamicForces was called. protected Eigen::Vector6d lastVelRel \u00b6 Last body-fixed relative velocity (nu_R in Fossen's equations) protected std::vector< std::string > params \u00b6 List of parameters needed from the SDF element. protected double Re \u00b6 Reynolds number (not used by all models) protected double temperature \u00b6 Temperature (not used by all models) protected HydrodynamicModel (sdf::ElementPtr _sdf,physics::LinkPtr _link) \u00b6 Protected constructor: Use the factory for object creation. protected void ComputeAcc ( Eigen::Vector6d _velRel,double _time,double _alpha) \u00b6 Filter acceleration (fix due to the update structure of Gazebo) protected bool CheckParams (sdf::ElementPtr _sdf) \u00b6 Returns true if all parameters are available from the SDF element. protected ignition::math::Vector3d ToNED (ignition::math::Vector3d _vec) \u00b6 Convert vector to comply with the NED reference frame. protected ignition::math::Vector3d FromNED (ignition::math::Vector3d _vec) \u00b6 Convert vector to comply with the NED reference frame.","title":"HydrodynamicModel"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#class-gazebohydrodynamicmodel","text":"class gazebo :: HydrodynamicModel : public gazebo :: BuoyantObject","title":"class gazebo::HydrodynamicModel"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#summary","text":"Members Descriptions public std::string GetType () Returns type of model. public void ApplyHydrodynamicForces (double time,const ignition::math::Vector3d & _flowVelWorld) Computation of the hydrodynamic forces. public void Print (std::string _paramName,std::string _message) Prints parameters. public bool GetParam (std::string _tag,std::vector< double > & _output) Return paramater in vector form for the given tag. public bool GetParam (std::string _tag,double & _output) Return paramater in vector form for the given tag. public bool SetParam (std::string _tag,double _input) Set a scalar parameters. protected Eigen::Vector6d filteredAcc Filtered linear & angular acceleration vector in link frame. This is used to prevent the model to become unstable given that Gazebo only calls the update function at the beginning or at the end of a iteration of the physics engine. protected double lastTime Last timestamp (in seconds) at which ApplyHydrodynamicForces was called. protected Eigen::Vector6d lastVelRel Last body-fixed relative velocity (nu_R in Fossen's equations) protected std::vector< std::string > params List of parameters needed from the SDF element. protected double Re Reynolds number (not used by all models) protected double temperature Temperature (not used by all models) protected HydrodynamicModel (sdf::ElementPtr _sdf,physics::LinkPtr _link) Protected constructor: Use the factory for object creation. protected void ComputeAcc ( Eigen::Vector6d _velRel,double _time,double _alpha) Filter acceleration (fix due to the update structure of Gazebo) protected bool CheckParams (sdf::ElementPtr _sdf) Returns true if all parameters are available from the SDF element. protected ignition::math::Vector3d ToNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame. protected ignition::math::Vector3d FromNED (ignition::math::Vector3d _vec) Convert vector to comply with the NED reference frame.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#public-stdstringgettype","text":"Returns type of model.","title":"public std::stringGetType()"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#public-voidapplyhydrodynamicforcesdouble-timeconst-ignitionmathvector3d-_flowvelworld","text":"Computation of the hydrodynamic forces.","title":"public voidApplyHydrodynamicForces(double time,const ignition::math::Vector3d &amp; _flowVelWorld)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#public-voidprintstdstring-_paramnamestdstring-_message","text":"Prints parameters.","title":"public voidPrint(std::string _paramName,std::string _message)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#public-boolgetparamstdstring-_tagstdvector-double-_output","text":"Return paramater in vector form for the given tag.","title":"public boolGetParam(std::string _tag,std::vector&lt; double &gt; &amp; _output)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#public-boolgetparamstdstring-_tagdouble-_output","text":"Return paramater in vector form for the given tag.","title":"public boolGetParam(std::string _tag,double &amp; _output)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#public-boolsetparamstdstring-_tagdouble-_input","text":"Set a scalar parameters.","title":"public boolSetParam(std::string _tag,double _input)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#protectedeigenvector6dfilteredacc","text":"Filtered linear & angular acceleration vector in link frame. This is used to prevent the model to become unstable given that Gazebo only calls the update function at the beginning or at the end of a iteration of the physics engine.","title":"protectedEigen::Vector6dfilteredAcc"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#protected-doublelasttime","text":"Last timestamp (in seconds) at which ApplyHydrodynamicForces was called.","title":"protected doublelastTime"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#protectedeigenvector6dlastvelrel","text":"Last body-fixed relative velocity (nu_R in Fossen's equations)","title":"protectedEigen::Vector6dlastVelRel"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#protected-stdvector-stdstring-params","text":"List of parameters needed from the SDF element.","title":"protected std::vector&lt; std::string &gt;params"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#protected-doublere","text":"Reynolds number (not used by all models)","title":"protected doubleRe"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#protected-doubletemperature","text":"Temperature (not used by all models)","title":"protected doubletemperature"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#protectedhydrodynamicmodelsdfelementptr-_sdfphysicslinkptr-_link","text":"Protected constructor: Use the factory for object creation.","title":"protectedHydrodynamicModel(sdf::ElementPtr _sdf,physics::LinkPtr _link)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#protected-voidcomputeacceigenvector6d_velreldouble-_timedouble-_alpha","text":"Filter acceleration (fix due to the update structure of Gazebo)","title":"protected voidComputeAcc(Eigen::Vector6d_velRel,double _time,double _alpha)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#protected-boolcheckparamssdfelementptr-_sdf","text":"Returns true if all parameters are available from the SDF element.","title":"protected boolCheckParams(sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#protected-ignitionmathvector3dtonedignitionmathvector3d-_vec","text":"Convert vector to comply with the NED reference frame.","title":"protected ignition::math::Vector3dToNED(ignition::math::Vector3d _vec)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModel/#protected-ignitionmathvector3dfromnedignitionmathvector3d-_vec","text":"Convert vector to comply with the NED reference frame.","title":"protected ignition::math::Vector3dFromNED(ignition::math::Vector3d _vec)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModelFactory/","text":"class gazebo::HydrodynamicModelFactory \u00b6 Factory singleton class that creates a HydrodynamicModel from sdf. Summary \u00b6 Members Descriptions public HydrodynamicModel * CreateHydrodynamicModel (sdf::ElementPtr _sdf,physics::LinkPtr _link) Create HydrodynamicModel object according to its sdf Description. public bool RegisterCreator (const std::string & _identifier,HydrodynamicModelCreator _creator) Register a class with its creator. Members \u00b6 public HydrodynamicModel * CreateHydrodynamicModel (sdf::ElementPtr _sdf,physics::LinkPtr _link) \u00b6 Create HydrodynamicModel object according to its sdf Description. public bool RegisterCreator (const std::string & _identifier,HydrodynamicModelCreator _creator) \u00b6 Register a class with its creator.","title":"HydrodynamicModelFactory"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModelFactory/#class-gazebohydrodynamicmodelfactory","text":"Factory singleton class that creates a HydrodynamicModel from sdf.","title":"class gazebo::HydrodynamicModelFactory"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModelFactory/#summary","text":"Members Descriptions public HydrodynamicModel * CreateHydrodynamicModel (sdf::ElementPtr _sdf,physics::LinkPtr _link) Create HydrodynamicModel object according to its sdf Description. public bool RegisterCreator (const std::string & _identifier,HydrodynamicModelCreator _creator) Register a class with its creator.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModelFactory/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModelFactory/#publichydrodynamicmodelcreatehydrodynamicmodelsdfelementptr-_sdfphysicslinkptr-_link","text":"Create HydrodynamicModel object according to its sdf Description.","title":"publicHydrodynamicModel*CreateHydrodynamicModel(sdf::ElementPtr _sdf,physics::LinkPtr _link)"},{"location":"packages/uuv_simulator/docs/api/gazebo::HydrodynamicModelFactory/#public-boolregistercreatorconst-stdstring-_identifierhydrodynamicmodelcreator-_creator","text":"Register a class with its creator.","title":"public boolRegisterCreator(const std::string &amp; _identifier,HydrodynamicModelCreator _creator)"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUParameters/","text":"struct gazebo::IMUParameters \u00b6 IMUParameters stores all IMU model parameters. A description of these parameters can be found here: https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics . Summary \u00b6 Members Descriptions public double gyroscopeNoiseDensity Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)]. public double gyroscopeRandomWalk Gyroscope bias random walk [rad/s/s/sqrt(Hz)]. public double gyroscopeBiasCorrelationTime Gyroscope bias correlation time constant [s]. public double gyroscopeTurnOnBiasSigma Gyroscope turn on bias standard deviation [rad/s]. public double accelerometerNoiseDensity Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)]. public double accelerometerRandomWalk Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)]. public double accelerometerBiasCorrelationTime Accelerometer bias correlation time constant [s]. public double accelerometerTurnOnBiasSigma Accelerometer turn on bias standard deviation [m/s^2]. public double orientationNoise Standard deviation of orientation noise per axis [rad]. public inline IMUParameters () Constructor. Members \u00b6 public double gyroscopeNoiseDensity \u00b6 Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)]. public double gyroscopeRandomWalk \u00b6 Gyroscope bias random walk [rad/s/s/sqrt(Hz)]. public double gyroscopeBiasCorrelationTime \u00b6 Gyroscope bias correlation time constant [s]. public double gyroscopeTurnOnBiasSigma \u00b6 Gyroscope turn on bias standard deviation [rad/s]. public double accelerometerNoiseDensity \u00b6 Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)]. public double accelerometerRandomWalk \u00b6 Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)]. public double accelerometerBiasCorrelationTime \u00b6 Accelerometer bias correlation time constant [s]. public double accelerometerTurnOnBiasSigma \u00b6 Accelerometer turn on bias standard deviation [m/s^2]. public double orientationNoise \u00b6 Standard deviation of orientation noise per axis [rad]. public inline IMUParameters () \u00b6 Constructor.","title":"IMUParameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUParameters/#struct-gazeboimuparameters","text":"IMUParameters stores all IMU model parameters. A description of these parameters can be found here: https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics .","title":"struct gazebo::IMUParameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUParameters/#summary","text":"Members Descriptions public double gyroscopeNoiseDensity Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)]. public double gyroscopeRandomWalk Gyroscope bias random walk [rad/s/s/sqrt(Hz)]. public double gyroscopeBiasCorrelationTime Gyroscope bias correlation time constant [s]. public double gyroscopeTurnOnBiasSigma Gyroscope turn on bias standard deviation [rad/s]. public double accelerometerNoiseDensity Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)]. public double accelerometerRandomWalk Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)]. public double accelerometerBiasCorrelationTime Accelerometer bias correlation time constant [s]. public double accelerometerTurnOnBiasSigma Accelerometer turn on bias standard deviation [m/s^2]. public double orientationNoise Standard deviation of orientation noise per axis [rad]. public inline IMUParameters () Constructor.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUParameters/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUParameters/#public-doublegyroscopenoisedensity","text":"Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)].","title":"public doublegyroscopeNoiseDensity"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUParameters/#public-doublegyroscoperandomwalk","text":"Gyroscope bias random walk [rad/s/s/sqrt(Hz)].","title":"public doublegyroscopeRandomWalk"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUParameters/#public-doublegyroscopebiascorrelationtime","text":"Gyroscope bias correlation time constant [s].","title":"public doublegyroscopeBiasCorrelationTime"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUParameters/#public-doublegyroscopeturnonbiassigma","text":"Gyroscope turn on bias standard deviation [rad/s].","title":"public doublegyroscopeTurnOnBiasSigma"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUParameters/#public-doubleaccelerometernoisedensity","text":"Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)].","title":"public doubleaccelerometerNoiseDensity"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUParameters/#public-doubleaccelerometerrandomwalk","text":"Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)].","title":"public doubleaccelerometerRandomWalk"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUParameters/#public-doubleaccelerometerbiascorrelationtime","text":"Accelerometer bias correlation time constant [s].","title":"public doubleaccelerometerBiasCorrelationTime"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUParameters/#public-doubleaccelerometerturnonbiassigma","text":"Accelerometer turn on bias standard deviation [m/s^2].","title":"public doubleaccelerometerTurnOnBiasSigma"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUParameters/#public-doubleorientationnoise","text":"Standard deviation of orientation noise per axis [rad].","title":"public doubleorientationNoise"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUParameters/#public-inlineimuparameters","text":"Constructor.","title":"public inlineIMUParameters()"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/","text":"class gazebo::IMUROSPlugin \u00b6 class gazebo :: IMUROSPlugin : public gazebo :: ROSBaseModelPlugin Summary \u00b6 Members Descriptions public IMUROSPlugin () Class constructor. public virtual ~IMUROSPlugin () Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) Load the plugin. protected ignition::math::Vector3d measLinearAcc Last measurement of linear acceleration.. protected ignition::math::Vector3d measAngularVel Last measurement of angular velocity. protected ignition::math::Quaterniond measOrientation (Simulation) time when the last sensor measurement was generated. protected ignition::math::Vector3d gravityWorld Gravity vector wrt. reference frame. protected ignition::math::Vector3d gyroscopeBias Current (drifting) gyroscope bias. protected ignition::math::Vector3d accelerometerBias Current (drifting) accelerometer bias. protected ignition::math::Vector3d gyroscopeTurnOnBias Constant turn-on gyroscope bias. protected ignition::math::Vector3d accelerometerTurnOnBias Constant turn-on accelerometer bias. protected IMUParameters imuParameters IMU model parameters. protected sensor_msgs::Imu imuROSMessage ROS IMU message. protected virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. protected void AddNoise (ignition::math::Vector3d & _linAcc,ignition::math::Vector3d & _angVel,ignition::math::Quaterniond & _orientation,double _dt) Apply and add nosie model to ideal measurements. Members \u00b6 public IMUROSPlugin () \u00b6 Class constructor. public virtual ~IMUROSPlugin () \u00b6 Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) \u00b6 Load the plugin. protected ignition::math::Vector3d measLinearAcc \u00b6 Last measurement of linear acceleration.. protected ignition::math::Vector3d measAngularVel \u00b6 Last measurement of angular velocity. protected ignition::math::Quaterniond measOrientation \u00b6 (Simulation) time when the last sensor measurement was generated. protected ignition::math::Vector3d gravityWorld \u00b6 Gravity vector wrt. reference frame. protected ignition::math::Vector3d gyroscopeBias \u00b6 Current (drifting) gyroscope bias. protected ignition::math::Vector3d accelerometerBias \u00b6 Current (drifting) accelerometer bias. protected ignition::math::Vector3d gyroscopeTurnOnBias \u00b6 Constant turn-on gyroscope bias. protected ignition::math::Vector3d accelerometerTurnOnBias \u00b6 Constant turn-on accelerometer bias. protected IMUParameters imuParameters \u00b6 IMU model parameters. protected sensor_msgs::Imu imuROSMessage \u00b6 ROS IMU message. protected virtual bool OnUpdate (const common::UpdateInfo & _info) \u00b6 Update sensor measurement. protected void AddNoise (ignition::math::Vector3d & _linAcc,ignition::math::Vector3d & _angVel,ignition::math::Quaterniond & _orientation,double _dt) \u00b6 Apply and add nosie model to ideal measurements.","title":"IMUROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/#class-gazeboimurosplugin","text":"class gazebo :: IMUROSPlugin : public gazebo :: ROSBaseModelPlugin","title":"class gazebo::IMUROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/#summary","text":"Members Descriptions public IMUROSPlugin () Class constructor. public virtual ~IMUROSPlugin () Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) Load the plugin. protected ignition::math::Vector3d measLinearAcc Last measurement of linear acceleration.. protected ignition::math::Vector3d measAngularVel Last measurement of angular velocity. protected ignition::math::Quaterniond measOrientation (Simulation) time when the last sensor measurement was generated. protected ignition::math::Vector3d gravityWorld Gravity vector wrt. reference frame. protected ignition::math::Vector3d gyroscopeBias Current (drifting) gyroscope bias. protected ignition::math::Vector3d accelerometerBias Current (drifting) accelerometer bias. protected ignition::math::Vector3d gyroscopeTurnOnBias Constant turn-on gyroscope bias. protected ignition::math::Vector3d accelerometerTurnOnBias Constant turn-on accelerometer bias. protected IMUParameters imuParameters IMU model parameters. protected sensor_msgs::Imu imuROSMessage ROS IMU message. protected virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. protected void AddNoise (ignition::math::Vector3d & _linAcc,ignition::math::Vector3d & _angVel,ignition::math::Quaterniond & _orientation,double _dt) Apply and add nosie model to ideal measurements.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/#publicimurosplugin","text":"Class constructor.","title":"publicIMUROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/#public-virtualimurosplugin","text":"Class destructor.","title":"public virtual~IMUROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/#public-virtual-voidloadphysicsmodelptr-_modelsdfelementptr-_sdf","text":"Load the plugin.","title":"public virtual voidLoad(physics::ModelPtr _model,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/#protected-ignitionmathvector3dmeaslinearacc","text":"Last measurement of linear acceleration..","title":"protected ignition::math::Vector3dmeasLinearAcc"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/#protected-ignitionmathvector3dmeasangularvel","text":"Last measurement of angular velocity.","title":"protected ignition::math::Vector3dmeasAngularVel"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/#protected-ignitionmathquaterniondmeasorientation","text":"(Simulation) time when the last sensor measurement was generated.","title":"protected ignition::math::QuaterniondmeasOrientation"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/#protected-ignitionmathvector3dgravityworld","text":"Gravity vector wrt. reference frame.","title":"protected ignition::math::Vector3dgravityWorld"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/#protected-ignitionmathvector3dgyroscopebias","text":"Current (drifting) gyroscope bias.","title":"protected ignition::math::Vector3dgyroscopeBias"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/#protected-ignitionmathvector3daccelerometerbias","text":"Current (drifting) accelerometer bias.","title":"protected ignition::math::Vector3daccelerometerBias"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/#protected-ignitionmathvector3dgyroscopeturnonbias","text":"Constant turn-on gyroscope bias.","title":"protected ignition::math::Vector3dgyroscopeTurnOnBias"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/#protected-ignitionmathvector3daccelerometerturnonbias","text":"Constant turn-on accelerometer bias.","title":"protected ignition::math::Vector3daccelerometerTurnOnBias"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/#protectedimuparametersimuparameters","text":"IMU model parameters.","title":"protectedIMUParametersimuParameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/#protected-sensor_msgsimuimurosmessage","text":"ROS IMU message.","title":"protected sensor_msgs::ImuimuROSMessage"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/#protected-virtual-boolonupdateconst-commonupdateinfo-_info","text":"Update sensor measurement.","title":"protected virtual boolOnUpdate(const common::UpdateInfo &amp; _info)"},{"location":"packages/uuv_simulator/docs/api/gazebo::IMUROSPlugin/#protected-voidaddnoiseignitionmathvector3d-_linaccignitionmathvector3d-_angvelignitionmathquaterniond-_orientationdouble-_dt","text":"Apply and add nosie model to ideal measurements.","title":"protected voidAddNoise(ignition::math::Vector3d &amp; _linAcc,ignition::math::Vector3d &amp; _angVel,ignition::math::Quaterniond &amp; _orientation,double _dt)"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDrag/","text":"class gazebo::LiftDrag \u00b6 Abstract base class for Lift&Drag models. Summary \u00b6 Members Descriptions public inline virtual ~LiftDrag () Destructor. public std::string GetType () Return (derived) type of lift&drag model. public ignition::math::Vector3d compute (const ignition::math::Vector3d & _velL) Compute the lift and drag force. public bool GetParam (std::string _tag,double & _output) Return paramater in vector form for the given tag. public std::map< std::string, double > GetListParams () Return list of all parameters. protected double prevTime Time of last state update. protected double state Latest state. protected inline LiftDrag () Protected constructor: Use the factory for object creation. Members \u00b6 public inline virtual ~LiftDrag () \u00b6 Destructor. public std::string GetType () \u00b6 Return (derived) type of lift&drag model. public ignition::math::Vector3d compute (const ignition::math::Vector3d & _velL) \u00b6 Compute the lift and drag force. public bool GetParam (std::string _tag,double & _output) \u00b6 Return paramater in vector form for the given tag. public std::map< std::string, double > GetListParams () \u00b6 Return list of all parameters. protected double prevTime \u00b6 Time of last state update. protected double state \u00b6 Latest state. protected inline LiftDrag () \u00b6 Protected constructor: Use the factory for object creation.","title":"LiftDrag"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDrag/#class-gazeboliftdrag","text":"Abstract base class for Lift&Drag models.","title":"class gazebo::LiftDrag"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDrag/#summary","text":"Members Descriptions public inline virtual ~LiftDrag () Destructor. public std::string GetType () Return (derived) type of lift&drag model. public ignition::math::Vector3d compute (const ignition::math::Vector3d & _velL) Compute the lift and drag force. public bool GetParam (std::string _tag,double & _output) Return paramater in vector form for the given tag. public std::map< std::string, double > GetListParams () Return list of all parameters. protected double prevTime Time of last state update. protected double state Latest state. protected inline LiftDrag () Protected constructor: Use the factory for object creation.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDrag/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDrag/#public-inline-virtualliftdrag","text":"Destructor.","title":"public inline virtual~LiftDrag()"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDrag/#public-stdstringgettype","text":"Return (derived) type of lift&drag model.","title":"public std::stringGetType()"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDrag/#public-ignitionmathvector3dcomputeconst-ignitionmathvector3d-_vell","text":"Compute the lift and drag force.","title":"public ignition::math::Vector3dcompute(const ignition::math::Vector3d &amp; _velL)"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDrag/#public-boolgetparamstdstring-_tagdouble-_output","text":"Return paramater in vector form for the given tag.","title":"public boolGetParam(std::string _tag,double &amp; _output)"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDrag/#public-stdmap-stdstring-double-getlistparams","text":"Return list of all parameters.","title":"public std::map&lt; std::string, double &gt;GetListParams()"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDrag/#protected-doubleprevtime","text":"Time of last state update.","title":"protected doubleprevTime"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDrag/#protected-doublestate","text":"Latest state.","title":"protected doublestate"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDrag/#protected-inlineliftdrag","text":"Protected constructor: Use the factory for object creation.","title":"protected inlineLiftDrag()"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragFactory/","text":"class gazebo::LiftDragFactory \u00b6 Factory singleton class that creates a LiftDrag from sdf. Summary \u00b6 Members Descriptions public LiftDrag * CreateLiftDrag (sdf::ElementPtr _sdf) Create LiftDrag object according to its sdf Description. public bool RegisterCreator (const std::string & _identifier,LiftDragCreator _creator) Register a LiftDrag class with its creator. Members \u00b6 public LiftDrag * CreateLiftDrag (sdf::ElementPtr _sdf) \u00b6 Create LiftDrag object according to its sdf Description. public bool RegisterCreator (const std::string & _identifier,LiftDragCreator _creator) \u00b6 Register a LiftDrag class with its creator.","title":"LiftDragFactory"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragFactory/#class-gazeboliftdragfactory","text":"Factory singleton class that creates a LiftDrag from sdf.","title":"class gazebo::LiftDragFactory"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragFactory/#summary","text":"Members Descriptions public LiftDrag * CreateLiftDrag (sdf::ElementPtr _sdf) Create LiftDrag object according to its sdf Description. public bool RegisterCreator (const std::string & _identifier,LiftDragCreator _creator) Register a LiftDrag class with its creator.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragFactory/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragFactory/#publicliftdragcreateliftdragsdfelementptr-_sdf","text":"Create LiftDrag object according to its sdf Description.","title":"publicLiftDrag*CreateLiftDrag(sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragFactory/#public-boolregistercreatorconst-stdstring-_identifierliftdragcreator-_creator","text":"Register a LiftDrag class with its creator.","title":"public boolRegisterCreator(const std::string &amp; _identifier,LiftDragCreator _creator)"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragQuadratic/","text":"class gazebo::LiftDragQuadratic \u00b6 class gazebo :: LiftDragQuadratic : public gazebo :: LiftDrag Basic quadratic (Hugin) lift&drag model, page 18 from [1]. [1] Engelhardtsen, \u00d8ystein. \"3D AUV Collision Avoidance.\" (2007). Summary \u00b6 Members Descriptions public inline virtual std::string GetType () Return (derived) type of dynamic system. public virtual ignition::math::Vector3d compute (const ignition::math::Vector3d & velL) Compute the lift and drag force. public virtual bool GetParam (std::string _tag,double & _output) Return paramater in scalar form for the given tag. public virtual std::map< std::string, double > GetListParams () Return list of all parameters. protected double liftConstant Lift constant. protected double dragConstant Drag constant. Members \u00b6 public inline virtual std::string GetType () \u00b6 Return (derived) type of dynamic system. public virtual ignition::math::Vector3d compute (const ignition::math::Vector3d & velL) \u00b6 Compute the lift and drag force. public virtual bool GetParam (std::string _tag,double & _output) \u00b6 Return paramater in scalar form for the given tag. public virtual std::map< std::string, double > GetListParams () \u00b6 Return list of all parameters. protected double liftConstant \u00b6 Lift constant. protected double dragConstant \u00b6 Drag constant.","title":"LiftDragQuadratic"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragQuadratic/#class-gazeboliftdragquadratic","text":"class gazebo :: LiftDragQuadratic : public gazebo :: LiftDrag Basic quadratic (Hugin) lift&drag model, page 18 from [1]. [1] Engelhardtsen, \u00d8ystein. \"3D AUV Collision Avoidance.\" (2007).","title":"class gazebo::LiftDragQuadratic"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragQuadratic/#summary","text":"Members Descriptions public inline virtual std::string GetType () Return (derived) type of dynamic system. public virtual ignition::math::Vector3d compute (const ignition::math::Vector3d & velL) Compute the lift and drag force. public virtual bool GetParam (std::string _tag,double & _output) Return paramater in scalar form for the given tag. public virtual std::map< std::string, double > GetListParams () Return list of all parameters. protected double liftConstant Lift constant. protected double dragConstant Drag constant.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragQuadratic/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragQuadratic/#public-inline-virtual-stdstringgettype","text":"Return (derived) type of dynamic system.","title":"public inline virtual std::stringGetType()"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragQuadratic/#public-virtual-ignitionmathvector3dcomputeconst-ignitionmathvector3d-vell","text":"Compute the lift and drag force.","title":"public virtual ignition::math::Vector3dcompute(const ignition::math::Vector3d &amp; velL)"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragQuadratic/#public-virtual-boolgetparamstdstring-_tagdouble-_output","text":"Return paramater in scalar form for the given tag.","title":"public virtual boolGetParam(std::string _tag,double &amp; _output)"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragQuadratic/#public-virtual-stdmap-stdstring-double-getlistparams","text":"Return list of all parameters.","title":"public virtual std::map&lt; std::string, double &gt;GetListParams()"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragQuadratic/#protected-doubleliftconstant","text":"Lift constant.","title":"protected doubleliftConstant"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragQuadratic/#protected-doubledragconstant","text":"Drag constant.","title":"protected doubledragConstant"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragTwoLines/","text":"class gazebo::LiftDragTwoLines \u00b6 class gazebo :: LiftDragTwoLines : public gazebo :: LiftDrag Lift&drag model that models lift/drag coeffs using two lines. This is based on Gazebo's LiftDragPlugin but implemented as a derived LiftDrag model to allow using it in combination with the dynamics of a Fin. Summary \u00b6 Members Descriptions public inline virtual std::string GetType () Return (derived) type of dynamic system. public virtual ignition::math::Vector3d compute (const ignition::math::Vector3d & _velL) Compute the lift and drag force. public virtual bool GetParam (std::string _tag,double & _output) Return paramater in scalar form for the given tag. public virtual std::map< std::string, double > GetListParams () Return list of all parameters. protected double area Airfoil area. protected double fluidDensity Fluid density. protected double a0 Original zero angle of attack location. protected double alphaStall Stall angle. protected double cla Lift coefficient without stall. protected double claStall Lift coefficient with stall. protected double cda Drag coefficient without stall. protected double cdaStall Drag coefficient with stall. Members \u00b6 public inline virtual std::string GetType () \u00b6 Return (derived) type of dynamic system. public virtual ignition::math::Vector3d compute (const ignition::math::Vector3d & _velL) \u00b6 Compute the lift and drag force. public virtual bool GetParam (std::string _tag,double & _output) \u00b6 Return paramater in scalar form for the given tag. public virtual std::map< std::string, double > GetListParams () \u00b6 Return list of all parameters. protected double area \u00b6 Airfoil area. protected double fluidDensity \u00b6 Fluid density. protected double a0 \u00b6 Original zero angle of attack location. protected double alphaStall \u00b6 Stall angle. protected double cla \u00b6 Lift coefficient without stall. protected double claStall \u00b6 Lift coefficient with stall. protected double cda \u00b6 Drag coefficient without stall. protected double cdaStall \u00b6 Drag coefficient with stall.","title":"LiftDragTwoLines"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragTwoLines/#class-gazeboliftdragtwolines","text":"class gazebo :: LiftDragTwoLines : public gazebo :: LiftDrag Lift&drag model that models lift/drag coeffs using two lines. This is based on Gazebo's LiftDragPlugin but implemented as a derived LiftDrag model to allow using it in combination with the dynamics of a Fin.","title":"class gazebo::LiftDragTwoLines"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragTwoLines/#summary","text":"Members Descriptions public inline virtual std::string GetType () Return (derived) type of dynamic system. public virtual ignition::math::Vector3d compute (const ignition::math::Vector3d & _velL) Compute the lift and drag force. public virtual bool GetParam (std::string _tag,double & _output) Return paramater in scalar form for the given tag. public virtual std::map< std::string, double > GetListParams () Return list of all parameters. protected double area Airfoil area. protected double fluidDensity Fluid density. protected double a0 Original zero angle of attack location. protected double alphaStall Stall angle. protected double cla Lift coefficient without stall. protected double claStall Lift coefficient with stall. protected double cda Drag coefficient without stall. protected double cdaStall Drag coefficient with stall.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragTwoLines/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragTwoLines/#public-inline-virtual-stdstringgettype","text":"Return (derived) type of dynamic system.","title":"public inline virtual std::stringGetType()"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragTwoLines/#public-virtual-ignitionmathvector3dcomputeconst-ignitionmathvector3d-_vell","text":"Compute the lift and drag force.","title":"public virtual ignition::math::Vector3dcompute(const ignition::math::Vector3d &amp; _velL)"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragTwoLines/#public-virtual-boolgetparamstdstring-_tagdouble-_output","text":"Return paramater in scalar form for the given tag.","title":"public virtual boolGetParam(std::string _tag,double &amp; _output)"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragTwoLines/#public-virtual-stdmap-stdstring-double-getlistparams","text":"Return list of all parameters.","title":"public virtual std::map&lt; std::string, double &gt;GetListParams()"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragTwoLines/#protected-doublearea","text":"Airfoil area.","title":"protected doublearea"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragTwoLines/#protected-doublefluiddensity","text":"Fluid density.","title":"protected doublefluidDensity"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragTwoLines/#protected-doublea0","text":"Original zero angle of attack location.","title":"protected doublea0"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragTwoLines/#protected-doublealphastall","text":"Stall angle.","title":"protected doublealphaStall"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragTwoLines/#protected-doublecla","text":"Lift coefficient without stall.","title":"protected doublecla"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragTwoLines/#protected-doubleclastall","text":"Lift coefficient with stall.","title":"protected doubleclaStall"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragTwoLines/#protected-doublecda","text":"Drag coefficient without stall.","title":"protected doublecda"},{"location":"packages/uuv_simulator/docs/api/gazebo::LiftDragTwoLines/#protected-doublecdastall","text":"Drag coefficient with stall.","title":"protected doublecdaStall"},{"location":"packages/uuv_simulator/docs/api/gazebo::LinearBatteryROSPlugin/","text":"class gazebo::LinearBatteryROSPlugin \u00b6 class gazebo :: LinearBatteryROSPlugin : public LinearBatteryPlugin Summary \u00b6 Members Descriptions public LinearBatteryROSPlugin () Constructor. public virtual ~LinearBatteryROSPlugin () Destructor. public void Load (physics::ModelPtr _parent,sdf::ElementPtr _sdf) Load module and read parameters from SDF. public virtual void Init () Initialize Module. public virtual void Reset () Reset Module. protected boost::scoped_ptr< ros::NodeHandle > rosNode Pointer to this ROS node's handle. protected std::string robotNamespace Namespace for this ROS node. protected sensor_msgs::BatteryState batteryStateMsg Battery state ROS message. protected ros::Timer updateTimer Connection for callbacks on update world. protected void PublishBatteryState () Publish battery states. Members \u00b6 public LinearBatteryROSPlugin () \u00b6 Constructor. public virtual ~LinearBatteryROSPlugin () \u00b6 Destructor. public void Load (physics::ModelPtr _parent,sdf::ElementPtr _sdf) \u00b6 Load module and read parameters from SDF. public virtual void Init () \u00b6 Initialize Module. public virtual void Reset () \u00b6 Reset Module. protected boost::scoped_ptr< ros::NodeHandle > rosNode \u00b6 Pointer to this ROS node's handle. protected std::string robotNamespace \u00b6 Namespace for this ROS node. protected sensor_msgs::BatteryState batteryStateMsg \u00b6 Battery state ROS message. protected ros::Timer updateTimer \u00b6 Connection for callbacks on update world. protected void PublishBatteryState () \u00b6 Publish battery states.","title":"LinearBatteryROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::LinearBatteryROSPlugin/#class-gazebolinearbatteryrosplugin","text":"class gazebo :: LinearBatteryROSPlugin : public LinearBatteryPlugin","title":"class gazebo::LinearBatteryROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::LinearBatteryROSPlugin/#summary","text":"Members Descriptions public LinearBatteryROSPlugin () Constructor. public virtual ~LinearBatteryROSPlugin () Destructor. public void Load (physics::ModelPtr _parent,sdf::ElementPtr _sdf) Load module and read parameters from SDF. public virtual void Init () Initialize Module. public virtual void Reset () Reset Module. protected boost::scoped_ptr< ros::NodeHandle > rosNode Pointer to this ROS node's handle. protected std::string robotNamespace Namespace for this ROS node. protected sensor_msgs::BatteryState batteryStateMsg Battery state ROS message. protected ros::Timer updateTimer Connection for callbacks on update world. protected void PublishBatteryState () Publish battery states.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::LinearBatteryROSPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::LinearBatteryROSPlugin/#publiclinearbatteryrosplugin","text":"Constructor.","title":"publicLinearBatteryROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::LinearBatteryROSPlugin/#public-virtuallinearbatteryrosplugin","text":"Destructor.","title":"public virtual~LinearBatteryROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::LinearBatteryROSPlugin/#public-voidloadphysicsmodelptr-_parentsdfelementptr-_sdf","text":"Load module and read parameters from SDF.","title":"public voidLoad(physics::ModelPtr _parent,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::LinearBatteryROSPlugin/#public-virtual-voidinit","text":"Initialize Module.","title":"public virtual voidInit()"},{"location":"packages/uuv_simulator/docs/api/gazebo::LinearBatteryROSPlugin/#public-virtual-voidreset","text":"Reset Module.","title":"public virtual voidReset()"},{"location":"packages/uuv_simulator/docs/api/gazebo::LinearBatteryROSPlugin/#protected-boostscoped_ptr-rosnodehandle-rosnode","text":"Pointer to this ROS node's handle.","title":"protected boost::scoped_ptr&lt; ros::NodeHandle &gt;rosNode"},{"location":"packages/uuv_simulator/docs/api/gazebo::LinearBatteryROSPlugin/#protected-stdstringrobotnamespace","text":"Namespace for this ROS node.","title":"protected std::stringrobotNamespace"},{"location":"packages/uuv_simulator/docs/api/gazebo::LinearBatteryROSPlugin/#protected-sensor_msgsbatterystatebatterystatemsg","text":"Battery state ROS message.","title":"protected sensor_msgs::BatteryStatebatteryStateMsg"},{"location":"packages/uuv_simulator/docs/api/gazebo::LinearBatteryROSPlugin/#protected-rostimerupdatetimer","text":"Connection for callbacks on update world.","title":"protected ros::TimerupdateTimer"},{"location":"packages/uuv_simulator/docs/api/gazebo::LinearBatteryROSPlugin/#protected-voidpublishbatterystate","text":"Publish battery states.","title":"protected voidPublishBatteryState()"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerParameters/","text":"struct gazebo::MagnetometerParameters \u00b6 Summary \u00b6 Members Descriptions public double intensity Intensity of reference earth magnetic field [muT]. public double heading Heading angle of reference earth magnetic field [rad]. public double declination Declination of reference earth magnetic field [rad]. public double inclination Inclination of reference earth magnetic field [rad]. public double noiseXY Discrete-time standard dev. of output noise in xy-axis [muT]. public double noiseZ Discrete-time standard dev. of output noise in z-axis [muT]. public double turnOnBias Standard deviation of constant systematic offset of measurements [muT]. Members \u00b6 public double intensity \u00b6 Intensity of reference earth magnetic field [muT]. public double heading \u00b6 Heading angle of reference earth magnetic field [rad]. public double declination \u00b6 Declination of reference earth magnetic field [rad]. public double inclination \u00b6 Inclination of reference earth magnetic field [rad]. public double noiseXY \u00b6 Discrete-time standard dev. of output noise in xy-axis [muT]. public double noiseZ \u00b6 Discrete-time standard dev. of output noise in z-axis [muT]. public double turnOnBias \u00b6 Standard deviation of constant systematic offset of measurements [muT].","title":"MagnetometerParameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerParameters/#struct-gazebomagnetometerparameters","text":"","title":"struct gazebo::MagnetometerParameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerParameters/#summary","text":"Members Descriptions public double intensity Intensity of reference earth magnetic field [muT]. public double heading Heading angle of reference earth magnetic field [rad]. public double declination Declination of reference earth magnetic field [rad]. public double inclination Inclination of reference earth magnetic field [rad]. public double noiseXY Discrete-time standard dev. of output noise in xy-axis [muT]. public double noiseZ Discrete-time standard dev. of output noise in z-axis [muT]. public double turnOnBias Standard deviation of constant systematic offset of measurements [muT].","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerParameters/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerParameters/#public-doubleintensity","text":"Intensity of reference earth magnetic field [muT].","title":"public doubleintensity"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerParameters/#public-doubleheading","text":"Heading angle of reference earth magnetic field [rad].","title":"public doubleheading"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerParameters/#public-doubledeclination","text":"Declination of reference earth magnetic field [rad].","title":"public doubledeclination"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerParameters/#public-doubleinclination","text":"Inclination of reference earth magnetic field [rad].","title":"public doubleinclination"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerParameters/#public-doublenoisexy","text":"Discrete-time standard dev. of output noise in xy-axis [muT].","title":"public doublenoiseXY"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerParameters/#public-doublenoisez","text":"Discrete-time standard dev. of output noise in z-axis [muT].","title":"public doublenoiseZ"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerParameters/#public-doubleturnonbias","text":"Standard deviation of constant systematic offset of measurements [muT].","title":"public doubleturnOnBias"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerROSPlugin/","text":"class gazebo::MagnetometerROSPlugin \u00b6 class gazebo :: MagnetometerROSPlugin : public gazebo :: ROSBaseModelPlugin Summary \u00b6 Members Descriptions public MagnetometerROSPlugin () Class constructor. public virtual ~MagnetometerROSPlugin () Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) Load the plugin. protected MagnetometerParameters parameters Magnetometer configuration parameters: protected ignition::math::Vector3d magneticFieldWorld Reference magnetic field in world frame: protected ignition::math::Vector3d turnOnBias Constant turn-on bias [muT]. protected ignition::math::Vector3d measMagneticField Last measurement of magnetic field. protected sensor_msgs::MagneticField rosMsg ROS message. protected virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. Members \u00b6 public MagnetometerROSPlugin () \u00b6 Class constructor. public virtual ~MagnetometerROSPlugin () \u00b6 Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) \u00b6 Load the plugin. protected MagnetometerParameters parameters \u00b6 Magnetometer configuration parameters: protected ignition::math::Vector3d magneticFieldWorld \u00b6 Reference magnetic field in world frame: protected ignition::math::Vector3d turnOnBias \u00b6 Constant turn-on bias [muT]. protected ignition::math::Vector3d measMagneticField \u00b6 Last measurement of magnetic field. protected sensor_msgs::MagneticField rosMsg \u00b6 ROS message. protected virtual bool OnUpdate (const common::UpdateInfo & _info) \u00b6 Update sensor measurement.","title":"MagnetometerROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerROSPlugin/#class-gazebomagnetometerrosplugin","text":"class gazebo :: MagnetometerROSPlugin : public gazebo :: ROSBaseModelPlugin","title":"class gazebo::MagnetometerROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerROSPlugin/#summary","text":"Members Descriptions public MagnetometerROSPlugin () Class constructor. public virtual ~MagnetometerROSPlugin () Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) Load the plugin. protected MagnetometerParameters parameters Magnetometer configuration parameters: protected ignition::math::Vector3d magneticFieldWorld Reference magnetic field in world frame: protected ignition::math::Vector3d turnOnBias Constant turn-on bias [muT]. protected ignition::math::Vector3d measMagneticField Last measurement of magnetic field. protected sensor_msgs::MagneticField rosMsg ROS message. protected virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerROSPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerROSPlugin/#publicmagnetometerrosplugin","text":"Class constructor.","title":"publicMagnetometerROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerROSPlugin/#public-virtualmagnetometerrosplugin","text":"Class destructor.","title":"public virtual~MagnetometerROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerROSPlugin/#public-virtual-voidloadphysicsmodelptr-_modelsdfelementptr-_sdf","text":"Load the plugin.","title":"public virtual voidLoad(physics::ModelPtr _model,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerROSPlugin/#protectedmagnetometerparametersparameters","text":"Magnetometer configuration parameters:","title":"protectedMagnetometerParametersparameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerROSPlugin/#protected-ignitionmathvector3dmagneticfieldworld","text":"Reference magnetic field in world frame:","title":"protected ignition::math::Vector3dmagneticFieldWorld"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerROSPlugin/#protected-ignitionmathvector3dturnonbias","text":"Constant turn-on bias [muT].","title":"protected ignition::math::Vector3dturnOnBias"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerROSPlugin/#protected-ignitionmathvector3dmeasmagneticfield","text":"Last measurement of magnetic field.","title":"protected ignition::math::Vector3dmeasMagneticField"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerROSPlugin/#protected-sensor_msgsmagneticfieldrosmsg","text":"ROS message.","title":"protected sensor_msgs::MagneticFieldrosMsg"},{"location":"packages/uuv_simulator/docs/api/gazebo::MagnetometerROSPlugin/#protected-virtual-boolonupdateconst-commonupdateinfo-_info","text":"Update sensor measurement.","title":"protected virtual boolOnUpdate(const common::UpdateInfo &amp; _info)"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/","text":"class gazebo::PoseGTROSPlugin \u00b6 class gazebo :: PoseGTROSPlugin : public gazebo :: ROSBaseModelPlugin Summary \u00b6 Members Descriptions public PoseGTROSPlugin () Class constructor. public ~PoseGTROSPlugin () Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) Load the plugin. protected ros::Publisher nedOdomPub protected ignition::math::Pose3d offset Pose offset. protected std::string nedFrameID protected ignition::math::Pose3d nedTransform protected bool nedTransformIsInit protected bool publishNEDOdom protected tf2_ros::Buffer tfBuffer protected boost::shared_ptr< tf2_ros::TransformListener > tfListener protected ignition::math::Vector3d lastLinVel protected ignition::math::Vector3d lastAngVel protected ignition::math::Vector3d linAcc protected ignition::math::Vector3d angAcc protected ignition::math::Vector3d lastRefLinVel protected ignition::math::Vector3d lastRefAngVel protected ignition::math::Vector3d refLinAcc protected ignition::math::Vector3d refAngAcc protected virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. protected void PublishNEDOdomMessage (common::Time _time,ignition::math::Pose3d _pose,ignition::math::Vector3d _linVel,ignition::math::Vector3d _angVel) protected void PublishOdomMessage (common::Time _time,ignition::math::Pose3d _pose,ignition::math::Vector3d _linVel,ignition::math::Vector3d _angVel) protected void UpdateNEDTransform () Members \u00b6 public PoseGTROSPlugin () \u00b6 Class constructor. public ~PoseGTROSPlugin () \u00b6 Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) \u00b6 Load the plugin. protected ros::Publisher nedOdomPub \u00b6 protected ignition::math::Pose3d offset \u00b6 Pose offset. protected std::string nedFrameID \u00b6 protected ignition::math::Pose3d nedTransform \u00b6 protected bool nedTransformIsInit \u00b6 protected bool publishNEDOdom \u00b6 protected tf2_ros::Buffer tfBuffer \u00b6 protected boost::shared_ptr< tf2_ros::TransformListener > tfListener \u00b6 protected ignition::math::Vector3d lastLinVel \u00b6 protected ignition::math::Vector3d lastAngVel \u00b6 protected ignition::math::Vector3d linAcc \u00b6 protected ignition::math::Vector3d angAcc \u00b6 protected ignition::math::Vector3d lastRefLinVel \u00b6 protected ignition::math::Vector3d lastRefAngVel \u00b6 protected ignition::math::Vector3d refLinAcc \u00b6 protected ignition::math::Vector3d refAngAcc \u00b6 protected virtual bool OnUpdate (const common::UpdateInfo & _info) \u00b6 Update sensor measurement. protected void PublishNEDOdomMessage (common::Time _time,ignition::math::Pose3d _pose,ignition::math::Vector3d _linVel,ignition::math::Vector3d _angVel) \u00b6 protected void PublishOdomMessage (common::Time _time,ignition::math::Pose3d _pose,ignition::math::Vector3d _linVel,ignition::math::Vector3d _angVel) \u00b6 protected void UpdateNEDTransform () \u00b6","title":"PoseGTROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#class-gazeboposegtrosplugin","text":"class gazebo :: PoseGTROSPlugin : public gazebo :: ROSBaseModelPlugin","title":"class gazebo::PoseGTROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#summary","text":"Members Descriptions public PoseGTROSPlugin () Class constructor. public ~PoseGTROSPlugin () Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) Load the plugin. protected ros::Publisher nedOdomPub protected ignition::math::Pose3d offset Pose offset. protected std::string nedFrameID protected ignition::math::Pose3d nedTransform protected bool nedTransformIsInit protected bool publishNEDOdom protected tf2_ros::Buffer tfBuffer protected boost::shared_ptr< tf2_ros::TransformListener > tfListener protected ignition::math::Vector3d lastLinVel protected ignition::math::Vector3d lastAngVel protected ignition::math::Vector3d linAcc protected ignition::math::Vector3d angAcc protected ignition::math::Vector3d lastRefLinVel protected ignition::math::Vector3d lastRefAngVel protected ignition::math::Vector3d refLinAcc protected ignition::math::Vector3d refAngAcc protected virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. protected void PublishNEDOdomMessage (common::Time _time,ignition::math::Pose3d _pose,ignition::math::Vector3d _linVel,ignition::math::Vector3d _angVel) protected void PublishOdomMessage (common::Time _time,ignition::math::Pose3d _pose,ignition::math::Vector3d _linVel,ignition::math::Vector3d _angVel) protected void UpdateNEDTransform ()","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#publicposegtrosplugin","text":"Class constructor.","title":"publicPoseGTROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#publicposegtrosplugin_1","text":"Class destructor.","title":"public~PoseGTROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#public-virtual-voidloadphysicsmodelptr-_modelsdfelementptr-_sdf","text":"Load the plugin.","title":"public virtual voidLoad(physics::ModelPtr _model,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-rospublishernedodompub","text":"","title":"protected ros::PublishernedOdomPub"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-ignitionmathpose3doffset","text":"Pose offset.","title":"protected ignition::math::Pose3doffset"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-stdstringnedframeid","text":"","title":"protected std::stringnedFrameID"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-ignitionmathpose3dnedtransform","text":"","title":"protected ignition::math::Pose3dnedTransform"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-boolnedtransformisinit","text":"","title":"protected boolnedTransformIsInit"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-boolpublishnedodom","text":"","title":"protected boolpublishNEDOdom"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-tf2_rosbuffertfbuffer","text":"","title":"protected tf2_ros::BuffertfBuffer"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-boostshared_ptr-tf2_rostransformlistener-tflistener","text":"","title":"protected boost::shared_ptr&lt; tf2_ros::TransformListener &gt;tfListener"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-ignitionmathvector3dlastlinvel","text":"","title":"protected ignition::math::Vector3dlastLinVel"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-ignitionmathvector3dlastangvel","text":"","title":"protected ignition::math::Vector3dlastAngVel"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-ignitionmathvector3dlinacc","text":"","title":"protected ignition::math::Vector3dlinAcc"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-ignitionmathvector3dangacc","text":"","title":"protected ignition::math::Vector3dangAcc"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-ignitionmathvector3dlastreflinvel","text":"","title":"protected ignition::math::Vector3dlastRefLinVel"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-ignitionmathvector3dlastrefangvel","text":"","title":"protected ignition::math::Vector3dlastRefAngVel"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-ignitionmathvector3dreflinacc","text":"","title":"protected ignition::math::Vector3drefLinAcc"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-ignitionmathvector3drefangacc","text":"","title":"protected ignition::math::Vector3drefAngAcc"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-virtual-boolonupdateconst-commonupdateinfo-_info","text":"Update sensor measurement.","title":"protected virtual boolOnUpdate(const common::UpdateInfo &amp; _info)"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-voidpublishnedodommessagecommontime-_timeignitionmathpose3d-_poseignitionmathvector3d-_linvelignitionmathvector3d-_angvel","text":"","title":"protected voidPublishNEDOdomMessage(common::Time _time,ignition::math::Pose3d _pose,ignition::math::Vector3d _linVel,ignition::math::Vector3d _angVel)"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-voidpublishodommessagecommontime-_timeignitionmathpose3d-_poseignitionmathvector3d-_linvelignitionmathvector3d-_angvel","text":"","title":"protected voidPublishOdomMessage(common::Time _time,ignition::math::Pose3d _pose,ignition::math::Vector3d _linVel,ignition::math::Vector3d _angVel)"},{"location":"packages/uuv_simulator/docs/api/gazebo::PoseGTROSPlugin/#protected-voidupdatenedtransform","text":"","title":"protected voidUpdateNEDTransform()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseModelPlugin/","text":"class gazebo::ROSBaseModelPlugin \u00b6 class gazebo :: ROSBaseModelPlugin : public gazebo :: ROSBasePlugin : public ModelPlugin Summary \u00b6 Members Descriptions public ROSBaseModelPlugin () Class constructor. public virtual ~ROSBaseModelPlugin () Class destructor. protected physics::ModelPtr model Pointer to the model. protected physics::LinkPtr link Pointer to the link. protected bool enableLocalNEDFrame True if a the local NED frame needs to be broadcasted. protected tf::TransformBroadcaster * tfBroadcaster TF broadcaster for the local NED frame. protected ignition::math::Pose3d localNEDFrame Pose of the local NED frame wrt link frame. protected tf::StampedTransform tfLocalNEDFrame Local NED TF frame. protected virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) Load plugin and its configuration from sdf,. protected virtual bool OnUpdate (const common::UpdateInfo &) Update callback from simulation. protected void SendLocalNEDTransform () Returns true if the base_link_ned frame exists. Members \u00b6 public ROSBaseModelPlugin () \u00b6 Class constructor. public virtual ~ROSBaseModelPlugin () \u00b6 Class destructor. protected physics::ModelPtr model \u00b6 Pointer to the model. protected physics::LinkPtr link \u00b6 Pointer to the link. protected bool enableLocalNEDFrame \u00b6 True if a the local NED frame needs to be broadcasted. protected tf::TransformBroadcaster * tfBroadcaster \u00b6 TF broadcaster for the local NED frame. protected ignition::math::Pose3d localNEDFrame \u00b6 Pose of the local NED frame wrt link frame. protected tf::StampedTransform tfLocalNEDFrame \u00b6 Local NED TF frame. protected virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) \u00b6 Load plugin and its configuration from sdf,. protected virtual bool OnUpdate (const common::UpdateInfo &) \u00b6 Update callback from simulation. protected void SendLocalNEDTransform () \u00b6 Returns true if the base_link_ned frame exists.","title":"ROSBaseModelPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseModelPlugin/#class-gazeborosbasemodelplugin","text":"class gazebo :: ROSBaseModelPlugin : public gazebo :: ROSBasePlugin : public ModelPlugin","title":"class gazebo::ROSBaseModelPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseModelPlugin/#summary","text":"Members Descriptions public ROSBaseModelPlugin () Class constructor. public virtual ~ROSBaseModelPlugin () Class destructor. protected physics::ModelPtr model Pointer to the model. protected physics::LinkPtr link Pointer to the link. protected bool enableLocalNEDFrame True if a the local NED frame needs to be broadcasted. protected tf::TransformBroadcaster * tfBroadcaster TF broadcaster for the local NED frame. protected ignition::math::Pose3d localNEDFrame Pose of the local NED frame wrt link frame. protected tf::StampedTransform tfLocalNEDFrame Local NED TF frame. protected virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) Load plugin and its configuration from sdf,. protected virtual bool OnUpdate (const common::UpdateInfo &) Update callback from simulation. protected void SendLocalNEDTransform () Returns true if the base_link_ned frame exists.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseModelPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseModelPlugin/#publicrosbasemodelplugin","text":"Class constructor.","title":"publicROSBaseModelPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseModelPlugin/#public-virtualrosbasemodelplugin","text":"Class destructor.","title":"public virtual~ROSBaseModelPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseModelPlugin/#protected-physicsmodelptrmodel","text":"Pointer to the model.","title":"protected physics::ModelPtrmodel"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseModelPlugin/#protected-physicslinkptrlink","text":"Pointer to the link.","title":"protected physics::LinkPtrlink"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseModelPlugin/#protected-boolenablelocalnedframe","text":"True if a the local NED frame needs to be broadcasted.","title":"protected boolenableLocalNEDFrame"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseModelPlugin/#protected-tftransformbroadcaster-tfbroadcaster","text":"TF broadcaster for the local NED frame.","title":"protected tf::TransformBroadcaster *tfBroadcaster"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseModelPlugin/#protected-ignitionmathpose3dlocalnedframe","text":"Pose of the local NED frame wrt link frame.","title":"protected ignition::math::Pose3dlocalNEDFrame"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseModelPlugin/#protected-tfstampedtransformtflocalnedframe","text":"Local NED TF frame.","title":"protected tf::StampedTransformtfLocalNEDFrame"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseModelPlugin/#protected-virtual-voidloadphysicsmodelptr-_modelsdfelementptr-_sdf","text":"Load plugin and its configuration from sdf,.","title":"protected virtual voidLoad(physics::ModelPtr _model,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseModelPlugin/#protected-virtual-boolonupdateconst-commonupdateinfo","text":"Update callback from simulation.","title":"protected virtual boolOnUpdate(const common::UpdateInfo &amp;)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseModelPlugin/#protected-voidsendlocalnedtransform","text":"Returns true if the base_link_ned frame exists.","title":"protected voidSendLocalNEDTransform()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/","text":"class gazebo::ROSBasePlugin \u00b6 Summary \u00b6 Members Descriptions public ROSBasePlugin () Class constructor. public virtual ~ROSBasePlugin () Class destructor. public bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. public bool OnUpdate (const common::UpdateInfo &) Update callback from simulation. public bool AddNoiseModel (std::string _name,double _sigma) Add noise normal distribution to the list. protected std::string robotNamespace Robot namespace. protected std::string sensorOutputTopic Name of the sensor's output topic. protected physics::WorldPtr world Pointer to the world. protected event::ConnectionPtr updateConnection Pointer to the update event connection. protected common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. protected double updateRate Sensor update rate. protected double noiseSigma Noise standard deviation. protected double noiseAmp Noise amplitude. protected bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. protected std::default_random_engine rndGen Pseudo random number generator. protected std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. protected std_msgs::Bool isOn Flag to control the generation of output messages. protected boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. protected transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. protected ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. protected transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. protected ros::ServiceServer changeSensorSrv Service server object. protected ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. protected ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. protected ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. protected std::string referenceFrameID Frame ID of the reference frame. protected bool isReferenceInit Flag set to true if reference frame initialized. protected physics::LinkPtr referenceLink Reference link. protected bool IsOn () Returns true if the plugin is activated. protected void PublishState () Publish the current state of the plugin. protected bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req,uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) protected void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. protected double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. protected double GetGaussianNoise (std::string _name,double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. protected bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. protected void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame. Members \u00b6 public ROSBasePlugin () \u00b6 Class constructor. public virtual ~ROSBasePlugin () \u00b6 Class destructor. public bool InitBasePlugin (sdf::ElementPtr _sdf) \u00b6 Initialize base plugin. public bool OnUpdate (const common::UpdateInfo &) \u00b6 Update callback from simulation. public bool AddNoiseModel (std::string _name,double _sigma) \u00b6 Add noise normal distribution to the list. protected std::string robotNamespace \u00b6 Robot namespace. protected std::string sensorOutputTopic \u00b6 Name of the sensor's output topic. protected physics::WorldPtr world \u00b6 Pointer to the world. protected event::ConnectionPtr updateConnection \u00b6 Pointer to the update event connection. protected common::Time lastMeasurementTime \u00b6 (Simulation) time when the last sensor measurement was generated. protected double updateRate \u00b6 Sensor update rate. protected double noiseSigma \u00b6 Noise standard deviation. protected double noiseAmp \u00b6 Noise amplitude. protected bool gazeboMsgEnabled \u00b6 Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. protected std::default_random_engine rndGen \u00b6 Pseudo random number generator. protected std::map< std::string, std::normal_distribution< double > > noiseModels \u00b6 Normal distribution describing the noise models. protected std_msgs::Bool isOn \u00b6 Flag to control the generation of output messages. protected boost::shared_ptr< ros::NodeHandle > rosNode \u00b6 ROS node handle for communication with ROS. protected transport::NodePtr gazeboNode \u00b6 Gazebo's node handle for transporting measurement messages. protected ros::Publisher rosSensorOutputPub \u00b6 Gazebo's publisher for transporting measurement messages. protected transport::PublisherPtr gazeboSensorOutputPub \u00b6 Gazebo's publisher for transporting measurement messages. protected ros::ServiceServer changeSensorSrv \u00b6 Service server object. protected ros::Publisher pluginStatePub \u00b6 ROS publisher for the switchable sensor data. protected ignition::math::Pose3d referenceFrame \u00b6 Pose of the reference frame wrt world frame. protected ros::Subscriber tfStaticSub \u00b6 ROS subscriber for the TF static reference frame. protected std::string referenceFrameID \u00b6 Frame ID of the reference frame. protected bool isReferenceInit \u00b6 Flag set to true if reference frame initialized. protected physics::LinkPtr referenceLink \u00b6 Reference link. protected bool IsOn () \u00b6 Returns true if the plugin is activated. protected void PublishState () \u00b6 Publish the current state of the plugin. protected bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req,uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) \u00b6 Change sensor state (ON/OFF) protected void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) \u00b6 Callback function for the static TF message. protected double GetGaussianNoise (double _amp) \u00b6 Returns noise value for a function with zero mean from the default Gaussian noise model. protected double GetGaussianNoise (std::string _name,double _amp) \u00b6 Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. protected bool EnableMeasurement (const common::UpdateInfo & _info) const \u00b6 Enables generation of simulated measurement if the timeout since the last update has been reached. protected void UpdateReferenceFramePose () \u00b6 Updates the pose of the reference frame wrt the world frame.","title":"ROSBasePlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#class-gazeborosbaseplugin","text":"","title":"class gazebo::ROSBasePlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#summary","text":"Members Descriptions public ROSBasePlugin () Class constructor. public virtual ~ROSBasePlugin () Class destructor. public bool InitBasePlugin (sdf::ElementPtr _sdf) Initialize base plugin. public bool OnUpdate (const common::UpdateInfo &) Update callback from simulation. public bool AddNoiseModel (std::string _name,double _sigma) Add noise normal distribution to the list. protected std::string robotNamespace Robot namespace. protected std::string sensorOutputTopic Name of the sensor's output topic. protected physics::WorldPtr world Pointer to the world. protected event::ConnectionPtr updateConnection Pointer to the update event connection. protected common::Time lastMeasurementTime (Simulation) time when the last sensor measurement was generated. protected double updateRate Sensor update rate. protected double noiseSigma Noise standard deviation. protected double noiseAmp Noise amplitude. protected bool gazeboMsgEnabled Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages. protected std::default_random_engine rndGen Pseudo random number generator. protected std::map< std::string, std::normal_distribution< double > > noiseModels Normal distribution describing the noise models. protected std_msgs::Bool isOn Flag to control the generation of output messages. protected boost::shared_ptr< ros::NodeHandle > rosNode ROS node handle for communication with ROS. protected transport::NodePtr gazeboNode Gazebo's node handle for transporting measurement messages. protected ros::Publisher rosSensorOutputPub Gazebo's publisher for transporting measurement messages. protected transport::PublisherPtr gazeboSensorOutputPub Gazebo's publisher for transporting measurement messages. protected ros::ServiceServer changeSensorSrv Service server object. protected ros::Publisher pluginStatePub ROS publisher for the switchable sensor data. protected ignition::math::Pose3d referenceFrame Pose of the reference frame wrt world frame. protected ros::Subscriber tfStaticSub ROS subscriber for the TF static reference frame. protected std::string referenceFrameID Frame ID of the reference frame. protected bool isReferenceInit Flag set to true if reference frame initialized. protected physics::LinkPtr referenceLink Reference link. protected bool IsOn () Returns true if the plugin is activated. protected void PublishState () Publish the current state of the plugin. protected bool ChangeSensorState (uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request & _req,uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response & _res) Change sensor state (ON/OFF) protected void GetTFMessage (const tf::tfMessage::ConstPtr & _msg) Callback function for the static TF message. protected double GetGaussianNoise (double _amp) Returns noise value for a function with zero mean from the default Gaussian noise model. protected double GetGaussianNoise (std::string _name,double _amp) Returns noise value for a function with zero mean from a Gaussian noise model according to the model name. protected bool EnableMeasurement (const common::UpdateInfo & _info) const Enables generation of simulated measurement if the timeout since the last update has been reached. protected void UpdateReferenceFramePose () Updates the pose of the reference frame wrt the world frame.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#publicrosbaseplugin","text":"Class constructor.","title":"publicROSBasePlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#public-virtualrosbaseplugin","text":"Class destructor.","title":"public virtual~ROSBasePlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#public-boolinitbasepluginsdfelementptr-_sdf","text":"Initialize base plugin.","title":"public boolInitBasePlugin(sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#public-boolonupdateconst-commonupdateinfo","text":"Update callback from simulation.","title":"public boolOnUpdate(const common::UpdateInfo &amp;)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#public-booladdnoisemodelstdstring-_namedouble-_sigma","text":"Add noise normal distribution to the list.","title":"public boolAddNoiseModel(std::string _name,double _sigma)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-stdstringrobotnamespace","text":"Robot namespace.","title":"protected std::stringrobotNamespace"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-stdstringsensoroutputtopic","text":"Name of the sensor's output topic.","title":"protected std::stringsensorOutputTopic"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-physicsworldptrworld","text":"Pointer to the world.","title":"protected physics::WorldPtrworld"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-eventconnectionptrupdateconnection","text":"Pointer to the update event connection.","title":"protected event::ConnectionPtrupdateConnection"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-commontimelastmeasurementtime","text":"(Simulation) time when the last sensor measurement was generated.","title":"protected common::TimelastMeasurementTime"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-doubleupdaterate","text":"Sensor update rate.","title":"protected doubleupdateRate"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-doublenoisesigma","text":"Noise standard deviation.","title":"protected doublenoiseSigma"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-doublenoiseamp","text":"Noise amplitude.","title":"protected doublenoiseAmp"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-boolgazebomsgenabled","text":"Flag set to true if the Gazebo sensors messages are supposed to be published as well (it can avoid unnecessary overhead in case) the sensor messages needed are only ROS messages.","title":"protected boolgazeboMsgEnabled"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-stddefault_random_enginerndgen","text":"Pseudo random number generator.","title":"protected std::default_random_enginerndGen"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-stdmap-stdstring-stdnormal_distribution-double-noisemodels","text":"Normal distribution describing the noise models.","title":"protected std::map&lt; std::string, std::normal_distribution&lt; double &gt; &gt;noiseModels"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-std_msgsboolison","text":"Flag to control the generation of output messages.","title":"protected std_msgs::BoolisOn"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-boostshared_ptr-rosnodehandle-rosnode","text":"ROS node handle for communication with ROS.","title":"protected boost::shared_ptr&lt; ros::NodeHandle &gt;rosNode"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-transportnodeptrgazebonode","text":"Gazebo's node handle for transporting measurement messages.","title":"protected transport::NodePtrgazeboNode"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-rospublisherrossensoroutputpub","text":"Gazebo's publisher for transporting measurement messages.","title":"protected ros::PublisherrosSensorOutputPub"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-transportpublisherptrgazebosensoroutputpub","text":"Gazebo's publisher for transporting measurement messages.","title":"protected transport::PublisherPtrgazeboSensorOutputPub"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-rosserviceserverchangesensorsrv","text":"Service server object.","title":"protected ros::ServiceServerchangeSensorSrv"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-rospublisherpluginstatepub","text":"ROS publisher for the switchable sensor data.","title":"protected ros::PublisherpluginStatePub"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-ignitionmathpose3dreferenceframe","text":"Pose of the reference frame wrt world frame.","title":"protected ignition::math::Pose3dreferenceFrame"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-rossubscribertfstaticsub","text":"ROS subscriber for the TF static reference frame.","title":"protected ros::SubscribertfStaticSub"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-stdstringreferenceframeid","text":"Frame ID of the reference frame.","title":"protected std::stringreferenceFrameID"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-boolisreferenceinit","text":"Flag set to true if reference frame initialized.","title":"protected boolisReferenceInit"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-physicslinkptrreferencelink","text":"Reference link.","title":"protected physics::LinkPtrreferenceLink"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-boolison","text":"Returns true if the plugin is activated.","title":"protected boolIsOn()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-voidpublishstate","text":"Publish the current state of the plugin.","title":"protected voidPublishState()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-boolchangesensorstateuuv_sensor_ros_plugins_msgschangesensorstaterequest-_requuv_sensor_ros_plugins_msgschangesensorstateresponse-_res","text":"Change sensor state (ON/OFF)","title":"protected boolChangeSensorState(uuv_sensor_ros_plugins_msgs::ChangeSensorState::Request &amp; _req,uuv_sensor_ros_plugins_msgs::ChangeSensorState::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-voidgettfmessageconst-tftfmessageconstptr-_msg","text":"Callback function for the static TF message.","title":"protected voidGetTFMessage(const tf::tfMessage::ConstPtr &amp; _msg)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-doublegetgaussiannoisedouble-_amp","text":"Returns noise value for a function with zero mean from the default Gaussian noise model.","title":"protected doubleGetGaussianNoise(double _amp)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-doublegetgaussiannoisestdstring-_namedouble-_amp","text":"Returns noise value for a function with zero mean from a Gaussian noise model according to the model name.","title":"protected doubleGetGaussianNoise(std::string _name,double _amp)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-boolenablemeasurementconst-commonupdateinfo-_info-const","text":"Enables generation of simulated measurement if the timeout since the last update has been reached.","title":"protected boolEnableMeasurement(const common::UpdateInfo &amp; _info) const"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBasePlugin/#protected-voidupdatereferenceframepose","text":"Updates the pose of the reference frame wrt the world frame.","title":"protected voidUpdateReferenceFramePose()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseSensorPlugin/","text":"class gazebo::ROSBaseSensorPlugin \u00b6 class gazebo :: ROSBaseSensorPlugin : public gazebo :: ROSBasePlugin : public SensorPlugin Summary \u00b6 Members Descriptions public ROSBaseSensorPlugin () Class constructor. public virtual ~ROSBaseSensorPlugin () Class destructor. protected sensors::SensorPtr parentSensor Pointer to the parent sensor. protected virtual void Load (sensors::SensorPtr _model,sdf::ElementPtr _sdf) Load plugin and its configuration from sdf,. protected virtual bool OnUpdate (const common::UpdateInfo &) Update callback from simulation. Members \u00b6 public ROSBaseSensorPlugin () \u00b6 Class constructor. public virtual ~ROSBaseSensorPlugin () \u00b6 Class destructor. protected sensors::SensorPtr parentSensor \u00b6 Pointer to the parent sensor. protected virtual void Load (sensors::SensorPtr _model,sdf::ElementPtr _sdf) \u00b6 Load plugin and its configuration from sdf,. protected virtual bool OnUpdate (const common::UpdateInfo &) \u00b6 Update callback from simulation.","title":"ROSBaseSensorPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseSensorPlugin/#class-gazeborosbasesensorplugin","text":"class gazebo :: ROSBaseSensorPlugin : public gazebo :: ROSBasePlugin : public SensorPlugin","title":"class gazebo::ROSBaseSensorPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseSensorPlugin/#summary","text":"Members Descriptions public ROSBaseSensorPlugin () Class constructor. public virtual ~ROSBaseSensorPlugin () Class destructor. protected sensors::SensorPtr parentSensor Pointer to the parent sensor. protected virtual void Load (sensors::SensorPtr _model,sdf::ElementPtr _sdf) Load plugin and its configuration from sdf,. protected virtual bool OnUpdate (const common::UpdateInfo &) Update callback from simulation.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseSensorPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseSensorPlugin/#publicrosbasesensorplugin","text":"Class constructor.","title":"publicROSBaseSensorPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseSensorPlugin/#public-virtualrosbasesensorplugin","text":"Class destructor.","title":"public virtual~ROSBaseSensorPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseSensorPlugin/#protected-sensorssensorptrparentsensor","text":"Pointer to the parent sensor.","title":"protected sensors::SensorPtrparentSensor"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseSensorPlugin/#protected-virtual-voidloadsensorssensorptr-_modelsdfelementptr-_sdf","text":"Load plugin and its configuration from sdf,.","title":"protected virtual voidLoad(sensors::SensorPtr _model,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ROSBaseSensorPlugin/#protected-virtual-boolonupdateconst-commonupdateinfo","text":"Update callback from simulation.","title":"protected virtual boolOnUpdate(const common::UpdateInfo &amp;)"},{"location":"packages/uuv_simulator/docs/api/gazebo::RPTROSPlugin/","text":"class gazebo::RPTROSPlugin \u00b6 class gazebo :: RPTROSPlugin : public gazebo :: ROSBaseModelPlugin Summary \u00b6 Members Descriptions public RPTROSPlugin () Class constructor. public virtual ~RPTROSPlugin () Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) Load the plugin. protected ignition::math::Vector3d position Latest measured position. protected uuv_sensor_ros_plugins_msgs::PositionWithCovarianceStamped rosMessage Store message since many attributes do not change (cov.). protected virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. Members \u00b6 public RPTROSPlugin () \u00b6 Class constructor. public virtual ~RPTROSPlugin () \u00b6 Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) \u00b6 Load the plugin. protected ignition::math::Vector3d position \u00b6 Latest measured position. protected uuv_sensor_ros_plugins_msgs::PositionWithCovarianceStamped rosMessage \u00b6 Store message since many attributes do not change (cov.). protected virtual bool OnUpdate (const common::UpdateInfo & _info) \u00b6 Update sensor measurement.","title":"RPTROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::RPTROSPlugin/#class-gazeborptrosplugin","text":"class gazebo :: RPTROSPlugin : public gazebo :: ROSBaseModelPlugin","title":"class gazebo::RPTROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::RPTROSPlugin/#summary","text":"Members Descriptions public RPTROSPlugin () Class constructor. public virtual ~RPTROSPlugin () Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) Load the plugin. protected ignition::math::Vector3d position Latest measured position. protected uuv_sensor_ros_plugins_msgs::PositionWithCovarianceStamped rosMessage Store message since many attributes do not change (cov.). protected virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::RPTROSPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::RPTROSPlugin/#publicrptrosplugin","text":"Class constructor.","title":"publicRPTROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::RPTROSPlugin/#public-virtualrptrosplugin","text":"Class destructor.","title":"public virtual~RPTROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::RPTROSPlugin/#public-virtual-voidloadphysicsmodelptr-_modelsdfelementptr-_sdf","text":"Load the plugin.","title":"public virtual voidLoad(physics::ModelPtr _model,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::RPTROSPlugin/#protected-ignitionmathvector3dposition","text":"Latest measured position.","title":"protected ignition::math::Vector3dposition"},{"location":"packages/uuv_simulator/docs/api/gazebo::RPTROSPlugin/#protected-uuv_sensor_ros_plugins_msgspositionwithcovariancestampedrosmessage","text":"Store message since many attributes do not change (cov.).","title":"protected uuv_sensor_ros_plugins_msgs::PositionWithCovarianceStampedrosMessage"},{"location":"packages/uuv_simulator/docs/api/gazebo::RPTROSPlugin/#protected-virtual-boolonupdateconst-commonupdateinfo-_info","text":"Update sensor measurement.","title":"protected virtual boolOnUpdate(const common::UpdateInfo &amp; _info)"},{"location":"packages/uuv_simulator/docs/api/gazebo::SphericalCoordinatesROSInterfacePlugin/","text":"class gazebo::SphericalCoordinatesROSInterfacePlugin \u00b6 class gazebo :: SphericalCoordinatesROSInterfacePlugin : public WorldPlugin Summary \u00b6 Members Descriptions public SphericalCoordinatesROSInterfacePlugin () Constructor. public virtual ~SphericalCoordinatesROSInterfacePlugin () Destructor. public void Load (physics::WorldPtr _world,sdf::ElementPtr _sdf) Load module and read parameters from SDF. public bool GetOriginSphericalCoord (uuv_world_ros_plugins_msgs::GetOriginSphericalCoord::Request & _req,uuv_world_ros_plugins_msgs::GetOriginSphericalCoord::Response & _res) Service call that returns the origin in WGS84 standard. public bool SetOriginSphericalCoord (uuv_world_ros_plugins_msgs::SetOriginSphericalCoord::Request & _req,uuv_world_ros_plugins_msgs::SetOriginSphericalCoord::Response & _res) Service call that returns the origin in WGS84 standard. public bool TransformToSphericalCoord (uuv_world_ros_plugins_msgs::TransformToSphericalCoord::Request & _req,uuv_world_ros_plugins_msgs::TransformToSphericalCoord::Response & _res) Service call to transform from Cartesian to spherical coordinates. public bool TransformFromSphericalCoord (uuv_world_ros_plugins_msgs::TransformFromSphericalCoord::Request & _req,uuv_world_ros_plugins_msgs::TransformFromSphericalCoord::Response & _res) Service call to transform from spherical to Cartesian coordinates. protected boost::scoped_ptr< ros::NodeHandle > rosNode Pointer to this ROS node's handle. protected event::ConnectionPtr rosPublishConnection Connection for callbacks on update world. protected physics::WorldPtr world Pointer to world. protected std::map< std::string, ros::ServiceServer > worldServices All underwater world services. Members \u00b6 public SphericalCoordinatesROSInterfacePlugin () \u00b6 Constructor. public virtual ~SphericalCoordinatesROSInterfacePlugin () \u00b6 Destructor. public void Load (physics::WorldPtr _world,sdf::ElementPtr _sdf) \u00b6 Load module and read parameters from SDF. public bool GetOriginSphericalCoord (uuv_world_ros_plugins_msgs::GetOriginSphericalCoord::Request & _req,uuv_world_ros_plugins_msgs::GetOriginSphericalCoord::Response & _res) \u00b6 Service call that returns the origin in WGS84 standard. public bool SetOriginSphericalCoord (uuv_world_ros_plugins_msgs::SetOriginSphericalCoord::Request & _req,uuv_world_ros_plugins_msgs::SetOriginSphericalCoord::Response & _res) \u00b6 Service call that returns the origin in WGS84 standard. public bool TransformToSphericalCoord (uuv_world_ros_plugins_msgs::TransformToSphericalCoord::Request & _req,uuv_world_ros_plugins_msgs::TransformToSphericalCoord::Response & _res) \u00b6 Service call to transform from Cartesian to spherical coordinates. public bool TransformFromSphericalCoord (uuv_world_ros_plugins_msgs::TransformFromSphericalCoord::Request & _req,uuv_world_ros_plugins_msgs::TransformFromSphericalCoord::Response & _res) \u00b6 Service call to transform from spherical to Cartesian coordinates. protected boost::scoped_ptr< ros::NodeHandle > rosNode \u00b6 Pointer to this ROS node's handle. protected event::ConnectionPtr rosPublishConnection \u00b6 Connection for callbacks on update world. protected physics::WorldPtr world \u00b6 Pointer to world. protected std::map< std::string, ros::ServiceServer > worldServices \u00b6 All underwater world services.","title":"SphericalCoordinatesROSInterfacePlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::SphericalCoordinatesROSInterfacePlugin/#class-gazebosphericalcoordinatesrosinterfaceplugin","text":"class gazebo :: SphericalCoordinatesROSInterfacePlugin : public WorldPlugin","title":"class gazebo::SphericalCoordinatesROSInterfacePlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::SphericalCoordinatesROSInterfacePlugin/#summary","text":"Members Descriptions public SphericalCoordinatesROSInterfacePlugin () Constructor. public virtual ~SphericalCoordinatesROSInterfacePlugin () Destructor. public void Load (physics::WorldPtr _world,sdf::ElementPtr _sdf) Load module and read parameters from SDF. public bool GetOriginSphericalCoord (uuv_world_ros_plugins_msgs::GetOriginSphericalCoord::Request & _req,uuv_world_ros_plugins_msgs::GetOriginSphericalCoord::Response & _res) Service call that returns the origin in WGS84 standard. public bool SetOriginSphericalCoord (uuv_world_ros_plugins_msgs::SetOriginSphericalCoord::Request & _req,uuv_world_ros_plugins_msgs::SetOriginSphericalCoord::Response & _res) Service call that returns the origin in WGS84 standard. public bool TransformToSphericalCoord (uuv_world_ros_plugins_msgs::TransformToSphericalCoord::Request & _req,uuv_world_ros_plugins_msgs::TransformToSphericalCoord::Response & _res) Service call to transform from Cartesian to spherical coordinates. public bool TransformFromSphericalCoord (uuv_world_ros_plugins_msgs::TransformFromSphericalCoord::Request & _req,uuv_world_ros_plugins_msgs::TransformFromSphericalCoord::Response & _res) Service call to transform from spherical to Cartesian coordinates. protected boost::scoped_ptr< ros::NodeHandle > rosNode Pointer to this ROS node's handle. protected event::ConnectionPtr rosPublishConnection Connection for callbacks on update world. protected physics::WorldPtr world Pointer to world. protected std::map< std::string, ros::ServiceServer > worldServices All underwater world services.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::SphericalCoordinatesROSInterfacePlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::SphericalCoordinatesROSInterfacePlugin/#publicsphericalcoordinatesrosinterfaceplugin","text":"Constructor.","title":"publicSphericalCoordinatesROSInterfacePlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::SphericalCoordinatesROSInterfacePlugin/#public-virtualsphericalcoordinatesrosinterfaceplugin","text":"Destructor.","title":"public virtual~SphericalCoordinatesROSInterfacePlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::SphericalCoordinatesROSInterfacePlugin/#public-voidloadphysicsworldptr-_worldsdfelementptr-_sdf","text":"Load module and read parameters from SDF.","title":"public voidLoad(physics::WorldPtr _world,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::SphericalCoordinatesROSInterfacePlugin/#public-boolgetoriginsphericalcoorduuv_world_ros_plugins_msgsgetoriginsphericalcoordrequest-_requuv_world_ros_plugins_msgsgetoriginsphericalcoordresponse-_res","text":"Service call that returns the origin in WGS84 standard.","title":"public boolGetOriginSphericalCoord(uuv_world_ros_plugins_msgs::GetOriginSphericalCoord::Request &amp; _req,uuv_world_ros_plugins_msgs::GetOriginSphericalCoord::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/gazebo::SphericalCoordinatesROSInterfacePlugin/#public-boolsetoriginsphericalcoorduuv_world_ros_plugins_msgssetoriginsphericalcoordrequest-_requuv_world_ros_plugins_msgssetoriginsphericalcoordresponse-_res","text":"Service call that returns the origin in WGS84 standard.","title":"public boolSetOriginSphericalCoord(uuv_world_ros_plugins_msgs::SetOriginSphericalCoord::Request &amp; _req,uuv_world_ros_plugins_msgs::SetOriginSphericalCoord::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/gazebo::SphericalCoordinatesROSInterfacePlugin/#public-booltransformtosphericalcoorduuv_world_ros_plugins_msgstransformtosphericalcoordrequest-_requuv_world_ros_plugins_msgstransformtosphericalcoordresponse-_res","text":"Service call to transform from Cartesian to spherical coordinates.","title":"public boolTransformToSphericalCoord(uuv_world_ros_plugins_msgs::TransformToSphericalCoord::Request &amp; _req,uuv_world_ros_plugins_msgs::TransformToSphericalCoord::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/gazebo::SphericalCoordinatesROSInterfacePlugin/#public-booltransformfromsphericalcoorduuv_world_ros_plugins_msgstransformfromsphericalcoordrequest-_requuv_world_ros_plugins_msgstransformfromsphericalcoordresponse-_res","text":"Service call to transform from spherical to Cartesian coordinates.","title":"public boolTransformFromSphericalCoord(uuv_world_ros_plugins_msgs::TransformFromSphericalCoord::Request &amp; _req,uuv_world_ros_plugins_msgs::TransformFromSphericalCoord::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/gazebo::SphericalCoordinatesROSInterfacePlugin/#protected-boostscoped_ptr-rosnodehandle-rosnode","text":"Pointer to this ROS node's handle.","title":"protected boost::scoped_ptr&lt; ros::NodeHandle &gt;rosNode"},{"location":"packages/uuv_simulator/docs/api/gazebo::SphericalCoordinatesROSInterfacePlugin/#protected-eventconnectionptrrospublishconnection","text":"Connection for callbacks on update world.","title":"protected event::ConnectionPtrrosPublishConnection"},{"location":"packages/uuv_simulator/docs/api/gazebo::SphericalCoordinatesROSInterfacePlugin/#protected-physicsworldptrworld","text":"Pointer to world.","title":"protected physics::WorldPtrworld"},{"location":"packages/uuv_simulator/docs/api/gazebo::SphericalCoordinatesROSInterfacePlugin/#protected-stdmap-stdstring-rosserviceserver-worldservices","text":"All underwater world services.","title":"protected std::map&lt; std::string, ros::ServiceServer &gt;worldServices"},{"location":"packages/uuv_simulator/docs/api/gazebo::SubseaPressureROSPlugin/","text":"class gazebo::SubseaPressureROSPlugin \u00b6 class gazebo :: SubseaPressureROSPlugin : public gazebo :: ROSBaseModelPlugin Summary \u00b6 Members Descriptions public SubseaPressureROSPlugin () Class constructor. public ~SubseaPressureROSPlugin () Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) Load the plugin. protected double saturation Sensor saturation (max. value for output pressure in Pa) protected bool estimateDepth If flag is set to true, estimate depth according to pressure measurement. protected double standardPressure Standard pressure. protected double kPaPerM Factor of kPa per meter. protected virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement. Members \u00b6 public SubseaPressureROSPlugin () \u00b6 Class constructor. public ~SubseaPressureROSPlugin () \u00b6 Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) \u00b6 Load the plugin. protected double saturation \u00b6 Sensor saturation (max. value for output pressure in Pa) protected bool estimateDepth \u00b6 If flag is set to true, estimate depth according to pressure measurement. protected double standardPressure \u00b6 Standard pressure. protected double kPaPerM \u00b6 Factor of kPa per meter. protected virtual bool OnUpdate (const common::UpdateInfo & _info) \u00b6 Update sensor measurement.","title":"SubseaPressureROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::SubseaPressureROSPlugin/#class-gazebosubseapressurerosplugin","text":"class gazebo :: SubseaPressureROSPlugin : public gazebo :: ROSBaseModelPlugin","title":"class gazebo::SubseaPressureROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::SubseaPressureROSPlugin/#summary","text":"Members Descriptions public SubseaPressureROSPlugin () Class constructor. public ~SubseaPressureROSPlugin () Class destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) Load the plugin. protected double saturation Sensor saturation (max. value for output pressure in Pa) protected bool estimateDepth If flag is set to true, estimate depth according to pressure measurement. protected double standardPressure Standard pressure. protected double kPaPerM Factor of kPa per meter. protected virtual bool OnUpdate (const common::UpdateInfo & _info) Update sensor measurement.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::SubseaPressureROSPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::SubseaPressureROSPlugin/#publicsubseapressurerosplugin","text":"Class constructor.","title":"publicSubseaPressureROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::SubseaPressureROSPlugin/#publicsubseapressurerosplugin_1","text":"Class destructor.","title":"public~SubseaPressureROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::SubseaPressureROSPlugin/#public-virtual-voidloadphysicsmodelptr-_modelsdfelementptr-_sdf","text":"Load the plugin.","title":"public virtual voidLoad(physics::ModelPtr _model,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::SubseaPressureROSPlugin/#protected-doublesaturation","text":"Sensor saturation (max. value for output pressure in Pa)","title":"protected doublesaturation"},{"location":"packages/uuv_simulator/docs/api/gazebo::SubseaPressureROSPlugin/#protected-boolestimatedepth","text":"If flag is set to true, estimate depth according to pressure measurement.","title":"protected boolestimateDepth"},{"location":"packages/uuv_simulator/docs/api/gazebo::SubseaPressureROSPlugin/#protected-doublestandardpressure","text":"Standard pressure.","title":"protected doublestandardPressure"},{"location":"packages/uuv_simulator/docs/api/gazebo::SubseaPressureROSPlugin/#protected-doublekpaperm","text":"Factor of kPa per meter.","title":"protected doublekPaPerM"},{"location":"packages/uuv_simulator/docs/api/gazebo::SubseaPressureROSPlugin/#protected-virtual-boolonupdateconst-commonupdateinfo-_info","text":"Update sensor measurement.","title":"protected virtual boolOnUpdate(const common::UpdateInfo &amp; _info)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterDynamicsBessa/","text":"class gazebo::ThrusterDynamicsBessa \u00b6 class gazebo :: ThrusterDynamicsBessa : public gazebo :: Dynamics Bessa's dynamic thruster model. This is \"Model 2\" described in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation. Summary \u00b6 Members Descriptions public inline virtual std::string GetType () Return (derived) type of dynamic system. public virtual double update (double _cmd,double _t) Update dynamical model given input value and time. Members \u00b6 public inline virtual std::string GetType () \u00b6 Return (derived) type of dynamic system. public virtual double update (double _cmd,double _t) \u00b6 Update dynamical model given input value and time.","title":"ThrusterDynamicsBessa"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterDynamicsBessa/#class-gazebothrusterdynamicsbessa","text":"class gazebo :: ThrusterDynamicsBessa : public gazebo :: Dynamics Bessa's dynamic thruster model. This is \"Model 2\" described in Bessa et al.: Dynamic Positioning of Underwater Robotic Vehicles with Thruster Dynamics Compensation.","title":"class gazebo::ThrusterDynamicsBessa"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterDynamicsBessa/#summary","text":"Members Descriptions public inline virtual std::string GetType () Return (derived) type of dynamic system. public virtual double update (double _cmd,double _t) Update dynamical model given input value and time.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterDynamicsBessa/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterDynamicsBessa/#public-inline-virtual-stdstringgettype","text":"Return (derived) type of dynamic system.","title":"public inline virtual std::stringGetType()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterDynamicsBessa/#public-virtual-doubleupdatedouble-_cmddouble-_t","text":"Update dynamical model given input value and time.","title":"public virtual doubleupdate(double _cmd,double _t)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterDynamicsYoerger/","text":"class gazebo::ThrusterDynamicsYoerger \u00b6 class gazebo :: ThrusterDynamicsYoerger : public gazebo :: Dynamics Yoerger's dynamic thruster model. This is the lumped-parameter model of Yoerger et al.: The influence of thruster dynamics on underwater vehicle behavior and their incorporation into control system design. (1990) Summary \u00b6 Members Descriptions public inline virtual std::string GetType () Return (derived) type of dynamic system. public virtual double update (double _cmd,double _t) Update dynamical model given input value and time. Members \u00b6 public inline virtual std::string GetType () \u00b6 Return (derived) type of dynamic system. public virtual double update (double _cmd,double _t) \u00b6 Update dynamical model given input value and time.","title":"ThrusterDynamicsYoerger"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterDynamicsYoerger/#class-gazebothrusterdynamicsyoerger","text":"class gazebo :: ThrusterDynamicsYoerger : public gazebo :: Dynamics Yoerger's dynamic thruster model. This is the lumped-parameter model of Yoerger et al.: The influence of thruster dynamics on underwater vehicle behavior and their incorporation into control system design. (1990)","title":"class gazebo::ThrusterDynamicsYoerger"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterDynamicsYoerger/#summary","text":"Members Descriptions public inline virtual std::string GetType () Return (derived) type of dynamic system. public virtual double update (double _cmd,double _t) Update dynamical model given input value and time.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterDynamicsYoerger/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterDynamicsYoerger/#public-inline-virtual-stdstringgettype","text":"Return (derived) type of dynamic system.","title":"public inline virtual std::stringGetType()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterDynamicsYoerger/#public-virtual-doubleupdatedouble-_cmddouble-_t","text":"Update dynamical model given input value and time.","title":"public virtual doubleupdate(double _cmd,double _t)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/","text":"class gazebo::ThrusterPlugin \u00b6 class gazebo :: ThrusterPlugin : public ModelPlugin Class for the thruster plugin. Summary \u00b6 Members Descriptions public ThrusterPlugin () Constructor. public virtual ~ThrusterPlugin () Destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) public virtual void Init () public virtual void Reset () Custom plugin reset behavior. public void Update (const common::UpdateInfo & _info) Update the simulation state. protected std::shared_ptr< Dynamics > thrusterDynamics Thruster dynamic model. protected std::shared_ptr< ConversionFunction > conversionFunction Thruster conversion function. protected event::ConnectionPtr updateConnection Update event. protected physics::LinkPtr thrusterLink Pointer to the thruster link. protected transport::NodePtr node Gazebo node. protected transport::SubscriberPtr commandSubscriber Subscriber to the reference signal topic. protected transport::PublisherPtr thrustTopicPublisher Publisher to the output thrust topic. protected double inputCommand Input command, typically desired angular velocity of the rotor. protected double thrustForce Latest thrust force in [N]. protected common::Time thrustForceStamp Time stamp of latest thrust force. protected physics::JointPtr joint Optional: The rotor joint, used for visualization. protected double clampMin : Optional: Commands less than this value will be clamped. protected double clampMax : Optional: Commands greater than this value will be clamped. protected double thrustMin : Optional: Minimum thrust force output protected double thrustMax : Optional: Maximum thrust force output protected int thrusterID Thruster ID, used to generated topic names automatically. protected std::string topicPrefix Thruster topics prefix. protected double gain : Optional: Gain factor: Desired angular velocity = command * gain protected bool isOn Optional: Flag to indicate if the thruster is turned on or off. protected double thrustEfficiency Optional: Output thrust efficiency factor of the thruster. protected double propellerEfficiency Optional: Propeller angular velocity efficiency term. protected ignition::math::Vector3d thrusterAxis The axis about which the thruster rotates. protected void UpdateInput ( ConstDoublePtr & _msg) Callback for the input topic subscriber. Members \u00b6 public ThrusterPlugin () \u00b6 Constructor. public virtual ~ThrusterPlugin () \u00b6 Destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) \u00b6 public virtual void Init () \u00b6 public virtual void Reset () \u00b6 Custom plugin reset behavior. public void Update (const common::UpdateInfo & _info) \u00b6 Update the simulation state. Parameters \u00b6 _info Information used in the update event. protected std::shared_ptr< Dynamics > thrusterDynamics \u00b6 Thruster dynamic model. protected std::shared_ptr< ConversionFunction > conversionFunction \u00b6 Thruster conversion function. protected event::ConnectionPtr updateConnection \u00b6 Update event. protected physics::LinkPtr thrusterLink \u00b6 Pointer to the thruster link. protected transport::NodePtr node \u00b6 Gazebo node. protected transport::SubscriberPtr commandSubscriber \u00b6 Subscriber to the reference signal topic. protected transport::PublisherPtr thrustTopicPublisher \u00b6 Publisher to the output thrust topic. protected double inputCommand \u00b6 Input command, typically desired angular velocity of the rotor. protected double thrustForce \u00b6 Latest thrust force in [N]. protected common::Time thrustForceStamp \u00b6 Time stamp of latest thrust force. protected physics::JointPtr joint \u00b6 Optional: The rotor joint, used for visualization. protected double clampMin \u00b6 Optional: Commands less than this value will be clamped. protected double clampMax \u00b6 Optional: Commands greater than this value will be clamped. protected double thrustMin \u00b6 Optional: Minimum thrust force output protected double thrustMax \u00b6 Optional: Maximum thrust force output protected int thrusterID \u00b6 Thruster ID, used to generated topic names automatically. protected std::string topicPrefix \u00b6 Thruster topics prefix. protected double gain \u00b6 Optional: Gain factor: Desired angular velocity = command * gain protected bool isOn \u00b6 Optional: Flag to indicate if the thruster is turned on or off. protected double thrustEfficiency \u00b6 Optional: Output thrust efficiency factor of the thruster. protected double propellerEfficiency \u00b6 Optional: Propeller angular velocity efficiency term. protected ignition::math::Vector3d thrusterAxis \u00b6 The axis about which the thruster rotates. protected void UpdateInput ( ConstDoublePtr & _msg) \u00b6 Callback for the input topic subscriber.","title":"ThrusterPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#class-gazebothrusterplugin","text":"class gazebo :: ThrusterPlugin : public ModelPlugin Class for the thruster plugin.","title":"class gazebo::ThrusterPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#summary","text":"Members Descriptions public ThrusterPlugin () Constructor. public virtual ~ThrusterPlugin () Destructor. public virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) public virtual void Init () public virtual void Reset () Custom plugin reset behavior. public void Update (const common::UpdateInfo & _info) Update the simulation state. protected std::shared_ptr< Dynamics > thrusterDynamics Thruster dynamic model. protected std::shared_ptr< ConversionFunction > conversionFunction Thruster conversion function. protected event::ConnectionPtr updateConnection Update event. protected physics::LinkPtr thrusterLink Pointer to the thruster link. protected transport::NodePtr node Gazebo node. protected transport::SubscriberPtr commandSubscriber Subscriber to the reference signal topic. protected transport::PublisherPtr thrustTopicPublisher Publisher to the output thrust topic. protected double inputCommand Input command, typically desired angular velocity of the rotor. protected double thrustForce Latest thrust force in [N]. protected common::Time thrustForceStamp Time stamp of latest thrust force. protected physics::JointPtr joint Optional: The rotor joint, used for visualization. protected double clampMin : Optional: Commands less than this value will be clamped. protected double clampMax : Optional: Commands greater than this value will be clamped. protected double thrustMin : Optional: Minimum thrust force output protected double thrustMax : Optional: Maximum thrust force output protected int thrusterID Thruster ID, used to generated topic names automatically. protected std::string topicPrefix Thruster topics prefix. protected double gain : Optional: Gain factor: Desired angular velocity = command * gain protected bool isOn Optional: Flag to indicate if the thruster is turned on or off. protected double thrustEfficiency Optional: Output thrust efficiency factor of the thruster. protected double propellerEfficiency Optional: Propeller angular velocity efficiency term. protected ignition::math::Vector3d thrusterAxis The axis about which the thruster rotates. protected void UpdateInput ( ConstDoublePtr & _msg) Callback for the input topic subscriber.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#publicthrusterplugin","text":"Constructor.","title":"publicThrusterPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#public-virtualthrusterplugin","text":"Destructor.","title":"public virtual~ThrusterPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#public-virtual-voidloadphysicsmodelptr-_modelsdfelementptr-_sdf","text":"","title":"public virtual voidLoad(physics::ModelPtr _model,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#public-virtual-voidinit","text":"","title":"public virtual voidInit()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#public-virtual-voidreset","text":"Custom plugin reset behavior.","title":"public virtual voidReset()"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#public-voidupdateconst-commonupdateinfo-_info","text":"Update the simulation state.","title":"public voidUpdate(const common::UpdateInfo &amp; _info)"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#parameters","text":"_info Information used in the update event.","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-stdshared_ptrdynamicsthrusterdynamics","text":"Thruster dynamic model.","title":"protected std::shared_ptr&lt;Dynamics&gt;thrusterDynamics"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-stdshared_ptrconversionfunctionconversionfunction","text":"Thruster conversion function.","title":"protected std::shared_ptr&lt;ConversionFunction&gt;conversionFunction"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-eventconnectionptrupdateconnection","text":"Update event.","title":"protected event::ConnectionPtrupdateConnection"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-physicslinkptrthrusterlink","text":"Pointer to the thruster link.","title":"protected physics::LinkPtrthrusterLink"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-transportnodeptrnode","text":"Gazebo node.","title":"protected transport::NodePtrnode"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-transportsubscriberptrcommandsubscriber","text":"Subscriber to the reference signal topic.","title":"protected transport::SubscriberPtrcommandSubscriber"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-transportpublisherptrthrusttopicpublisher","text":"Publisher to the output thrust topic.","title":"protected transport::PublisherPtrthrustTopicPublisher"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-doubleinputcommand","text":"Input command, typically desired angular velocity of the rotor.","title":"protected doubleinputCommand"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-doublethrustforce","text":"Latest thrust force in [N].","title":"protected doublethrustForce"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-commontimethrustforcestamp","text":"Time stamp of latest thrust force.","title":"protected common::TimethrustForceStamp"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-physicsjointptrjoint","text":"Optional: The rotor joint, used for visualization.","title":"protected physics::JointPtrjoint"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-doubleclampmin","text":"Optional: Commands less than this value will be clamped.","title":"protected doubleclampMin"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-doubleclampmax","text":"Optional: Commands greater than this value will be clamped.","title":"protected doubleclampMax"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-doublethrustmin","text":"Optional: Minimum thrust force output","title":"protected doublethrustMin"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-doublethrustmax","text":"Optional: Maximum thrust force output","title":"protected doublethrustMax"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-intthrusterid","text":"Thruster ID, used to generated topic names automatically.","title":"protected intthrusterID"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-stdstringtopicprefix","text":"Thruster topics prefix.","title":"protected std::stringtopicPrefix"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-doublegain","text":"Optional: Gain factor: Desired angular velocity = command * gain","title":"protected doublegain"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-boolison","text":"Optional: Flag to indicate if the thruster is turned on or off.","title":"protected boolisOn"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-doublethrustefficiency","text":"Optional: Output thrust efficiency factor of the thruster.","title":"protected doublethrustEfficiency"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-doublepropellerefficiency","text":"Optional: Propeller angular velocity efficiency term.","title":"protected doublepropellerEfficiency"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-ignitionmathvector3dthrusteraxis","text":"The axis about which the thruster rotates.","title":"protected ignition::math::Vector3dthrusterAxis"},{"location":"packages/uuv_simulator/docs/api/gazebo::ThrusterPlugin/#protected-voidupdateinputconstdoubleptr-_msg","text":"Callback for the input topic subscriber.","title":"protected voidUpdateInput(ConstDoublePtr&amp; _msg)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModel/","text":"class gazebo::UmbilicalModel \u00b6 Summary \u00b6 Members Descriptions public inline virtual ~UmbilicalModel () Destructor. public virtual void Init () Initialize model. public void OnUpdate (const common::UpdateInfo & _info,const ignition::math::Vector3d & _flow) Update Umbilical (and apply forces) protected physics::ModelPtr model Gazebo model to which this umbilical belongs. protected physics::LinkPtr connector Moving connector link of this umbilical. protected inline UmbilicalModel () Protected constructor: Use the factory instead. Members \u00b6 public inline virtual ~UmbilicalModel () \u00b6 Destructor. public virtual void Init () \u00b6 Initialize model. public void OnUpdate (const common::UpdateInfo & _info,const ignition::math::Vector3d & _flow) \u00b6 Update Umbilical (and apply forces) protected physics::ModelPtr model \u00b6 Gazebo model to which this umbilical belongs. protected physics::LinkPtr connector \u00b6 Moving connector link of this umbilical. protected inline UmbilicalModel () \u00b6 Protected constructor: Use the factory instead.","title":"class `gazebo::UmbilicalModel`"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModel/#class-gazeboumbilicalmodel","text":"","title":"class gazebo::UmbilicalModel"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModel/#summary","text":"Members Descriptions public inline virtual ~UmbilicalModel () Destructor. public virtual void Init () Initialize model. public void OnUpdate (const common::UpdateInfo & _info,const ignition::math::Vector3d & _flow) Update Umbilical (and apply forces) protected physics::ModelPtr model Gazebo model to which this umbilical belongs. protected physics::LinkPtr connector Moving connector link of this umbilical. protected inline UmbilicalModel () Protected constructor: Use the factory instead.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModel/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModel/#public-inline-virtualumbilicalmodel","text":"Destructor.","title":"public inline virtual~UmbilicalModel()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModel/#public-virtual-voidinit","text":"Initialize model.","title":"public virtual voidInit()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModel/#public-voidonupdateconst-commonupdateinfo-_infoconst-ignitionmathvector3d-_flow","text":"Update Umbilical (and apply forces)","title":"public voidOnUpdate(const common::UpdateInfo &amp; _info,const ignition::math::Vector3d &amp; _flow)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModel/#protected-physicsmodelptrmodel","text":"Gazebo model to which this umbilical belongs.","title":"protected physics::ModelPtrmodel"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModel/#protected-physicslinkptrconnector","text":"Moving connector link of this umbilical.","title":"protected physics::LinkPtrconnector"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModel/#protected-inlineumbilicalmodel","text":"Protected constructor: Use the factory instead.","title":"protected inlineUmbilicalModel()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModelBerg/","text":"class gazebo::UmbilicalModelBerg \u00b6 class gazebo :: UmbilicalModelBerg : public gazebo :: UmbilicalModel Summary \u00b6 Members Descriptions public virtual void OnUpdate (const common::UpdateInfo & _info,const ignition::math::Vector3d & _flow) Update Umbilical (and apply forces) protected UmbilicalModelBerg (sdf::ElementPtr _sdf,physics::ModelPtr _model) Protected constructor: Use the factory instead. Members \u00b6 public virtual void OnUpdate (const common::UpdateInfo & _info,const ignition::math::Vector3d & _flow) \u00b6 Update Umbilical (and apply forces) protected UmbilicalModelBerg (sdf::ElementPtr _sdf,physics::ModelPtr _model) \u00b6 Protected constructor: Use the factory instead.","title":"class `gazebo::UmbilicalModelBerg`"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModelBerg/#class-gazeboumbilicalmodelberg","text":"class gazebo :: UmbilicalModelBerg : public gazebo :: UmbilicalModel","title":"class gazebo::UmbilicalModelBerg"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModelBerg/#summary","text":"Members Descriptions public virtual void OnUpdate (const common::UpdateInfo & _info,const ignition::math::Vector3d & _flow) Update Umbilical (and apply forces) protected UmbilicalModelBerg (sdf::ElementPtr _sdf,physics::ModelPtr _model) Protected constructor: Use the factory instead.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModelBerg/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModelBerg/#public-virtual-voidonupdateconst-commonupdateinfo-_infoconst-ignitionmathvector3d-_flow","text":"Update Umbilical (and apply forces)","title":"public virtual voidOnUpdate(const common::UpdateInfo &amp; _info,const ignition::math::Vector3d &amp; _flow)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModelBerg/#protectedumbilicalmodelbergsdfelementptr-_sdfphysicsmodelptr-_model","text":"Protected constructor: Use the factory instead.","title":"protectedUmbilicalModelBerg(sdf::ElementPtr _sdf,physics::ModelPtr _model)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModelFactory/","text":"class gazebo::UmbilicalModelFactory \u00b6 Factory singleton class that creates an UmbilicalModel from sdf. Summary \u00b6 Members Descriptions public UmbilicalModel * CreateUmbilicalModel (sdf::ElementPtr _sdf,physics::ModelPtr _model) Create a ConversionFunction object according to its sdf Description. public bool RegisterCreator (const std::string & _identifier,UmbilicalModelCreator _creator) Register an UmbilicalModel class with its creator. Members \u00b6 public UmbilicalModel * CreateUmbilicalModel (sdf::ElementPtr _sdf,physics::ModelPtr _model) \u00b6 Create a ConversionFunction object according to its sdf Description. public bool RegisterCreator (const std::string & _identifier,UmbilicalModelCreator _creator) \u00b6 Register an UmbilicalModel class with its creator.","title":"class `gazebo::UmbilicalModelFactory`"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModelFactory/#class-gazeboumbilicalmodelfactory","text":"Factory singleton class that creates an UmbilicalModel from sdf.","title":"class gazebo::UmbilicalModelFactory"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModelFactory/#summary","text":"Members Descriptions public UmbilicalModel * CreateUmbilicalModel (sdf::ElementPtr _sdf,physics::ModelPtr _model) Create a ConversionFunction object according to its sdf Description. public bool RegisterCreator (const std::string & _identifier,UmbilicalModelCreator _creator) Register an UmbilicalModel class with its creator.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModelFactory/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModelFactory/#publicumbilicalmodelcreateumbilicalmodelsdfelementptr-_sdfphysicsmodelptr-_model","text":"Create a ConversionFunction object according to its sdf Description.","title":"publicUmbilicalModel*CreateUmbilicalModel(sdf::ElementPtr _sdf,physics::ModelPtr _model)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalModelFactory/#public-boolregistercreatorconst-stdstring-_identifierumbilicalmodelcreator-_creator","text":"Register an UmbilicalModel class with its creator.","title":"public boolRegisterCreator(const std::string &amp; _identifier,UmbilicalModelCreator _creator)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalPlugin/","text":"class gazebo::UmbilicalPlugin \u00b6 class gazebo :: UmbilicalPlugin : public ModelPlugin Summary \u00b6 Members Descriptions public UmbilicalPlugin () Destructor. public ~UmbilicalPlugin () Constructor. protected event::ConnectionPtr updateConnection Pointer to the update event connection. protected gazebo::physics::ModelPtr model Pointer to the model structure. protected gazebo::physics::WorldPtr world Pointer to the world plugin. protected gazebo::transport::NodePtr node Gazebo node. protected gazebo::transport::SubscriberPtr flowSubscriber Subcriber to flow message. protected ignition::math::Vector3d flowVelocity Flow velocity vector read from topic. protected std::shared_ptr< UmbilicalModel > umbilical Pointer to UmbilicalModel used in this plugin. protected virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) Load plugin and its configuration from sdf. protected virtual void OnUpdate (const common::UpdateInfo &) Update callback from simulation. protected void UpdateFlowVelocity (ConstVector3dPtr & _msg) Reads flow velocity topic. Members \u00b6 public UmbilicalPlugin () \u00b6 Destructor. public ~UmbilicalPlugin () \u00b6 Constructor. protected event::ConnectionPtr updateConnection \u00b6 Pointer to the update event connection. protected gazebo::physics::ModelPtr model \u00b6 Pointer to the model structure. protected gazebo::physics::WorldPtr world \u00b6 Pointer to the world plugin. protected gazebo::transport::NodePtr node \u00b6 Gazebo node. protected gazebo::transport::SubscriberPtr flowSubscriber \u00b6 Subcriber to flow message. protected ignition::math::Vector3d flowVelocity \u00b6 Flow velocity vector read from topic. protected std::shared_ptr< UmbilicalModel > umbilical \u00b6 Pointer to UmbilicalModel used in this plugin. protected virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) \u00b6 Load plugin and its configuration from sdf. protected virtual void OnUpdate (const common::UpdateInfo &) \u00b6 Update callback from simulation. protected void UpdateFlowVelocity (ConstVector3dPtr & _msg) \u00b6 Reads flow velocity topic.","title":"class `gazebo::UmbilicalPlugin`"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalPlugin/#class-gazeboumbilicalplugin","text":"class gazebo :: UmbilicalPlugin : public ModelPlugin","title":"class gazebo::UmbilicalPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalPlugin/#summary","text":"Members Descriptions public UmbilicalPlugin () Destructor. public ~UmbilicalPlugin () Constructor. protected event::ConnectionPtr updateConnection Pointer to the update event connection. protected gazebo::physics::ModelPtr model Pointer to the model structure. protected gazebo::physics::WorldPtr world Pointer to the world plugin. protected gazebo::transport::NodePtr node Gazebo node. protected gazebo::transport::SubscriberPtr flowSubscriber Subcriber to flow message. protected ignition::math::Vector3d flowVelocity Flow velocity vector read from topic. protected std::shared_ptr< UmbilicalModel > umbilical Pointer to UmbilicalModel used in this plugin. protected virtual void Load (physics::ModelPtr _model,sdf::ElementPtr _sdf) Load plugin and its configuration from sdf. protected virtual void OnUpdate (const common::UpdateInfo &) Update callback from simulation. protected void UpdateFlowVelocity (ConstVector3dPtr & _msg) Reads flow velocity topic.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalPlugin/#publicumbilicalplugin","text":"Destructor.","title":"publicUmbilicalPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalPlugin/#publicumbilicalplugin_1","text":"Constructor.","title":"public~UmbilicalPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalPlugin/#protected-eventconnectionptrupdateconnection","text":"Pointer to the update event connection.","title":"protected event::ConnectionPtrupdateConnection"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalPlugin/#protected-gazebophysicsmodelptrmodel","text":"Pointer to the model structure.","title":"protected gazebo::physics::ModelPtrmodel"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalPlugin/#protected-gazebophysicsworldptrworld","text":"Pointer to the world plugin.","title":"protected gazebo::physics::WorldPtrworld"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalPlugin/#protected-gazebotransportnodeptrnode","text":"Gazebo node.","title":"protected gazebo::transport::NodePtrnode"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalPlugin/#protected-gazebotransportsubscriberptrflowsubscriber","text":"Subcriber to flow message.","title":"protected gazebo::transport::SubscriberPtrflowSubscriber"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalPlugin/#protected-ignitionmathvector3dflowvelocity","text":"Flow velocity vector read from topic.","title":"protected ignition::math::Vector3dflowVelocity"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalPlugin/#protected-stdshared_ptrumbilicalmodelumbilical","text":"Pointer to UmbilicalModel used in this plugin.","title":"protected std::shared_ptr&lt;UmbilicalModel&gt;umbilical"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalPlugin/#protected-virtual-voidloadphysicsmodelptr-_modelsdfelementptr-_sdf","text":"Load plugin and its configuration from sdf.","title":"protected virtual voidLoad(physics::ModelPtr _model,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalPlugin/#protected-virtual-voidonupdateconst-commonupdateinfo","text":"Update callback from simulation.","title":"protected virtual voidOnUpdate(const common::UpdateInfo &amp;)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalPlugin/#protected-voidupdateflowvelocityconstvector3dptr-_msg","text":"Reads flow velocity topic.","title":"protected voidUpdateFlowVelocity(ConstVector3dPtr &amp; _msg)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalSegment/","text":"class gazebo::UmbilicalSegment \u00b6 Summary \u00b6 Members Descriptions public physics::LinkPtr link public physics::LinkPtr linkA public physics::JointPtr jointA public physics::JointPtr jointB public std::shared_ptr< UmbilicalSegment > prev public std::shared_ptr< UmbilicalSegment > next public inline UmbilicalSegment () public UmbilicalSegment (const std::string & _name,const std::string & _fromLink,const ignition::math::Pose3d & _fromPose,const ignition::math::Pose3d & _toPose,physics::ModelPtr _model) public void initSdfSegment () Members \u00b6 public physics::LinkPtr link \u00b6 public physics::LinkPtr linkA \u00b6 public physics::JointPtr jointA \u00b6 public physics::JointPtr jointB \u00b6 public std::shared_ptr< UmbilicalSegment > prev \u00b6 public std::shared_ptr< UmbilicalSegment > next \u00b6 public inline UmbilicalSegment () \u00b6 public UmbilicalSegment (const std::string & _name,const std::string & _fromLink,const ignition::math::Pose3d & _fromPose,const ignition::math::Pose3d & _toPose,physics::ModelPtr _model) \u00b6 public void initSdfSegment () \u00b6","title":"class `gazebo::UmbilicalSegment`"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalSegment/#class-gazeboumbilicalsegment","text":"","title":"class gazebo::UmbilicalSegment"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalSegment/#summary","text":"Members Descriptions public physics::LinkPtr link public physics::LinkPtr linkA public physics::JointPtr jointA public physics::JointPtr jointB public std::shared_ptr< UmbilicalSegment > prev public std::shared_ptr< UmbilicalSegment > next public inline UmbilicalSegment () public UmbilicalSegment (const std::string & _name,const std::string & _fromLink,const ignition::math::Pose3d & _fromPose,const ignition::math::Pose3d & _toPose,physics::ModelPtr _model) public void initSdfSegment ()","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalSegment/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalSegment/#public-physicslinkptrlink","text":"","title":"public physics::LinkPtrlink"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalSegment/#public-physicslinkptrlinka","text":"","title":"public physics::LinkPtrlinkA"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalSegment/#public-physicsjointptrjointa","text":"","title":"public physics::JointPtrjointA"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalSegment/#public-physicsjointptrjointb","text":"","title":"public physics::JointPtrjointB"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalSegment/#public-stdshared_ptrumbilicalsegmentprev","text":"","title":"public std::shared_ptr&lt;UmbilicalSegment&gt;prev"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalSegment/#public-stdshared_ptrumbilicalsegmentnext","text":"","title":"public std::shared_ptr&lt;UmbilicalSegment&gt;next"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalSegment/#public-inlineumbilicalsegment","text":"","title":"public inlineUmbilicalSegment()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalSegment/#publicumbilicalsegmentconst-stdstring-_nameconst-stdstring-_fromlinkconst-ignitionmathpose3d-_fromposeconst-ignitionmathpose3d-_toposephysicsmodelptr-_model","text":"","title":"publicUmbilicalSegment(const std::string &amp; _name,const std::string &amp; _fromLink,const ignition::math::Pose3d &amp; _fromPose,const ignition::math::Pose3d &amp; _toPose,physics::ModelPtr _model)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UmbilicalSegment/#public-voidinitsdfsegment","text":"","title":"public voidinitSdfSegment()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCameraROSPlugin/","text":"class gazebo::UnderwaterCameraROSPlugin \u00b6 class gazebo :: UnderwaterCameraROSPlugin : public DepthCameraPlugin : public GazeboRosCameraUtils Summary \u00b6 Members Descriptions public UnderwaterCameraROSPlugin () Class constructor. public virtual ~UnderwaterCameraROSPlugin () Class destructor. public void Load (sensors::SensorPtr _sensor,sdf::ElementPtr _sdf) Load plugin and its configuration from sdf. public virtual void OnNewDepthFrame (const float * _image,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string & _format) public virtual void OnNewRGBPointCloud (const float * _pcd,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string & _format) Update the controller. public virtual void OnNewImageFrame (const unsigned char * _image,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string & _format) protected const float * lastDepth Temporarily store pointer to previous depth image. protected unsigned char * lastImage Latest simulated image. protected float * depth2rangeLUT Depth to range lookup table (LUT) protected float attenuation Attenuation constants per channel (RGB) protected unsigned char background Background constants per channel (RGB) protected virtual void SimulateUnderwater (const cv::Mat & _inputImage,const cv::Mat & _inputDepth,cv::Mat & _outputImage) Add underwater light damping to image. Members \u00b6 public UnderwaterCameraROSPlugin () \u00b6 Class constructor. public virtual ~UnderwaterCameraROSPlugin () \u00b6 Class destructor. public void Load (sensors::SensorPtr _sensor,sdf::ElementPtr _sdf) \u00b6 Load plugin and its configuration from sdf. public virtual void OnNewDepthFrame (const float * _image,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string & _format) \u00b6 public virtual void OnNewRGBPointCloud (const float * _pcd,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string & _format) \u00b6 Update the controller. public virtual void OnNewImageFrame (const unsigned char * _image,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string & _format) \u00b6 protected const float * lastDepth \u00b6 Temporarily store pointer to previous depth image. protected unsigned char * lastImage \u00b6 Latest simulated image. protected float * depth2rangeLUT \u00b6 Depth to range lookup table (LUT) protected float attenuation \u00b6 Attenuation constants per channel (RGB) protected unsigned char background \u00b6 Background constants per channel (RGB) protected virtual void SimulateUnderwater (const cv::Mat & _inputImage,const cv::Mat & _inputDepth,cv::Mat & _outputImage) \u00b6 Add underwater light damping to image.","title":"UnderwaterCameraROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCameraROSPlugin/#class-gazebounderwatercamerarosplugin","text":"class gazebo :: UnderwaterCameraROSPlugin : public DepthCameraPlugin : public GazeboRosCameraUtils","title":"class gazebo::UnderwaterCameraROSPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCameraROSPlugin/#summary","text":"Members Descriptions public UnderwaterCameraROSPlugin () Class constructor. public virtual ~UnderwaterCameraROSPlugin () Class destructor. public void Load (sensors::SensorPtr _sensor,sdf::ElementPtr _sdf) Load plugin and its configuration from sdf. public virtual void OnNewDepthFrame (const float * _image,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string & _format) public virtual void OnNewRGBPointCloud (const float * _pcd,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string & _format) Update the controller. public virtual void OnNewImageFrame (const unsigned char * _image,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string & _format) protected const float * lastDepth Temporarily store pointer to previous depth image. protected unsigned char * lastImage Latest simulated image. protected float * depth2rangeLUT Depth to range lookup table (LUT) protected float attenuation Attenuation constants per channel (RGB) protected unsigned char background Background constants per channel (RGB) protected virtual void SimulateUnderwater (const cv::Mat & _inputImage,const cv::Mat & _inputDepth,cv::Mat & _outputImage) Add underwater light damping to image.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCameraROSPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCameraROSPlugin/#publicunderwatercamerarosplugin","text":"Class constructor.","title":"publicUnderwaterCameraROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCameraROSPlugin/#public-virtualunderwatercamerarosplugin","text":"Class destructor.","title":"public virtual~UnderwaterCameraROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCameraROSPlugin/#public-voidloadsensorssensorptr-_sensorsdfelementptr-_sdf","text":"Load plugin and its configuration from sdf.","title":"public voidLoad(sensors::SensorPtr _sensor,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCameraROSPlugin/#public-virtual-voidonnewdepthframeconst-float-_imageunsigned-int-_widthunsigned-int-_heightunsigned-int-_depthconst-stdstring-_format","text":"","title":"public virtual voidOnNewDepthFrame(const float * _image,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string &amp; _format)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCameraROSPlugin/#public-virtual-voidonnewrgbpointcloudconst-float-_pcdunsigned-int-_widthunsigned-int-_heightunsigned-int-_depthconst-stdstring-_format","text":"Update the controller.","title":"public virtual voidOnNewRGBPointCloud(const float * _pcd,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string &amp; _format)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCameraROSPlugin/#public-virtual-voidonnewimageframeconst-unsigned-char-_imageunsigned-int-_widthunsigned-int-_heightunsigned-int-_depthconst-stdstring-_format","text":"","title":"public virtual voidOnNewImageFrame(const unsigned char * _image,unsigned int _width,unsigned int _height,unsigned int _depth,const std::string &amp; _format)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCameraROSPlugin/#protected-const-float-lastdepth","text":"Temporarily store pointer to previous depth image.","title":"protected const float *lastDepth"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCameraROSPlugin/#protected-unsigned-char-lastimage","text":"Latest simulated image.","title":"protected unsigned char *lastImage"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCameraROSPlugin/#protected-float-depth2rangelut","text":"Depth to range lookup table (LUT)","title":"protected float *depth2rangeLUT"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCameraROSPlugin/#protected-floatattenuation","text":"Attenuation constants per channel (RGB)","title":"protected floatattenuation"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCameraROSPlugin/#protected-unsigned-charbackground","text":"Background constants per channel (RGB)","title":"protected unsigned charbackground"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCameraROSPlugin/#protected-virtual-voidsimulateunderwaterconst-cvmat-_inputimageconst-cvmat-_inputdepthcvmat-_outputimage","text":"Add underwater light damping to image.","title":"protected virtual voidSimulateUnderwater(const cv::Mat &amp; _inputImage,const cv::Mat &amp; _inputDepth,cv::Mat &amp; _outputImage)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/","text":"class gazebo::UnderwaterCurrentPlugin \u00b6 class gazebo :: UnderwaterCurrentPlugin : public WorldPlugin Class for the underwater current plugin TODO: Add option to make the underwater current also a function of depth to comply with DNV. Summary \u00b6 Members Descriptions public UnderwaterCurrentPlugin () Class constructor. public virtual ~UnderwaterCurrentPlugin () Class destructor. public virtual void Load (physics::WorldPtr _world,sdf::ElementPtr _sdf) public virtual void Init () public void Update (const common::UpdateInfo & _info) Update the simulation state. protected event::ConnectionPtr updateConnection Update event. protected physics::WorldPtr world Pointer to world. protected sdf::ElementPtr sdf Pointer to sdf. protected bool hasSurface True if the sea surface is present. protected transport::NodePtr node Pointer to a node for communication. protected std::map< std::string, transport::PublisherPtr > publishers Map of publishers. protected std::string currentVelocityTopic Current velocity topic. protected std::string ns Namespace for topics and services. protected GaussMarkovProcess currentVelModel Gauss-Markov process instance for the current velocity. protected GaussMarkovProcess currentHorzAngleModel Gauss-Markov process instance for horizontal angle model. protected GaussMarkovProcess currentVertAngleModel Gauss-Markov process instance for vertical angle model. protected common::Time lastUpdate Last update time stamp. protected ignition::math::Vector3d currentVelocity Current linear velocity vector. protected void PublishCurrentVelocity () Publish current velocity and the pose of its frame. Members \u00b6 public UnderwaterCurrentPlugin () \u00b6 Class constructor. public virtual ~UnderwaterCurrentPlugin () \u00b6 Class destructor. public virtual void Load (physics::WorldPtr _world,sdf::ElementPtr _sdf) \u00b6 public virtual void Init () \u00b6 public void Update (const common::UpdateInfo & _info) \u00b6 Update the simulation state. Parameters \u00b6 _info Information used in the update event. protected event::ConnectionPtr updateConnection \u00b6 Update event. protected physics::WorldPtr world \u00b6 Pointer to world. protected sdf::ElementPtr sdf \u00b6 Pointer to sdf. protected bool hasSurface \u00b6 True if the sea surface is present. protected transport::NodePtr node \u00b6 Pointer to a node for communication. protected std::map< std::string, transport::PublisherPtr > publishers \u00b6 Map of publishers. protected std::string currentVelocityTopic \u00b6 Current velocity topic. protected std::string ns \u00b6 Namespace for topics and services. protected GaussMarkovProcess currentVelModel \u00b6 Gauss-Markov process instance for the current velocity. protected GaussMarkovProcess currentHorzAngleModel \u00b6 Gauss-Markov process instance for horizontal angle model. protected GaussMarkovProcess currentVertAngleModel \u00b6 Gauss-Markov process instance for vertical angle model. protected common::Time lastUpdate \u00b6 Last update time stamp. protected ignition::math::Vector3d currentVelocity \u00b6 Current linear velocity vector. protected void PublishCurrentVelocity () \u00b6 Publish current velocity and the pose of its frame.","title":"UnderwaterCurrentPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#class-gazebounderwatercurrentplugin","text":"class gazebo :: UnderwaterCurrentPlugin : public WorldPlugin Class for the underwater current plugin TODO: Add option to make the underwater current also a function of depth to comply with DNV.","title":"class gazebo::UnderwaterCurrentPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#summary","text":"Members Descriptions public UnderwaterCurrentPlugin () Class constructor. public virtual ~UnderwaterCurrentPlugin () Class destructor. public virtual void Load (physics::WorldPtr _world,sdf::ElementPtr _sdf) public virtual void Init () public void Update (const common::UpdateInfo & _info) Update the simulation state. protected event::ConnectionPtr updateConnection Update event. protected physics::WorldPtr world Pointer to world. protected sdf::ElementPtr sdf Pointer to sdf. protected bool hasSurface True if the sea surface is present. protected transport::NodePtr node Pointer to a node for communication. protected std::map< std::string, transport::PublisherPtr > publishers Map of publishers. protected std::string currentVelocityTopic Current velocity topic. protected std::string ns Namespace for topics and services. protected GaussMarkovProcess currentVelModel Gauss-Markov process instance for the current velocity. protected GaussMarkovProcess currentHorzAngleModel Gauss-Markov process instance for horizontal angle model. protected GaussMarkovProcess currentVertAngleModel Gauss-Markov process instance for vertical angle model. protected common::Time lastUpdate Last update time stamp. protected ignition::math::Vector3d currentVelocity Current linear velocity vector. protected void PublishCurrentVelocity () Publish current velocity and the pose of its frame.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#publicunderwatercurrentplugin","text":"Class constructor.","title":"publicUnderwaterCurrentPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#public-virtualunderwatercurrentplugin","text":"Class destructor.","title":"public virtual~UnderwaterCurrentPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#public-virtual-voidloadphysicsworldptr-_worldsdfelementptr-_sdf","text":"","title":"public virtual voidLoad(physics::WorldPtr _world,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#public-virtual-voidinit","text":"","title":"public virtual voidInit()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#public-voidupdateconst-commonupdateinfo-_info","text":"Update the simulation state.","title":"public voidUpdate(const common::UpdateInfo &amp; _info)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#parameters","text":"_info Information used in the update event.","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#protected-eventconnectionptrupdateconnection","text":"Update event.","title":"protected event::ConnectionPtrupdateConnection"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#protected-physicsworldptrworld","text":"Pointer to world.","title":"protected physics::WorldPtrworld"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#protected-sdfelementptrsdf","text":"Pointer to sdf.","title":"protected sdf::ElementPtrsdf"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#protected-boolhassurface","text":"True if the sea surface is present.","title":"protected boolhasSurface"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#protected-transportnodeptrnode","text":"Pointer to a node for communication.","title":"protected transport::NodePtrnode"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#protected-stdmap-stdstring-transportpublisherptr-publishers","text":"Map of publishers.","title":"protected std::map&lt; std::string, transport::PublisherPtr &gt;publishers"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#protected-stdstringcurrentvelocitytopic","text":"Current velocity topic.","title":"protected std::stringcurrentVelocityTopic"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#protected-stdstringns","text":"Namespace for topics and services.","title":"protected std::stringns"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#protectedgaussmarkovprocesscurrentvelmodel","text":"Gauss-Markov process instance for the current velocity.","title":"protectedGaussMarkovProcesscurrentVelModel"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#protectedgaussmarkovprocesscurrenthorzanglemodel","text":"Gauss-Markov process instance for horizontal angle model.","title":"protectedGaussMarkovProcesscurrentHorzAngleModel"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#protectedgaussmarkovprocesscurrentvertanglemodel","text":"Gauss-Markov process instance for vertical angle model.","title":"protectedGaussMarkovProcesscurrentVertAngleModel"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#protected-commontimelastupdate","text":"Last update time stamp.","title":"protected common::TimelastUpdate"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#protected-ignitionmathvector3dcurrentvelocity","text":"Current linear velocity vector.","title":"protected ignition::math::Vector3dcurrentVelocity"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterCurrentPlugin/#protected-voidpublishcurrentvelocity","text":"Publish current velocity and the pose of its frame.","title":"protected voidPublishCurrentVelocity()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/","text":"class gazebo::UnderwaterObjectPlugin \u00b6 class gazebo :: UnderwaterObjectPlugin : public ModelPlugin Gazebo model plugin class for underwater objects. Summary \u00b6 Members Descriptions public UnderwaterObjectPlugin () Constructor. public virtual ~UnderwaterObjectPlugin () Destructor. public virtual void Load (gazebo::physics::ModelPtr _model,sdf::ElementPtr _sdf) public virtual void Init () public virtual void Update (const gazebo::common::UpdateInfo & _info) Update the simulation state. protected std::map< gazebo::physics::LinkPtr, HydrodynamicModelPtr > models Pairs of links & corresponding hydrodynamic models. protected ignition::math::Vector3d flowVelocity Flow velocity vector read from topic. protected gazebo::event::ConnectionPtr updateConnection Update event. protected gazebo::physics::WorldPtr world Pointer to the world plugin. protected gazebo::physics::ModelPtr model Pointer to the model structure. protected gazebo::transport::NodePtr node Gazebo node. protected std::string baseLinkName Name of vehicle's base_link. protected gazebo::transport::SubscriberPtr flowSubscriber Subcriber to flow message. protected bool useGlobalCurrent Flag to use the global current velocity or the individually assigned current velocity. protected std::map< std::string, gazebo::transport::PublisherPtr > hydroPub Publishers of hydrodynamic and hydrostatic forces and torques in the case the debug flag is on. protected virtual void Connect () Connects the update event callback. protected void UpdateFlowVelocity (ConstVector3dPtr & _msg) Reads flow velocity topic. protected virtual void PublishCurrentVelocityMarker () Publish current velocity marker. protected virtual void PublishIsSubmerged () Publishes the state of the vehicle (is submerged) protected virtual void PublishRestoringForce (gazebo::physics::LinkPtr _link) Publish restoring force. protected virtual void PublishHydrodynamicWrenches (gazebo::physics::LinkPtr _link) Publish hydrodynamic wrenches. protected virtual void GenWrenchMsg (ignition::math::Vector3d _force,ignition::math::Vector3d _torque,gazebo::msgs::WrenchStamped & _output) Returns the wrench message for debugging topics. protected virtual void InitDebug (gazebo::physics::LinkPtr _link, gazebo::HydrodynamicModelPtr _hydro) Sets the topics used for publishing the intermediate data during the simulation. Members \u00b6 public UnderwaterObjectPlugin () \u00b6 Constructor. public virtual ~UnderwaterObjectPlugin () \u00b6 Destructor. public virtual void Load (gazebo::physics::ModelPtr _model,sdf::ElementPtr _sdf) \u00b6 public virtual void Init () \u00b6 public virtual void Update (const gazebo::common::UpdateInfo & _info) \u00b6 Update the simulation state. Parameters \u00b6 _info Information used in the update event. protected std::map< gazebo::physics::LinkPtr, HydrodynamicModelPtr > models \u00b6 Pairs of links & corresponding hydrodynamic models. protected ignition::math::Vector3d flowVelocity \u00b6 Flow velocity vector read from topic. protected gazebo::event::ConnectionPtr updateConnection \u00b6 Update event. protected gazebo::physics::WorldPtr world \u00b6 Pointer to the world plugin. protected gazebo::physics::ModelPtr model \u00b6 Pointer to the model structure. protected gazebo::transport::NodePtr node \u00b6 Gazebo node. protected std::string baseLinkName \u00b6 Name of vehicle's base_link. protected gazebo::transport::SubscriberPtr flowSubscriber \u00b6 Subcriber to flow message. protected bool useGlobalCurrent \u00b6 Flag to use the global current velocity or the individually assigned current velocity. protected std::map< std::string, gazebo::transport::PublisherPtr > hydroPub \u00b6 Publishers of hydrodynamic and hydrostatic forces and torques in the case the debug flag is on. protected virtual void Connect () \u00b6 Connects the update event callback. protected void UpdateFlowVelocity (ConstVector3dPtr & _msg) \u00b6 Reads flow velocity topic. protected virtual void PublishCurrentVelocityMarker () \u00b6 Publish current velocity marker. protected virtual void PublishIsSubmerged () \u00b6 Publishes the state of the vehicle (is submerged) protected virtual void PublishRestoringForce (gazebo::physics::LinkPtr _link) \u00b6 Publish restoring force. Parameters \u00b6 _link Pointer to the link where the force information will be extracted from protected virtual void PublishHydrodynamicWrenches (gazebo::physics::LinkPtr _link) \u00b6 Publish hydrodynamic wrenches. Parameters \u00b6 _link Pointer to the link where the force information will be extracted from protected virtual void GenWrenchMsg (ignition::math::Vector3d _force,ignition::math::Vector3d _torque,gazebo::msgs::WrenchStamped & _output) \u00b6 Returns the wrench message for debugging topics. Parameters \u00b6 _force Force vector _torque Torque vector _output Stamped wrench message to be updated protected virtual void InitDebug (gazebo::physics::LinkPtr _link, gazebo::HydrodynamicModelPtr _hydro) \u00b6 Sets the topics used for publishing the intermediate data during the simulation. Parameters \u00b6 _link Pointer to the link _hydro Pointer to the hydrodynamic model","title":"UnderwaterObjectPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#class-gazebounderwaterobjectplugin","text":"class gazebo :: UnderwaterObjectPlugin : public ModelPlugin Gazebo model plugin class for underwater objects.","title":"class gazebo::UnderwaterObjectPlugin"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#summary","text":"Members Descriptions public UnderwaterObjectPlugin () Constructor. public virtual ~UnderwaterObjectPlugin () Destructor. public virtual void Load (gazebo::physics::ModelPtr _model,sdf::ElementPtr _sdf) public virtual void Init () public virtual void Update (const gazebo::common::UpdateInfo & _info) Update the simulation state. protected std::map< gazebo::physics::LinkPtr, HydrodynamicModelPtr > models Pairs of links & corresponding hydrodynamic models. protected ignition::math::Vector3d flowVelocity Flow velocity vector read from topic. protected gazebo::event::ConnectionPtr updateConnection Update event. protected gazebo::physics::WorldPtr world Pointer to the world plugin. protected gazebo::physics::ModelPtr model Pointer to the model structure. protected gazebo::transport::NodePtr node Gazebo node. protected std::string baseLinkName Name of vehicle's base_link. protected gazebo::transport::SubscriberPtr flowSubscriber Subcriber to flow message. protected bool useGlobalCurrent Flag to use the global current velocity or the individually assigned current velocity. protected std::map< std::string, gazebo::transport::PublisherPtr > hydroPub Publishers of hydrodynamic and hydrostatic forces and torques in the case the debug flag is on. protected virtual void Connect () Connects the update event callback. protected void UpdateFlowVelocity (ConstVector3dPtr & _msg) Reads flow velocity topic. protected virtual void PublishCurrentVelocityMarker () Publish current velocity marker. protected virtual void PublishIsSubmerged () Publishes the state of the vehicle (is submerged) protected virtual void PublishRestoringForce (gazebo::physics::LinkPtr _link) Publish restoring force. protected virtual void PublishHydrodynamicWrenches (gazebo::physics::LinkPtr _link) Publish hydrodynamic wrenches. protected virtual void GenWrenchMsg (ignition::math::Vector3d _force,ignition::math::Vector3d _torque,gazebo::msgs::WrenchStamped & _output) Returns the wrench message for debugging topics. protected virtual void InitDebug (gazebo::physics::LinkPtr _link, gazebo::HydrodynamicModelPtr _hydro) Sets the topics used for publishing the intermediate data during the simulation.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#publicunderwaterobjectplugin","text":"Constructor.","title":"publicUnderwaterObjectPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#public-virtualunderwaterobjectplugin","text":"Destructor.","title":"public virtual~UnderwaterObjectPlugin()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#public-virtual-voidloadgazebophysicsmodelptr-_modelsdfelementptr-_sdf","text":"","title":"public virtual voidLoad(gazebo::physics::ModelPtr _model,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#public-virtual-voidinit","text":"","title":"public virtual voidInit()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#public-virtual-voidupdateconst-gazebocommonupdateinfo-_info","text":"Update the simulation state.","title":"public virtual voidUpdate(const gazebo::common::UpdateInfo &amp; _info)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#parameters","text":"_info Information used in the update event.","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#protected-stdmap-gazebophysicslinkptrhydrodynamicmodelptrmodels","text":"Pairs of links & corresponding hydrodynamic models.","title":"protected std::map&lt; gazebo::physics::LinkPtr,HydrodynamicModelPtr&gt;models"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#protected-ignitionmathvector3dflowvelocity","text":"Flow velocity vector read from topic.","title":"protected ignition::math::Vector3dflowVelocity"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#protected-gazeboeventconnectionptrupdateconnection","text":"Update event.","title":"protected gazebo::event::ConnectionPtrupdateConnection"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#protected-gazebophysicsworldptrworld","text":"Pointer to the world plugin.","title":"protected gazebo::physics::WorldPtrworld"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#protected-gazebophysicsmodelptrmodel","text":"Pointer to the model structure.","title":"protected gazebo::physics::ModelPtrmodel"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#protected-gazebotransportnodeptrnode","text":"Gazebo node.","title":"protected gazebo::transport::NodePtrnode"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#protected-stdstringbaselinkname","text":"Name of vehicle's base_link.","title":"protected std::stringbaseLinkName"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#protected-gazebotransportsubscriberptrflowsubscriber","text":"Subcriber to flow message.","title":"protected gazebo::transport::SubscriberPtrflowSubscriber"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#protected-booluseglobalcurrent","text":"Flag to use the global current velocity or the individually assigned current velocity.","title":"protected booluseGlobalCurrent"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#protected-stdmap-stdstring-gazebotransportpublisherptr-hydropub","text":"Publishers of hydrodynamic and hydrostatic forces and torques in the case the debug flag is on.","title":"protected std::map&lt; std::string, gazebo::transport::PublisherPtr &gt;hydroPub"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#protected-virtual-voidconnect","text":"Connects the update event callback.","title":"protected virtual voidConnect()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#protected-voidupdateflowvelocityconstvector3dptr-_msg","text":"Reads flow velocity topic.","title":"protected voidUpdateFlowVelocity(ConstVector3dPtr &amp; _msg)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#protected-virtual-voidpublishcurrentvelocitymarker","text":"Publish current velocity marker.","title":"protected virtual voidPublishCurrentVelocityMarker()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#protected-virtual-voidpublishissubmerged","text":"Publishes the state of the vehicle (is submerged)","title":"protected virtual voidPublishIsSubmerged()"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#protected-virtual-voidpublishrestoringforcegazebophysicslinkptr-_link","text":"Publish restoring force.","title":"protected virtual voidPublishRestoringForce(gazebo::physics::LinkPtr _link)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#parameters_1","text":"_link Pointer to the link where the force information will be extracted from","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#protected-virtual-voidpublishhydrodynamicwrenchesgazebophysicslinkptr-_link","text":"Publish hydrodynamic wrenches.","title":"protected virtual voidPublishHydrodynamicWrenches(gazebo::physics::LinkPtr _link)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#parameters_2","text":"_link Pointer to the link where the force information will be extracted from","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#protected-virtual-voidgenwrenchmsgignitionmathvector3d-_forceignitionmathvector3d-_torquegazebomsgswrenchstamped-_output","text":"Returns the wrench message for debugging topics.","title":"protected virtual voidGenWrenchMsg(ignition::math::Vector3d _force,ignition::math::Vector3d _torque,gazebo::msgs::WrenchStamped &amp; _output)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#parameters_3","text":"_force Force vector _torque Torque vector _output Stamped wrench message to be updated","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#protected-virtual-voidinitdebuggazebophysicslinkptr-_linkgazebohydrodynamicmodelptr_hydro","text":"Sets the topics used for publishing the intermediate data during the simulation.","title":"protected virtual voidInitDebug(gazebo::physics::LinkPtr _link,gazebo::HydrodynamicModelPtr_hydro)"},{"location":"packages/uuv_simulator/docs/api/gazebo::UnderwaterObjectPlugin/#parameters_4","text":"_link Pointer to the link _hydro Pointer to the hydrodynamic model","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::FinROSPlugin/","text":"class uuv_simulator_ros::FinROSPlugin \u00b6 class uuv_simulator_ros :: FinROSPlugin : public FinPlugin Summary \u00b6 Members Descriptions public FinROSPlugin () Constrcutor. public ~FinROSPlugin () Destructor. public void Load (gazebo::physics::ModelPtr _parent,sdf::ElementPtr _sdf) Load module and read parameters from SDF. public void RosPublishStates () Publish state via ROS. public void SetReference (const uuv_gazebo_ros_plugins_msgs::FloatStamped::ConstPtr & _msg) Set new set point. public bool GetLiftDragParams (uuv_gazebo_ros_plugins_msgs::GetListParam::Request & _req,uuv_gazebo_ros_plugins_msgs::GetListParam::Response & _res) Return the list of paramaters of the lift and drag model. public gazebo::common::Time GetRosPublishPeriod () Return the ROS publish period. public void SetRosPublishRate (double _hz) Set the ROS publish frequency (Hz). public virtual void Init () Initialize Module. public virtual void Reset () Reset Module. Members \u00b6 public FinROSPlugin () \u00b6 Constrcutor. public ~FinROSPlugin () \u00b6 Destructor. public void Load (gazebo::physics::ModelPtr _parent,sdf::ElementPtr _sdf) \u00b6 Load module and read parameters from SDF. public void RosPublishStates () \u00b6 Publish state via ROS. public void SetReference (const uuv_gazebo_ros_plugins_msgs::FloatStamped::ConstPtr & _msg) \u00b6 Set new set point. public bool GetLiftDragParams (uuv_gazebo_ros_plugins_msgs::GetListParam::Request & _req,uuv_gazebo_ros_plugins_msgs::GetListParam::Response & _res) \u00b6 Return the list of paramaters of the lift and drag model. public gazebo::common::Time GetRosPublishPeriod () \u00b6 Return the ROS publish period. public void SetRosPublishRate (double _hz) \u00b6 Set the ROS publish frequency (Hz). public virtual void Init () \u00b6 Initialize Module. public virtual void Reset () \u00b6 Reset Module.","title":"FinROSPlugin"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::FinROSPlugin/#class-uuv_simulator_rosfinrosplugin","text":"class uuv_simulator_ros :: FinROSPlugin : public FinPlugin","title":"class uuv_simulator_ros::FinROSPlugin"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::FinROSPlugin/#summary","text":"Members Descriptions public FinROSPlugin () Constrcutor. public ~FinROSPlugin () Destructor. public void Load (gazebo::physics::ModelPtr _parent,sdf::ElementPtr _sdf) Load module and read parameters from SDF. public void RosPublishStates () Publish state via ROS. public void SetReference (const uuv_gazebo_ros_plugins_msgs::FloatStamped::ConstPtr & _msg) Set new set point. public bool GetLiftDragParams (uuv_gazebo_ros_plugins_msgs::GetListParam::Request & _req,uuv_gazebo_ros_plugins_msgs::GetListParam::Response & _res) Return the list of paramaters of the lift and drag model. public gazebo::common::Time GetRosPublishPeriod () Return the ROS publish period. public void SetRosPublishRate (double _hz) Set the ROS publish frequency (Hz). public virtual void Init () Initialize Module. public virtual void Reset () Reset Module.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::FinROSPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::FinROSPlugin/#publicfinrosplugin","text":"Constrcutor.","title":"publicFinROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::FinROSPlugin/#publicfinrosplugin_1","text":"Destructor.","title":"public~FinROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::FinROSPlugin/#public-voidloadgazebophysicsmodelptr-_parentsdfelementptr-_sdf","text":"Load module and read parameters from SDF.","title":"public voidLoad(gazebo::physics::ModelPtr _parent,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::FinROSPlugin/#public-voidrospublishstates","text":"Publish state via ROS.","title":"public voidRosPublishStates()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::FinROSPlugin/#public-voidsetreferenceconst-uuv_gazebo_ros_plugins_msgsfloatstampedconstptr-_msg","text":"Set new set point.","title":"public voidSetReference(const uuv_gazebo_ros_plugins_msgs::FloatStamped::ConstPtr &amp; _msg)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::FinROSPlugin/#public-boolgetliftdragparamsuuv_gazebo_ros_plugins_msgsgetlistparamrequest-_requuv_gazebo_ros_plugins_msgsgetlistparamresponse-_res","text":"Return the list of paramaters of the lift and drag model.","title":"public boolGetLiftDragParams(uuv_gazebo_ros_plugins_msgs::GetListParam::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::GetListParam::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::FinROSPlugin/#public-gazebocommontimegetrospublishperiod","text":"Return the ROS publish period.","title":"public gazebo::common::TimeGetRosPublishPeriod()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::FinROSPlugin/#public-voidsetrospublishratedouble-_hz","text":"Set the ROS publish frequency (Hz).","title":"public voidSetRosPublishRate(double _hz)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::FinROSPlugin/#public-virtual-voidinit","text":"Initialize Module.","title":"public virtual voidInit()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::FinROSPlugin/#public-virtual-voidreset","text":"Reset Module.","title":"public virtual voidReset()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::JointStatePublisher/","text":"class uuv_simulator_ros::JointStatePublisher \u00b6 class uuv_simulator_ros :: JointStatePublisher : public ModelPlugin Summary \u00b6 Members Descriptions public JointStatePublisher () public ~JointStatePublisher () public void Load (gazebo::physics::ModelPtr _parent,sdf::ElementPtr _sdf) public void OnUpdate (const gazebo::common::UpdateInfo & _info) public void PublishJointStates () Members \u00b6 public JointStatePublisher () \u00b6 public ~JointStatePublisher () \u00b6 public void Load (gazebo::physics::ModelPtr _parent,sdf::ElementPtr _sdf) \u00b6 public void OnUpdate (const gazebo::common::UpdateInfo & _info) \u00b6 public void PublishJointStates () \u00b6","title":"JointStatePublisher"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::JointStatePublisher/#class-uuv_simulator_rosjointstatepublisher","text":"class uuv_simulator_ros :: JointStatePublisher : public ModelPlugin","title":"class uuv_simulator_ros::JointStatePublisher"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::JointStatePublisher/#summary","text":"Members Descriptions public JointStatePublisher () public ~JointStatePublisher () public void Load (gazebo::physics::ModelPtr _parent,sdf::ElementPtr _sdf) public void OnUpdate (const gazebo::common::UpdateInfo & _info) public void PublishJointStates ()","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::JointStatePublisher/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::JointStatePublisher/#publicjointstatepublisher","text":"","title":"publicJointStatePublisher()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::JointStatePublisher/#publicjointstatepublisher_1","text":"","title":"public~JointStatePublisher()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::JointStatePublisher/#public-voidloadgazebophysicsmodelptr-_parentsdfelementptr-_sdf","text":"","title":"public voidLoad(gazebo::physics::ModelPtr _parent,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::JointStatePublisher/#public-voidonupdateconst-gazebocommonupdateinfo-_info","text":"","title":"public voidOnUpdate(const gazebo::common::UpdateInfo &amp; _info)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::JointStatePublisher/#public-voidpublishjointstates","text":"","title":"public voidPublishJointStates()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/","text":"class uuv_simulator_ros::ThrusterROSPlugin \u00b6 class uuv_simulator_ros :: ThrusterROSPlugin : public ThrusterPlugin Summary \u00b6 Members Descriptions public ThrusterROSPlugin () Constrcutor. public ~ThrusterROSPlugin () Destructor. public void Load (gazebo::physics::ModelPtr _parent,sdf::ElementPtr _sdf) Load module and read parameters from SDF. public void RosPublishStates () Publish thruster state via ROS. public void SetThrustReference (const uuv_gazebo_ros_plugins_msgs::FloatStamped::ConstPtr & _msg) Set new set point (desired thrust [N]) for thruster. public gazebo::common::Time GetRosPublishPeriod () Return the ROS publish period. public void SetRosPublishRate (double _hz) Set the ROS publish frequency (Hz). public virtual void Init () Initialize Module. public virtual void Reset () Reset Module. public bool SetThrustForceEfficiency (uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Request & _req,uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Response & _res) Set the thrust efficiency factor. public bool GetThrustForceEfficiency (uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Request & _req,uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Response & _res) Get the thrust efficiency factor. public bool SetDynamicStateEfficiency (uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Request & _req,uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Response & _res) Set the dynamic state efficiency factor. public bool GetDynamicStateEfficiency (uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Request & _req,uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Response & _res) Get the dynamic state efficiency factor. public bool SetThrusterState (uuv_gazebo_ros_plugins_msgs::SetThrusterState::Request & _req,uuv_gazebo_ros_plugins_msgs::SetThrusterState::Response & _res) Turn thruster on/off. public bool GetThrusterState (uuv_gazebo_ros_plugins_msgs::GetThrusterState::Request & _req,uuv_gazebo_ros_plugins_msgs::GetThrusterState::Response & _res) Get thruster state. public bool GetThrusterConversionFcn (uuv_gazebo_ros_plugins_msgs::GetThrusterConversionFcn::Request & _req,uuv_gazebo_ros_plugins_msgs::GetThrusterConversionFcn::Response & _res) Get thruster conversion function parameters. Members \u00b6 public ThrusterROSPlugin () \u00b6 Constrcutor. public ~ThrusterROSPlugin () \u00b6 Destructor. public void Load (gazebo::physics::ModelPtr _parent,sdf::ElementPtr _sdf) \u00b6 Load module and read parameters from SDF. public void RosPublishStates () \u00b6 Publish thruster state via ROS. public void SetThrustReference (const uuv_gazebo_ros_plugins_msgs::FloatStamped::ConstPtr & _msg) \u00b6 Set new set point (desired thrust [N]) for thruster. public gazebo::common::Time GetRosPublishPeriod () \u00b6 Return the ROS publish period. public void SetRosPublishRate (double _hz) \u00b6 Set the ROS publish frequency (Hz). public virtual void Init () \u00b6 Initialize Module. public virtual void Reset () \u00b6 Reset Module. public bool SetThrustForceEfficiency (uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Request & _req,uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Response & _res) \u00b6 Set the thrust efficiency factor. public bool GetThrustForceEfficiency (uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Request & _req,uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Response & _res) \u00b6 Get the thrust efficiency factor. public bool SetDynamicStateEfficiency (uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Request & _req,uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Response & _res) \u00b6 Set the dynamic state efficiency factor. public bool GetDynamicStateEfficiency (uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Request & _req,uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Response & _res) \u00b6 Get the dynamic state efficiency factor. public bool SetThrusterState (uuv_gazebo_ros_plugins_msgs::SetThrusterState::Request & _req,uuv_gazebo_ros_plugins_msgs::SetThrusterState::Response & _res) \u00b6 Turn thruster on/off. public bool GetThrusterState (uuv_gazebo_ros_plugins_msgs::GetThrusterState::Request & _req,uuv_gazebo_ros_plugins_msgs::GetThrusterState::Response & _res) \u00b6 Get thruster state. public bool GetThrusterConversionFcn (uuv_gazebo_ros_plugins_msgs::GetThrusterConversionFcn::Request & _req,uuv_gazebo_ros_plugins_msgs::GetThrusterConversionFcn::Response & _res) \u00b6 Get thruster conversion function parameters.","title":"ThrusterROSPlugin"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#class-uuv_simulator_rosthrusterrosplugin","text":"class uuv_simulator_ros :: ThrusterROSPlugin : public ThrusterPlugin","title":"class uuv_simulator_ros::ThrusterROSPlugin"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#summary","text":"Members Descriptions public ThrusterROSPlugin () Constrcutor. public ~ThrusterROSPlugin () Destructor. public void Load (gazebo::physics::ModelPtr _parent,sdf::ElementPtr _sdf) Load module and read parameters from SDF. public void RosPublishStates () Publish thruster state via ROS. public void SetThrustReference (const uuv_gazebo_ros_plugins_msgs::FloatStamped::ConstPtr & _msg) Set new set point (desired thrust [N]) for thruster. public gazebo::common::Time GetRosPublishPeriod () Return the ROS publish period. public void SetRosPublishRate (double _hz) Set the ROS publish frequency (Hz). public virtual void Init () Initialize Module. public virtual void Reset () Reset Module. public bool SetThrustForceEfficiency (uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Request & _req,uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Response & _res) Set the thrust efficiency factor. public bool GetThrustForceEfficiency (uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Request & _req,uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Response & _res) Get the thrust efficiency factor. public bool SetDynamicStateEfficiency (uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Request & _req,uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Response & _res) Set the dynamic state efficiency factor. public bool GetDynamicStateEfficiency (uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Request & _req,uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Response & _res) Get the dynamic state efficiency factor. public bool SetThrusterState (uuv_gazebo_ros_plugins_msgs::SetThrusterState::Request & _req,uuv_gazebo_ros_plugins_msgs::SetThrusterState::Response & _res) Turn thruster on/off. public bool GetThrusterState (uuv_gazebo_ros_plugins_msgs::GetThrusterState::Request & _req,uuv_gazebo_ros_plugins_msgs::GetThrusterState::Response & _res) Get thruster state. public bool GetThrusterConversionFcn (uuv_gazebo_ros_plugins_msgs::GetThrusterConversionFcn::Request & _req,uuv_gazebo_ros_plugins_msgs::GetThrusterConversionFcn::Response & _res) Get thruster conversion function parameters.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#publicthrusterrosplugin","text":"Constrcutor.","title":"publicThrusterROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#publicthrusterrosplugin_1","text":"Destructor.","title":"public~ThrusterROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#public-voidloadgazebophysicsmodelptr-_parentsdfelementptr-_sdf","text":"Load module and read parameters from SDF.","title":"public voidLoad(gazebo::physics::ModelPtr _parent,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#public-voidrospublishstates","text":"Publish thruster state via ROS.","title":"public voidRosPublishStates()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#public-voidsetthrustreferenceconst-uuv_gazebo_ros_plugins_msgsfloatstampedconstptr-_msg","text":"Set new set point (desired thrust [N]) for thruster.","title":"public voidSetThrustReference(const uuv_gazebo_ros_plugins_msgs::FloatStamped::ConstPtr &amp; _msg)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#public-gazebocommontimegetrospublishperiod","text":"Return the ROS publish period.","title":"public gazebo::common::TimeGetRosPublishPeriod()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#public-voidsetrospublishratedouble-_hz","text":"Set the ROS publish frequency (Hz).","title":"public voidSetRosPublishRate(double _hz)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#public-virtual-voidinit","text":"Initialize Module.","title":"public virtual voidInit()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#public-virtual-voidreset","text":"Reset Module.","title":"public virtual voidReset()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#public-boolsetthrustforceefficiencyuuv_gazebo_ros_plugins_msgssetthrusterefficiencyrequest-_requuv_gazebo_ros_plugins_msgssetthrusterefficiencyresponse-_res","text":"Set the thrust efficiency factor.","title":"public boolSetThrustForceEfficiency(uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#public-boolgetthrustforceefficiencyuuv_gazebo_ros_plugins_msgsgetthrusterefficiencyrequest-_requuv_gazebo_ros_plugins_msgsgetthrusterefficiencyresponse-_res","text":"Get the thrust efficiency factor.","title":"public boolGetThrustForceEfficiency(uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#public-boolsetdynamicstateefficiencyuuv_gazebo_ros_plugins_msgssetthrusterefficiencyrequest-_requuv_gazebo_ros_plugins_msgssetthrusterefficiencyresponse-_res","text":"Set the dynamic state efficiency factor.","title":"public boolSetDynamicStateEfficiency(uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::SetThrusterEfficiency::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#public-boolgetdynamicstateefficiencyuuv_gazebo_ros_plugins_msgsgetthrusterefficiencyrequest-_requuv_gazebo_ros_plugins_msgsgetthrusterefficiencyresponse-_res","text":"Get the dynamic state efficiency factor.","title":"public boolGetDynamicStateEfficiency(uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::GetThrusterEfficiency::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#public-boolsetthrusterstateuuv_gazebo_ros_plugins_msgssetthrusterstaterequest-_requuv_gazebo_ros_plugins_msgssetthrusterstateresponse-_res","text":"Turn thruster on/off.","title":"public boolSetThrusterState(uuv_gazebo_ros_plugins_msgs::SetThrusterState::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::SetThrusterState::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#public-boolgetthrusterstateuuv_gazebo_ros_plugins_msgsgetthrusterstaterequest-_requuv_gazebo_ros_plugins_msgsgetthrusterstateresponse-_res","text":"Get thruster state.","title":"public boolGetThrusterState(uuv_gazebo_ros_plugins_msgs::GetThrusterState::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::GetThrusterState::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::ThrusterROSPlugin/#public-boolgetthrusterconversionfcnuuv_gazebo_ros_plugins_msgsgetthrusterconversionfcnrequest-_requuv_gazebo_ros_plugins_msgsgetthrusterconversionfcnresponse-_res","text":"Get thruster conversion function parameters.","title":"public boolGetThrusterConversionFcn(uuv_gazebo_ros_plugins_msgs::GetThrusterConversionFcn::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::GetThrusterConversionFcn::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterCurrentROSPlugin/","text":"class uuv_simulator_ros::UnderwaterCurrentROSPlugin \u00b6 class uuv_simulator_ros :: UnderwaterCurrentROSPlugin : public UnderwaterCurrentPlugin Summary \u00b6 Members Descriptions public UnderwaterCurrentROSPlugin () Class constructor. public virtual ~UnderwaterCurrentROSPlugin () Class destructor. public void Load (gazebo::physics::WorldPtr _world,sdf::ElementPtr _sdf) Load module and read parameters from SDF. public bool UpdateCurrentVelocityModel (uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req,uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res) Service call to update the parameters for the velocity Gauss-Markov process model. public bool UpdateCurrentHorzAngleModel (uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req,uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res) Service call to update the parameters for the horizontal angle Gauss-Markov process model. public bool UpdateCurrentVertAngleModel (uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req,uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res) Service call to update the parameters for the vertical angle Gauss-Markov process model. public bool GetCurrentVelocityModel (uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req,uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res) Service call to read the parameters for the velocity Gauss-Markov process model. public bool GetCurrentHorzAngleModel (uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req,uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res) Service call to read the parameters for the horizontal angle Gauss-Markov process model. public bool GetCurrentVertAngleModel (uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req,uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res) Service call to read the parameters for the vertical angle Gauss-Markov process model. public bool UpdateCurrentVelocity (uuv_world_ros_plugins_msgs::SetCurrentVelocity::Request & _req,uuv_world_ros_plugins_msgs::SetCurrentVelocity::Response & _res) Service call to update the mean value of the flow velocity. public bool UpdateHorzAngle (uuv_world_ros_plugins_msgs::SetCurrentDirection::Request & _req,uuv_world_ros_plugins_msgs::SetCurrentDirection::Response & _res) Service call to update the mean value of the horizontal angle. public bool UpdateVertAngle (uuv_world_ros_plugins_msgs::SetCurrentDirection::Request & _req,uuv_world_ros_plugins_msgs::SetCurrentDirection::Response & _res) Service call to update the mean value of the vertical angle. Members \u00b6 public UnderwaterCurrentROSPlugin () \u00b6 Class constructor. public virtual ~UnderwaterCurrentROSPlugin () \u00b6 Class destructor. public void Load (gazebo::physics::WorldPtr _world,sdf::ElementPtr _sdf) \u00b6 Load module and read parameters from SDF. public bool UpdateCurrentVelocityModel (uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req,uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res) \u00b6 Service call to update the parameters for the velocity Gauss-Markov process model. public bool UpdateCurrentHorzAngleModel (uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req,uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res) \u00b6 Service call to update the parameters for the horizontal angle Gauss-Markov process model. public bool UpdateCurrentVertAngleModel (uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req,uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res) \u00b6 Service call to update the parameters for the vertical angle Gauss-Markov process model. public bool GetCurrentVelocityModel (uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req,uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res) \u00b6 Service call to read the parameters for the velocity Gauss-Markov process model. public bool GetCurrentHorzAngleModel (uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req,uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res) \u00b6 Service call to read the parameters for the horizontal angle Gauss-Markov process model. public bool GetCurrentVertAngleModel (uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req,uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res) \u00b6 Service call to read the parameters for the vertical angle Gauss-Markov process model. public bool UpdateCurrentVelocity (uuv_world_ros_plugins_msgs::SetCurrentVelocity::Request & _req,uuv_world_ros_plugins_msgs::SetCurrentVelocity::Response & _res) \u00b6 Service call to update the mean value of the flow velocity. public bool UpdateHorzAngle (uuv_world_ros_plugins_msgs::SetCurrentDirection::Request & _req,uuv_world_ros_plugins_msgs::SetCurrentDirection::Response & _res) \u00b6 Service call to update the mean value of the horizontal angle. public bool UpdateVertAngle (uuv_world_ros_plugins_msgs::SetCurrentDirection::Request & _req,uuv_world_ros_plugins_msgs::SetCurrentDirection::Response & _res) \u00b6 Service call to update the mean value of the vertical angle.","title":"UnderwaterCurrentROSPlugin"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterCurrentROSPlugin/#class-uuv_simulator_rosunderwatercurrentrosplugin","text":"class uuv_simulator_ros :: UnderwaterCurrentROSPlugin : public UnderwaterCurrentPlugin","title":"class uuv_simulator_ros::UnderwaterCurrentROSPlugin"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterCurrentROSPlugin/#summary","text":"Members Descriptions public UnderwaterCurrentROSPlugin () Class constructor. public virtual ~UnderwaterCurrentROSPlugin () Class destructor. public void Load (gazebo::physics::WorldPtr _world,sdf::ElementPtr _sdf) Load module and read parameters from SDF. public bool UpdateCurrentVelocityModel (uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req,uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res) Service call to update the parameters for the velocity Gauss-Markov process model. public bool UpdateCurrentHorzAngleModel (uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req,uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res) Service call to update the parameters for the horizontal angle Gauss-Markov process model. public bool UpdateCurrentVertAngleModel (uuv_world_ros_plugins_msgs::SetCurrentModel::Request & _req,uuv_world_ros_plugins_msgs::SetCurrentModel::Response & _res) Service call to update the parameters for the vertical angle Gauss-Markov process model. public bool GetCurrentVelocityModel (uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req,uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res) Service call to read the parameters for the velocity Gauss-Markov process model. public bool GetCurrentHorzAngleModel (uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req,uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res) Service call to read the parameters for the horizontal angle Gauss-Markov process model. public bool GetCurrentVertAngleModel (uuv_world_ros_plugins_msgs::GetCurrentModel::Request & _req,uuv_world_ros_plugins_msgs::GetCurrentModel::Response & _res) Service call to read the parameters for the vertical angle Gauss-Markov process model. public bool UpdateCurrentVelocity (uuv_world_ros_plugins_msgs::SetCurrentVelocity::Request & _req,uuv_world_ros_plugins_msgs::SetCurrentVelocity::Response & _res) Service call to update the mean value of the flow velocity. public bool UpdateHorzAngle (uuv_world_ros_plugins_msgs::SetCurrentDirection::Request & _req,uuv_world_ros_plugins_msgs::SetCurrentDirection::Response & _res) Service call to update the mean value of the horizontal angle. public bool UpdateVertAngle (uuv_world_ros_plugins_msgs::SetCurrentDirection::Request & _req,uuv_world_ros_plugins_msgs::SetCurrentDirection::Response & _res) Service call to update the mean value of the vertical angle.","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterCurrentROSPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterCurrentROSPlugin/#publicunderwatercurrentrosplugin","text":"Class constructor.","title":"publicUnderwaterCurrentROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterCurrentROSPlugin/#public-virtualunderwatercurrentrosplugin","text":"Class destructor.","title":"public virtual~UnderwaterCurrentROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterCurrentROSPlugin/#public-voidloadgazebophysicsworldptr-_worldsdfelementptr-_sdf","text":"Load module and read parameters from SDF.","title":"public voidLoad(gazebo::physics::WorldPtr _world,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterCurrentROSPlugin/#public-boolupdatecurrentvelocitymodeluuv_world_ros_plugins_msgssetcurrentmodelrequest-_requuv_world_ros_plugins_msgssetcurrentmodelresponse-_res","text":"Service call to update the parameters for the velocity Gauss-Markov process model.","title":"public boolUpdateCurrentVelocityModel(uuv_world_ros_plugins_msgs::SetCurrentModel::Request &amp; _req,uuv_world_ros_plugins_msgs::SetCurrentModel::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterCurrentROSPlugin/#public-boolupdatecurrenthorzanglemodeluuv_world_ros_plugins_msgssetcurrentmodelrequest-_requuv_world_ros_plugins_msgssetcurrentmodelresponse-_res","text":"Service call to update the parameters for the horizontal angle Gauss-Markov process model.","title":"public boolUpdateCurrentHorzAngleModel(uuv_world_ros_plugins_msgs::SetCurrentModel::Request &amp; _req,uuv_world_ros_plugins_msgs::SetCurrentModel::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterCurrentROSPlugin/#public-boolupdatecurrentvertanglemodeluuv_world_ros_plugins_msgssetcurrentmodelrequest-_requuv_world_ros_plugins_msgssetcurrentmodelresponse-_res","text":"Service call to update the parameters for the vertical angle Gauss-Markov process model.","title":"public boolUpdateCurrentVertAngleModel(uuv_world_ros_plugins_msgs::SetCurrentModel::Request &amp; _req,uuv_world_ros_plugins_msgs::SetCurrentModel::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterCurrentROSPlugin/#public-boolgetcurrentvelocitymodeluuv_world_ros_plugins_msgsgetcurrentmodelrequest-_requuv_world_ros_plugins_msgsgetcurrentmodelresponse-_res","text":"Service call to read the parameters for the velocity Gauss-Markov process model.","title":"public boolGetCurrentVelocityModel(uuv_world_ros_plugins_msgs::GetCurrentModel::Request &amp; _req,uuv_world_ros_plugins_msgs::GetCurrentModel::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterCurrentROSPlugin/#public-boolgetcurrenthorzanglemodeluuv_world_ros_plugins_msgsgetcurrentmodelrequest-_requuv_world_ros_plugins_msgsgetcurrentmodelresponse-_res","text":"Service call to read the parameters for the horizontal angle Gauss-Markov process model.","title":"public boolGetCurrentHorzAngleModel(uuv_world_ros_plugins_msgs::GetCurrentModel::Request &amp; _req,uuv_world_ros_plugins_msgs::GetCurrentModel::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterCurrentROSPlugin/#public-boolgetcurrentvertanglemodeluuv_world_ros_plugins_msgsgetcurrentmodelrequest-_requuv_world_ros_plugins_msgsgetcurrentmodelresponse-_res","text":"Service call to read the parameters for the vertical angle Gauss-Markov process model.","title":"public boolGetCurrentVertAngleModel(uuv_world_ros_plugins_msgs::GetCurrentModel::Request &amp; _req,uuv_world_ros_plugins_msgs::GetCurrentModel::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterCurrentROSPlugin/#public-boolupdatecurrentvelocityuuv_world_ros_plugins_msgssetcurrentvelocityrequest-_requuv_world_ros_plugins_msgssetcurrentvelocityresponse-_res","text":"Service call to update the mean value of the flow velocity.","title":"public boolUpdateCurrentVelocity(uuv_world_ros_plugins_msgs::SetCurrentVelocity::Request &amp; _req,uuv_world_ros_plugins_msgs::SetCurrentVelocity::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterCurrentROSPlugin/#public-boolupdatehorzangleuuv_world_ros_plugins_msgssetcurrentdirectionrequest-_requuv_world_ros_plugins_msgssetcurrentdirectionresponse-_res","text":"Service call to update the mean value of the horizontal angle.","title":"public boolUpdateHorzAngle(uuv_world_ros_plugins_msgs::SetCurrentDirection::Request &amp; _req,uuv_world_ros_plugins_msgs::SetCurrentDirection::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterCurrentROSPlugin/#public-boolupdatevertangleuuv_world_ros_plugins_msgssetcurrentdirectionrequest-_requuv_world_ros_plugins_msgssetcurrentdirectionresponse-_res","text":"Service call to update the mean value of the vertical angle.","title":"public boolUpdateVertAngle(uuv_world_ros_plugins_msgs::SetCurrentDirection::Request &amp; _req,uuv_world_ros_plugins_msgs::SetCurrentDirection::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/","text":"class uuv_simulator_ros::UnderwaterObjectROSPlugin \u00b6 class uuv_simulator_ros :: UnderwaterObjectROSPlugin : public UnderwaterObjectPlugin Summary \u00b6 Members Descriptions public UnderwaterObjectROSPlugin () Constructor. public virtual ~UnderwaterObjectROSPlugin () Destructor. public void Load (gazebo::physics::ModelPtr _parent,sdf::ElementPtr _sdf) Load module and read parameters from SDF. public virtual void Init () Initialize Module. public virtual void Reset () Reset Module. public virtual void Update (const gazebo::common::UpdateInfo & _info) Update the simulation state. public void UpdateLocalCurrentVelocity (const geometry_msgs::Vector3::ConstPtr & _msg) Update the local current velocity, this data will be used only if the useGlobalCurrent flag is set to false. public bool SetUseGlobalCurrentVel (uuv_gazebo_ros_plugins_msgs::SetUseGlobalCurrentVel::Request & _req,uuv_gazebo_ros_plugins_msgs::SetUseGlobalCurrentVel::Response & _res) Set flag to use the global current velocity topic input. public bool GetModelProperties (uuv_gazebo_ros_plugins_msgs::GetModelProperties::Request & _req,uuv_gazebo_ros_plugins_msgs::GetModelProperties::Response & _res) Return the model properties, along with parameters from the hydrodynamic and hydrostatic models. public bool SetScalingAddedMass (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the scaling factor for the added-mass matrix. public bool GetScalingAddedMass (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return current scaling factor for the added-mass matrix. public bool SetScalingDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set a scaling factor for the overall damping matrix. public bool GetScalingDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the scaling factor for the overall damping matrix. public bool SetScalingVolume (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set scaling factor for the model's volume used for buoyancy force computation. public bool GetScalingVolume (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Get scaling factor for the model's volume used for buoyancy force computation. public bool SetFluidDensity (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set new fluid density (this will alter the value for the buoyancy force) public bool GetFluidDensity (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Get current value for the fluid density. public bool SetOffsetVolume (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set offset factor for the model's volume (this will alter the value for the buoyancy force) public bool GetOffsetVolume (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the model's volume. public bool SetOffsetAddedMass (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the offset factor for the added-mass matrix. public bool GetOffsetAddedMass (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the added-mass matrix. public bool SetOffsetLinearDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the offset factor for the linear damping matrix. public bool GetOffsetLinearDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the linear damping matrix. public bool SetOffsetLinearForwardSpeedDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the offset factor for the linear forward speed damping matrix. public bool GetOffsetLinearForwardSpeedDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the linear forward speed damping matrix. public bool SetOffsetNonLinearDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the offset factor for the nonlinear damping matrix. public bool GetOffsetNonLinearDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the nonlinear damping matrix. protected virtual void PublishRestoringForce (gazebo::physics::LinkPtr _link) Publish restoring force. protected virtual void PublishHydrodynamicWrenches (gazebo::physics::LinkPtr _link) Publish hydrodynamic wrenches. protected virtual void GenWrenchMsg (ignition::math::Vector3d _force,ignition::math::Vector3d _torque,geometry_msgs::WrenchStamped & _output) Returns the wrench message for debugging topics. protected virtual void InitDebug (gazebo::physics::LinkPtr _link,gazebo::HydrodynamicModelPtr _hydro) Sets the topics used for publishing the intermediate data during the simulation. protected virtual void PublishCurrentVelocityMarker () Publishes the current velocity marker. protected virtual void PublishIsSubmerged () Publishes the state of the vehicle (is submerged) Members \u00b6 public UnderwaterObjectROSPlugin () \u00b6 Constructor. public virtual ~UnderwaterObjectROSPlugin () \u00b6 Destructor. public void Load (gazebo::physics::ModelPtr _parent,sdf::ElementPtr _sdf) \u00b6 Load module and read parameters from SDF. public virtual void Init () \u00b6 Initialize Module. public virtual void Reset () \u00b6 Reset Module. public virtual void Update (const gazebo::common::UpdateInfo & _info) \u00b6 Update the simulation state. Parameters \u00b6 _info Information used in the update event. public void UpdateLocalCurrentVelocity (const geometry_msgs::Vector3::ConstPtr & _msg) \u00b6 Update the local current velocity, this data will be used only if the useGlobalCurrent flag is set to false. public bool SetUseGlobalCurrentVel (uuv_gazebo_ros_plugins_msgs::SetUseGlobalCurrentVel::Request & _req,uuv_gazebo_ros_plugins_msgs::SetUseGlobalCurrentVel::Response & _res) \u00b6 Set flag to use the global current velocity topic input. public bool GetModelProperties (uuv_gazebo_ros_plugins_msgs::GetModelProperties::Request & _req,uuv_gazebo_ros_plugins_msgs::GetModelProperties::Response & _res) \u00b6 Return the model properties, along with parameters from the hydrodynamic and hydrostatic models. public bool SetScalingAddedMass (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) \u00b6 Set the scaling factor for the added-mass matrix. public bool GetScalingAddedMass (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) \u00b6 Return current scaling factor for the added-mass matrix. public bool SetScalingDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) \u00b6 Set a scaling factor for the overall damping matrix. public bool GetScalingDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) \u00b6 Return the scaling factor for the overall damping matrix. public bool SetScalingVolume (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) \u00b6 Set scaling factor for the model's volume used for buoyancy force computation. public bool GetScalingVolume (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) \u00b6 Get scaling factor for the model's volume used for buoyancy force computation. public bool SetFluidDensity (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) \u00b6 Set new fluid density (this will alter the value for the buoyancy force) public bool GetFluidDensity (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) \u00b6 Get current value for the fluid density. public bool SetOffsetVolume (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) \u00b6 Set offset factor for the model's volume (this will alter the value for the buoyancy force) public bool GetOffsetVolume (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) \u00b6 Return the offset factor for the model's volume. public bool SetOffsetAddedMass (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) \u00b6 Set the offset factor for the added-mass matrix. public bool GetOffsetAddedMass (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) \u00b6 Return the offset factor for the added-mass matrix. public bool SetOffsetLinearDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) \u00b6 Set the offset factor for the linear damping matrix. public bool GetOffsetLinearDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) \u00b6 Return the offset factor for the linear damping matrix. public bool SetOffsetLinearForwardSpeedDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) \u00b6 Set the offset factor for the linear forward speed damping matrix. public bool GetOffsetLinearForwardSpeedDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) \u00b6 Return the offset factor for the linear forward speed damping matrix. public bool SetOffsetNonLinearDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) \u00b6 Set the offset factor for the nonlinear damping matrix. public bool GetOffsetNonLinearDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) \u00b6 Return the offset factor for the nonlinear damping matrix. protected virtual void PublishRestoringForce (gazebo::physics::LinkPtr _link) \u00b6 Publish restoring force. Parameters \u00b6 _link Pointer to the link where the force information will be extracted from protected virtual void PublishHydrodynamicWrenches (gazebo::physics::LinkPtr _link) \u00b6 Publish hydrodynamic wrenches. Parameters \u00b6 _link Pointer to the link where the force information will be extracted from protected virtual void GenWrenchMsg (ignition::math::Vector3d _force,ignition::math::Vector3d _torque,geometry_msgs::WrenchStamped & _output) \u00b6 Returns the wrench message for debugging topics. Parameters \u00b6 _force Force vector _torque Torque vector _output Stamped wrench message to be updated protected virtual void InitDebug (gazebo::physics::LinkPtr _link,gazebo::HydrodynamicModelPtr _hydro) \u00b6 Sets the topics used for publishing the intermediate data during the simulation. Parameters \u00b6 _link Pointer to the link _hydro Pointer to the hydrodynamic model protected virtual void PublishCurrentVelocityMarker () \u00b6 Publishes the current velocity marker. protected virtual void PublishIsSubmerged () \u00b6 Publishes the state of the vehicle (is submerged)","title":"UnderwaterObjectROSPlugin"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#class-uuv_simulator_rosunderwaterobjectrosplugin","text":"class uuv_simulator_ros :: UnderwaterObjectROSPlugin : public UnderwaterObjectPlugin","title":"class uuv_simulator_ros::UnderwaterObjectROSPlugin"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#summary","text":"Members Descriptions public UnderwaterObjectROSPlugin () Constructor. public virtual ~UnderwaterObjectROSPlugin () Destructor. public void Load (gazebo::physics::ModelPtr _parent,sdf::ElementPtr _sdf) Load module and read parameters from SDF. public virtual void Init () Initialize Module. public virtual void Reset () Reset Module. public virtual void Update (const gazebo::common::UpdateInfo & _info) Update the simulation state. public void UpdateLocalCurrentVelocity (const geometry_msgs::Vector3::ConstPtr & _msg) Update the local current velocity, this data will be used only if the useGlobalCurrent flag is set to false. public bool SetUseGlobalCurrentVel (uuv_gazebo_ros_plugins_msgs::SetUseGlobalCurrentVel::Request & _req,uuv_gazebo_ros_plugins_msgs::SetUseGlobalCurrentVel::Response & _res) Set flag to use the global current velocity topic input. public bool GetModelProperties (uuv_gazebo_ros_plugins_msgs::GetModelProperties::Request & _req,uuv_gazebo_ros_plugins_msgs::GetModelProperties::Response & _res) Return the model properties, along with parameters from the hydrodynamic and hydrostatic models. public bool SetScalingAddedMass (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the scaling factor for the added-mass matrix. public bool GetScalingAddedMass (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return current scaling factor for the added-mass matrix. public bool SetScalingDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set a scaling factor for the overall damping matrix. public bool GetScalingDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the scaling factor for the overall damping matrix. public bool SetScalingVolume (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set scaling factor for the model's volume used for buoyancy force computation. public bool GetScalingVolume (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Get scaling factor for the model's volume used for buoyancy force computation. public bool SetFluidDensity (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set new fluid density (this will alter the value for the buoyancy force) public bool GetFluidDensity (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Get current value for the fluid density. public bool SetOffsetVolume (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set offset factor for the model's volume (this will alter the value for the buoyancy force) public bool GetOffsetVolume (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the model's volume. public bool SetOffsetAddedMass (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the offset factor for the added-mass matrix. public bool GetOffsetAddedMass (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the added-mass matrix. public bool SetOffsetLinearDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the offset factor for the linear damping matrix. public bool GetOffsetLinearDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the linear damping matrix. public bool SetOffsetLinearForwardSpeedDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the offset factor for the linear forward speed damping matrix. public bool GetOffsetLinearForwardSpeedDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the linear forward speed damping matrix. public bool SetOffsetNonLinearDamping (uuv_gazebo_ros_plugins_msgs::SetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response & _res) Set the offset factor for the nonlinear damping matrix. public bool GetOffsetNonLinearDamping (uuv_gazebo_ros_plugins_msgs::GetFloat::Request & _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response & _res) Return the offset factor for the nonlinear damping matrix. protected virtual void PublishRestoringForce (gazebo::physics::LinkPtr _link) Publish restoring force. protected virtual void PublishHydrodynamicWrenches (gazebo::physics::LinkPtr _link) Publish hydrodynamic wrenches. protected virtual void GenWrenchMsg (ignition::math::Vector3d _force,ignition::math::Vector3d _torque,geometry_msgs::WrenchStamped & _output) Returns the wrench message for debugging topics. protected virtual void InitDebug (gazebo::physics::LinkPtr _link,gazebo::HydrodynamicModelPtr _hydro) Sets the topics used for publishing the intermediate data during the simulation. protected virtual void PublishCurrentVelocityMarker () Publishes the current velocity marker. protected virtual void PublishIsSubmerged () Publishes the state of the vehicle (is submerged)","title":"Summary"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#members","text":"","title":"Members"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#publicunderwaterobjectrosplugin","text":"Constructor.","title":"publicUnderwaterObjectROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-virtualunderwaterobjectrosplugin","text":"Destructor.","title":"public virtual~UnderwaterObjectROSPlugin()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-voidloadgazebophysicsmodelptr-_parentsdfelementptr-_sdf","text":"Load module and read parameters from SDF.","title":"public voidLoad(gazebo::physics::ModelPtr _parent,sdf::ElementPtr _sdf)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-virtual-voidinit","text":"Initialize Module.","title":"public virtual voidInit()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-virtual-voidreset","text":"Reset Module.","title":"public virtual voidReset()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-virtual-voidupdateconst-gazebocommonupdateinfo-_info","text":"Update the simulation state.","title":"public virtual voidUpdate(const gazebo::common::UpdateInfo &amp; _info)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#parameters","text":"_info Information used in the update event.","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-voidupdatelocalcurrentvelocityconst-geometry_msgsvector3constptr-_msg","text":"Update the local current velocity, this data will be used only if the useGlobalCurrent flag is set to false.","title":"public voidUpdateLocalCurrentVelocity(const geometry_msgs::Vector3::ConstPtr &amp; _msg)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolsetuseglobalcurrentveluuv_gazebo_ros_plugins_msgssetuseglobalcurrentvelrequest-_requuv_gazebo_ros_plugins_msgssetuseglobalcurrentvelresponse-_res","text":"Set flag to use the global current velocity topic input.","title":"public boolSetUseGlobalCurrentVel(uuv_gazebo_ros_plugins_msgs::SetUseGlobalCurrentVel::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::SetUseGlobalCurrentVel::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolgetmodelpropertiesuuv_gazebo_ros_plugins_msgsgetmodelpropertiesrequest-_requuv_gazebo_ros_plugins_msgsgetmodelpropertiesresponse-_res","text":"Return the model properties, along with parameters from the hydrodynamic and hydrostatic models.","title":"public boolGetModelProperties(uuv_gazebo_ros_plugins_msgs::GetModelProperties::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::GetModelProperties::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolsetscalingaddedmassuuv_gazebo_ros_plugins_msgssetfloatrequest-_requuv_gazebo_ros_plugins_msgssetfloatresponse-_res","text":"Set the scaling factor for the added-mass matrix.","title":"public boolSetScalingAddedMass(uuv_gazebo_ros_plugins_msgs::SetFloat::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolgetscalingaddedmassuuv_gazebo_ros_plugins_msgsgetfloatrequest-_requuv_gazebo_ros_plugins_msgsgetfloatresponse-_res","text":"Return current scaling factor for the added-mass matrix.","title":"public boolGetScalingAddedMass(uuv_gazebo_ros_plugins_msgs::GetFloat::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolsetscalingdampinguuv_gazebo_ros_plugins_msgssetfloatrequest-_requuv_gazebo_ros_plugins_msgssetfloatresponse-_res","text":"Set a scaling factor for the overall damping matrix.","title":"public boolSetScalingDamping(uuv_gazebo_ros_plugins_msgs::SetFloat::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolgetscalingdampinguuv_gazebo_ros_plugins_msgsgetfloatrequest-_requuv_gazebo_ros_plugins_msgsgetfloatresponse-_res","text":"Return the scaling factor for the overall damping matrix.","title":"public boolGetScalingDamping(uuv_gazebo_ros_plugins_msgs::GetFloat::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolsetscalingvolumeuuv_gazebo_ros_plugins_msgssetfloatrequest-_requuv_gazebo_ros_plugins_msgssetfloatresponse-_res","text":"Set scaling factor for the model's volume used for buoyancy force computation.","title":"public boolSetScalingVolume(uuv_gazebo_ros_plugins_msgs::SetFloat::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolgetscalingvolumeuuv_gazebo_ros_plugins_msgsgetfloatrequest-_requuv_gazebo_ros_plugins_msgsgetfloatresponse-_res","text":"Get scaling factor for the model's volume used for buoyancy force computation.","title":"public boolGetScalingVolume(uuv_gazebo_ros_plugins_msgs::GetFloat::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolsetfluiddensityuuv_gazebo_ros_plugins_msgssetfloatrequest-_requuv_gazebo_ros_plugins_msgssetfloatresponse-_res","text":"Set new fluid density (this will alter the value for the buoyancy force)","title":"public boolSetFluidDensity(uuv_gazebo_ros_plugins_msgs::SetFloat::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolgetfluiddensityuuv_gazebo_ros_plugins_msgsgetfloatrequest-_requuv_gazebo_ros_plugins_msgsgetfloatresponse-_res","text":"Get current value for the fluid density.","title":"public boolGetFluidDensity(uuv_gazebo_ros_plugins_msgs::GetFloat::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolsetoffsetvolumeuuv_gazebo_ros_plugins_msgssetfloatrequest-_requuv_gazebo_ros_plugins_msgssetfloatresponse-_res","text":"Set offset factor for the model's volume (this will alter the value for the buoyancy force)","title":"public boolSetOffsetVolume(uuv_gazebo_ros_plugins_msgs::SetFloat::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolgetoffsetvolumeuuv_gazebo_ros_plugins_msgsgetfloatrequest-_requuv_gazebo_ros_plugins_msgsgetfloatresponse-_res","text":"Return the offset factor for the model's volume.","title":"public boolGetOffsetVolume(uuv_gazebo_ros_plugins_msgs::GetFloat::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolsetoffsetaddedmassuuv_gazebo_ros_plugins_msgssetfloatrequest-_requuv_gazebo_ros_plugins_msgssetfloatresponse-_res","text":"Set the offset factor for the added-mass matrix.","title":"public boolSetOffsetAddedMass(uuv_gazebo_ros_plugins_msgs::SetFloat::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolgetoffsetaddedmassuuv_gazebo_ros_plugins_msgsgetfloatrequest-_requuv_gazebo_ros_plugins_msgsgetfloatresponse-_res","text":"Return the offset factor for the added-mass matrix.","title":"public boolGetOffsetAddedMass(uuv_gazebo_ros_plugins_msgs::GetFloat::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolsetoffsetlineardampinguuv_gazebo_ros_plugins_msgssetfloatrequest-_requuv_gazebo_ros_plugins_msgssetfloatresponse-_res","text":"Set the offset factor for the linear damping matrix.","title":"public boolSetOffsetLinearDamping(uuv_gazebo_ros_plugins_msgs::SetFloat::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolgetoffsetlineardampinguuv_gazebo_ros_plugins_msgsgetfloatrequest-_requuv_gazebo_ros_plugins_msgsgetfloatresponse-_res","text":"Return the offset factor for the linear damping matrix.","title":"public boolGetOffsetLinearDamping(uuv_gazebo_ros_plugins_msgs::GetFloat::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolsetoffsetlinearforwardspeeddampinguuv_gazebo_ros_plugins_msgssetfloatrequest-_requuv_gazebo_ros_plugins_msgssetfloatresponse-_res","text":"Set the offset factor for the linear forward speed damping matrix.","title":"public boolSetOffsetLinearForwardSpeedDamping(uuv_gazebo_ros_plugins_msgs::SetFloat::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolgetoffsetlinearforwardspeeddampinguuv_gazebo_ros_plugins_msgsgetfloatrequest-_requuv_gazebo_ros_plugins_msgsgetfloatresponse-_res","text":"Return the offset factor for the linear forward speed damping matrix.","title":"public boolGetOffsetLinearForwardSpeedDamping(uuv_gazebo_ros_plugins_msgs::GetFloat::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolsetoffsetnonlineardampinguuv_gazebo_ros_plugins_msgssetfloatrequest-_requuv_gazebo_ros_plugins_msgssetfloatresponse-_res","text":"Set the offset factor for the nonlinear damping matrix.","title":"public boolSetOffsetNonLinearDamping(uuv_gazebo_ros_plugins_msgs::SetFloat::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::SetFloat::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#public-boolgetoffsetnonlineardampinguuv_gazebo_ros_plugins_msgsgetfloatrequest-_requuv_gazebo_ros_plugins_msgsgetfloatresponse-_res","text":"Return the offset factor for the nonlinear damping matrix.","title":"public boolGetOffsetNonLinearDamping(uuv_gazebo_ros_plugins_msgs::GetFloat::Request &amp; _req,uuv_gazebo_ros_plugins_msgs::GetFloat::Response &amp; _res)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#protected-virtual-voidpublishrestoringforcegazebophysicslinkptr-_link","text":"Publish restoring force.","title":"protected virtual voidPublishRestoringForce(gazebo::physics::LinkPtr _link)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#parameters_1","text":"_link Pointer to the link where the force information will be extracted from","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#protected-virtual-voidpublishhydrodynamicwrenchesgazebophysicslinkptr-_link","text":"Publish hydrodynamic wrenches.","title":"protected virtual voidPublishHydrodynamicWrenches(gazebo::physics::LinkPtr _link)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#parameters_2","text":"_link Pointer to the link where the force information will be extracted from","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#protected-virtual-voidgenwrenchmsgignitionmathvector3d-_forceignitionmathvector3d-_torquegeometry_msgswrenchstamped-_output","text":"Returns the wrench message for debugging topics.","title":"protected virtual voidGenWrenchMsg(ignition::math::Vector3d _force,ignition::math::Vector3d _torque,geometry_msgs::WrenchStamped &amp; _output)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#parameters_3","text":"_force Force vector _torque Torque vector _output Stamped wrench message to be updated","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#protected-virtual-voidinitdebuggazebophysicslinkptr-_linkgazebohydrodynamicmodelptr-_hydro","text":"Sets the topics used for publishing the intermediate data during the simulation.","title":"protected virtual voidInitDebug(gazebo::physics::LinkPtr _link,gazebo::HydrodynamicModelPtr _hydro)"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#parameters_4","text":"_link Pointer to the link _hydro Pointer to the hydrodynamic model","title":"Parameters"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#protected-virtual-voidpublishcurrentvelocitymarker","text":"Publishes the current velocity marker.","title":"protected virtual voidPublishCurrentVelocityMarker()"},{"location":"packages/uuv_simulator/docs/api/uuv_simulator_ros::UnderwaterObjectROSPlugin/#protected-virtual-voidpublishissubmerged","text":"Publishes the state of the vehicle (is submerged)","title":"protected virtual voidPublishIsSubmerged()"},{"location":"packages/uuv_simulator/docs/packages/uuv_assistants/","text":"Link to the uuv_simulator repository here Description \u00b6 Tools and utilities to monitor and analyze the simulation Launch files \u00b6 publish_footprints.launch \u00b6 message_to_tf.launch \u00b6 Arguments namespace ( default: rexrov ) world_frame ( default: world ) child_frame_id ( default: /$(arg namespace)/base_link ) odometry_topic ( default: /$(arg namespace)/pose_gt ) publish_vehicle_footprint.launch \u00b6 Arguments uuv_name scale_footprint ( default: 10 ) scale_label ( default: 10 ) label_x_offset ( default: 60 ) odom_topic ( default: pose_gt ) publish_world_ned_frame.launch \u00b6 set_simulation_timer.launch \u00b6 Arguments timeout unpause_simulation.launch \u00b6 Arguments timeout ( default: 0 ) publish_body_sname.launch \u00b6 Arguments uuv_name Scripts \u00b6 publish_world_models.py \u00b6 Script type: python publish_footprints.py \u00b6 Script type: python publish_vehicle_footprint.py \u00b6 Script type: python create_new_robot_model \u00b6 Script type: python unpause_simulation.py \u00b6 Script type: python create_thruster_manager_configuration \u00b6 Script type: python set_simulation_timer.py \u00b6 Script type: python","title":"uuv_assistants"},{"location":"packages/uuv_simulator/docs/packages/uuv_assistants/#description","text":"Tools and utilities to monitor and analyze the simulation","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_assistants/#launch-files","text":"","title":"Launch files"},{"location":"packages/uuv_simulator/docs/packages/uuv_assistants/#publish_footprintslaunch","text":"","title":"publish_footprints.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_assistants/#message_to_tflaunch","text":"Arguments namespace ( default: rexrov ) world_frame ( default: world ) child_frame_id ( default: /$(arg namespace)/base_link ) odometry_topic ( default: /$(arg namespace)/pose_gt )","title":"message_to_tf.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_assistants/#publish_vehicle_footprintlaunch","text":"Arguments uuv_name scale_footprint ( default: 10 ) scale_label ( default: 10 ) label_x_offset ( default: 60 ) odom_topic ( default: pose_gt )","title":"publish_vehicle_footprint.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_assistants/#publish_world_ned_framelaunch","text":"","title":"publish_world_ned_frame.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_assistants/#set_simulation_timerlaunch","text":"Arguments timeout","title":"set_simulation_timer.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_assistants/#unpause_simulationlaunch","text":"Arguments timeout ( default: 0 )","title":"unpause_simulation.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_assistants/#publish_body_snamelaunch","text":"Arguments uuv_name","title":"publish_body_sname.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_assistants/#scripts","text":"","title":"Scripts"},{"location":"packages/uuv_simulator/docs/packages/uuv_assistants/#publish_world_modelspy","text":"Script type: python","title":"publish_world_models.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_assistants/#publish_footprintspy","text":"Script type: python","title":"publish_footprints.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_assistants/#publish_vehicle_footprintpy","text":"Script type: python","title":"publish_vehicle_footprint.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_assistants/#create_new_robot_model","text":"Script type: python","title":"create_new_robot_model"},{"location":"packages/uuv_simulator/docs/packages/uuv_assistants/#unpause_simulationpy","text":"Script type: python","title":"unpause_simulation.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_assistants/#create_thruster_manager_configuration","text":"Script type: python","title":"create_thruster_manager_configuration"},{"location":"packages/uuv_simulator/docs/packages/uuv_assistants/#set_simulation_timerpy","text":"Script type: python","title":"set_simulation_timer.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_auv_control_allocator/","text":"Link to the uuv_simulator repository here Description \u00b6 Optimal allocation of forces and torques to thruster and fins of AUVs Launch files \u00b6 start_control_allocator.launch \u00b6 Arguments uuv_name base_link ( default: base_link ) output_dir input_topic ( default: control_allocation/control_input ) thruster_topic_prefix ( default: thrusters ) thruster_topic_suffix ( default: input ) thruster_frame_base ( default: thruster_ ) max_thrust ( default: 120 ) thruster_conversion_fcn ( default: proportional ) thruster_gain ( default: 0.0 ) thruster_input ( default: 0,1,2,3 ) thruster_output ( default: 0,1,2,3 ) fin_frame_base ( default: fin ) fluid_density ( default: 1028.0 ) lift_coefficient ( default: 0.0 ) fin_area ( default: 0.0 ) fin_topic_prefix ( default: fins ) fin_topic_suffix ( default: input ) fin_lower_joint_limit ( default: -1.57 ) fin_upper_joint_limit ( default: 1.57 ) timeout ( default: -1 ) update_rate ( default: 10 ) ROS Messages \u00b6 AUVCommand \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. std_msgs/Header header float64 surge_speed geometry_msgs/Wrench command Scripts \u00b6 control_allocator \u00b6 Script type: python","title":"uuv_auv_control_allocator"},{"location":"packages/uuv_simulator/docs/packages/uuv_auv_control_allocator/#description","text":"Optimal allocation of forces and torques to thruster and fins of AUVs","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_auv_control_allocator/#launch-files","text":"","title":"Launch files"},{"location":"packages/uuv_simulator/docs/packages/uuv_auv_control_allocator/#start_control_allocatorlaunch","text":"Arguments uuv_name base_link ( default: base_link ) output_dir input_topic ( default: control_allocation/control_input ) thruster_topic_prefix ( default: thrusters ) thruster_topic_suffix ( default: input ) thruster_frame_base ( default: thruster_ ) max_thrust ( default: 120 ) thruster_conversion_fcn ( default: proportional ) thruster_gain ( default: 0.0 ) thruster_input ( default: 0,1,2,3 ) thruster_output ( default: 0,1,2,3 ) fin_frame_base ( default: fin ) fluid_density ( default: 1028.0 ) lift_coefficient ( default: 0.0 ) fin_area ( default: 0.0 ) fin_topic_prefix ( default: fins ) fin_topic_suffix ( default: input ) fin_lower_joint_limit ( default: -1.57 ) fin_upper_joint_limit ( default: 1.57 ) timeout ( default: -1 ) update_rate ( default: 10 )","title":"start_control_allocator.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_auv_control_allocator/#ros-messages","text":"","title":"ROS Messages"},{"location":"packages/uuv_simulator/docs/packages/uuv_auv_control_allocator/#auvcommand","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. std_msgs/Header header float64 surge_speed geometry_msgs/Wrench command","title":"AUVCommand"},{"location":"packages/uuv_simulator/docs/packages/uuv_auv_control_allocator/#scripts","text":"","title":"Scripts"},{"location":"packages/uuv_simulator/docs/packages/uuv_auv_control_allocator/#control_allocator","text":"Script type: python","title":"control_allocator"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_cascaded_pid/","text":"Link to the uuv_simulator repository here Description \u00b6 A cascade of PID controllers for acceleration, velocity, and position control. Launch files \u00b6 joy_velocity.launch \u00b6 Arguments model_name uuv_name ( default: $(arg model_name) ) joy_id ( default: 0 ) joy_accel.launch \u00b6 Arguments model_name uuv_name ( default: $(arg model_name) ) joy_id ( default: 0 ) position_hold.launch \u00b6 Arguments model_name uuv_name ( default: $(arg model_name) ) Scripts \u00b6 AccelerationControl.py \u00b6 Script type: python PositionControl.py \u00b6 Script type: python PositionControlUnderactuated.py \u00b6 Script type: python VelocityControl.py \u00b6 Script type: python","title":"uuv_control_cascaded_pid"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_cascaded_pid/#description","text":"A cascade of PID controllers for acceleration, velocity, and position control.","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_cascaded_pid/#launch-files","text":"","title":"Launch files"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_cascaded_pid/#joy_velocitylaunch","text":"Arguments model_name uuv_name ( default: $(arg model_name) ) joy_id ( default: 0 )","title":"joy_velocity.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_cascaded_pid/#joy_accellaunch","text":"Arguments model_name uuv_name ( default: $(arg model_name) ) joy_id ( default: 0 )","title":"joy_accel.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_cascaded_pid/#position_holdlaunch","text":"Arguments model_name uuv_name ( default: $(arg model_name) )","title":"position_hold.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_cascaded_pid/#scripts","text":"","title":"Scripts"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_cascaded_pid/#accelerationcontrolpy","text":"Script type: python","title":"AccelerationControl.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_cascaded_pid/#positioncontrolpy","text":"Script type: python","title":"PositionControl.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_cascaded_pid/#positioncontrolunderactuatedpy","text":"Script type: python","title":"PositionControlUnderactuated.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_cascaded_pid/#velocitycontrolpy","text":"Script type: python","title":"VelocityControl.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/","text":"Link to the uuv_simulator repository here Description \u00b6 The uuv_control_msgs package ROS Services \u00b6 InitCircularTrajectory \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. std_msgs/Time start_time bool start_now float64 radius geometry_msgs/Point center bool is_clockwise float64 angle_offset int32 n_points float64 heading_offset float64 max_forward_speed float64 duration --- bool success Hold \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- bool success SetSMControllerParams \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64[] K float64[] Kd float64[] Ki float64[] slope --- bool success GetPIDParams \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- float64[] Kp float64[] Kd float64[] Ki SetPIDParams \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64[] Kp float64[] Kd float64[] Ki --- bool success StartTrajectory \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- bool success ResetController \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- bool success AddWaypoint \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. uuv_control_msgs/Waypoint waypoint --- bool success uuv_control_msgs/Waypoint[] waypoints SetMBSMControllerParams \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64[] lambda float64[] rho_constant float64[] k float64[] c float64[] adapt_slope float64[] rho_0 float64 drift_prevent --- bool success SwitchToAutomatic \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- bool success ClearWaypoints \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- bool success GetSMControllerParams \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- float64[] K float64[] Kd float64[] Ki float64[] slope IsRunningTrajectory \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- float64 progress InitWaypointsFromFile \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. string LIPB='lipb' string CUBIC='cubic' string DUBINS='dubins' string LINEAR='linear' std_msgs/Time start_time bool start_now std_msgs/String filename std_msgs/String interpolator --- bool success InitHelicalTrajectory \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. std_msgs/Time start_time bool start_now float64 radius geometry_msgs/Point center bool is_clockwise float64 angle_offset int32 n_points float64 heading_offset float64 max_forward_speed float64 duration float64 n_turns float64 delta_z --- bool success InitWaypointSet \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. std_msgs/Time start_time bool start_now uuv_control_msgs/Waypoint[] waypoints float64 max_forward_speed float64 heading_offset std_msgs/String interpolator --- bool success GetWaypoints \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- uuv_control_msgs/Waypoint[] waypoints GoTo \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. string LIPB='lipb' string CUBIC='cubic' string DUBINS='dubins' string LINEAR='linear' uuv_control_msgs/Waypoint waypoint float64 max_forward_speed string interpolator --- bool success InitRectTrajectory \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. std_msgs/Time start_time bool start_now geometry_msgs/Point origin float64 height float64 width float64 angle_offset float64 heading_offset float64 max_forward_speed --- bool success GoToIncremental \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. string LIPB='lipb' string CUBIC='cubic' string DUBINS='dubins' string LINEAR='linear' geometry_msgs/Point step float64 max_forward_speed string interpolator --- bool success SwitchToManual \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- bool success GetMBSMControllerParams \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- float64[] lambda float64[] rho_constant float64[] k float64[] c float64[] adapt_slope float64[] rho_0 float64 drift_prevent","title":"uuv_control_msgs"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#description","text":"The uuv_control_msgs package","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#ros-services","text":"","title":"ROS Services"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#initcirculartrajectory","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. std_msgs/Time start_time bool start_now float64 radius geometry_msgs/Point center bool is_clockwise float64 angle_offset int32 n_points float64 heading_offset float64 max_forward_speed float64 duration --- bool success","title":"InitCircularTrajectory"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#hold","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- bool success","title":"Hold"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#setsmcontrollerparams","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64[] K float64[] Kd float64[] Ki float64[] slope --- bool success","title":"SetSMControllerParams"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#getpidparams","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- float64[] Kp float64[] Kd float64[] Ki","title":"GetPIDParams"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#setpidparams","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64[] Kp float64[] Kd float64[] Ki --- bool success","title":"SetPIDParams"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#starttrajectory","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- bool success","title":"StartTrajectory"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#resetcontroller","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- bool success","title":"ResetController"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#addwaypoint","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. uuv_control_msgs/Waypoint waypoint --- bool success uuv_control_msgs/Waypoint[] waypoints","title":"AddWaypoint"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#setmbsmcontrollerparams","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64[] lambda float64[] rho_constant float64[] k float64[] c float64[] adapt_slope float64[] rho_0 float64 drift_prevent --- bool success","title":"SetMBSMControllerParams"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#switchtoautomatic","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- bool success","title":"SwitchToAutomatic"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#clearwaypoints","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- bool success","title":"ClearWaypoints"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#getsmcontrollerparams","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- float64[] K float64[] Kd float64[] Ki float64[] slope","title":"GetSMControllerParams"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#isrunningtrajectory","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- float64 progress","title":"IsRunningTrajectory"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#initwaypointsfromfile","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. string LIPB='lipb' string CUBIC='cubic' string DUBINS='dubins' string LINEAR='linear' std_msgs/Time start_time bool start_now std_msgs/String filename std_msgs/String interpolator --- bool success","title":"InitWaypointsFromFile"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#inithelicaltrajectory","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. std_msgs/Time start_time bool start_now float64 radius geometry_msgs/Point center bool is_clockwise float64 angle_offset int32 n_points float64 heading_offset float64 max_forward_speed float64 duration float64 n_turns float64 delta_z --- bool success","title":"InitHelicalTrajectory"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#initwaypointset","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. std_msgs/Time start_time bool start_now uuv_control_msgs/Waypoint[] waypoints float64 max_forward_speed float64 heading_offset std_msgs/String interpolator --- bool success","title":"InitWaypointSet"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#getwaypoints","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- uuv_control_msgs/Waypoint[] waypoints","title":"GetWaypoints"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#goto","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. string LIPB='lipb' string CUBIC='cubic' string DUBINS='dubins' string LINEAR='linear' uuv_control_msgs/Waypoint waypoint float64 max_forward_speed string interpolator --- bool success","title":"GoTo"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#initrecttrajectory","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. std_msgs/Time start_time bool start_now geometry_msgs/Point origin float64 height float64 width float64 angle_offset float64 heading_offset float64 max_forward_speed --- bool success","title":"InitRectTrajectory"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#gotoincremental","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. string LIPB='lipb' string CUBIC='cubic' string DUBINS='dubins' string LINEAR='linear' geometry_msgs/Point step float64 max_forward_speed string interpolator --- bool success","title":"GoToIncremental"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#switchtomanual","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- bool success","title":"SwitchToManual"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_msgs/#getmbsmcontrollerparams","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- float64[] lambda float64[] rho_constant float64[] k float64[] c float64[] adapt_slope float64[] rho_0 float64 drift_prevent","title":"GetMBSMControllerParams"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/","text":"Link to the uuv_simulator repository here Description \u00b6 The uuv_control_utils package Launch files \u00b6 send_waypoints_file.launch \u00b6 Arguments uuv_name filename ( default: $(find uuv_control_utils)/config/example_waypoints.yaml ) start_time ( default: -1 ) interpolator ( default: lipb ) set_timed_current_perturbation.launch \u00b6 Arguments starting_time ( default: 0.0 ) end_time ( default: -1 ) current_vel ( default: 1 ) horizontal_angle ( default: 0.0 ) vertical_angle ( default: 0.0 ) start_disturbance_manager.launch \u00b6 Arguments uuv_name use_file ( default: false ) disturbance_file current_starting_time ( default: 20.0 ) current_vel ( default: 1 ) current_horz_angle ( default: 0.0 ) current_vert_angle ( default: 0.0 ) current_duration ( default: 10 ) force_x ( default: 0 ) force_y ( default: 2000 ) force_z ( default: 0 ) torque_x ( default: 0 ) torque_y ( default: 0 ) torque_z ( default: 0 ) wrench_starting_time ( default: 30 ) wrench_duration ( default: 20 ) apply_body_wrench.launch \u00b6 Arguments uuv_name force_x ( default: 0 ) force_y ( default: 0 ) force_z ( default: 0 ) torque_x ( default: 0 ) torque_y ( default: 0 ) torque_z ( default: 0 ) starting_time ( default: 0 ) duration ( default: 1 ) start_circular_trajectory.launch \u00b6 Arguments uuv_name start_time ( default: -1 ) radius ( default: 8 ) center_x ( default: 4 ) center_y ( default: 2 ) center_z ( default: -22 ) n_points ( default: 50 ) heading_offset ( default: 0 ) duration ( default: 0 ) max_forward_speed ( default: 0.3 ) set_gm_current_perturbation.launch \u00b6 Arguments component mean ( default: 0.0 ) min ( default: 0.0 ) max ( default: 0.0 ) noise ( default: 0.0 ) mu ( default: 0.0 ) set_scalar_parameter.launch \u00b6 Arguments uuv_name service_name data set_thruster_output_efficiency.launch \u00b6 Arguments uuv_name starting_time ( default: 0.0 ) thruster_id ( default: 0 ) efficiency ( default: 1.0 ) duration ( default: -1 ) set_thruster_state.launch \u00b6 Arguments uuv_name starting_time ( default: 0.0 ) thruster_id ( default: 0 ) is_on ( default: 0 ) duration ( default: -1 ) start_helical_trajectory.launch \u00b6 Arguments uuv_name start_time ( default: -1 ) radius ( default: 8 ) center_x ( default: 0 ) center_y ( default: 0 ) center_z ( default: -30 ) n_points ( default: 50 ) n_turns ( default: 1 ) delta_z ( default: 5.0 ) heading_offset ( default: 0 ) duration ( default: 150 ) max_forward_speed ( default: 0.3 ) Scripts \u00b6 set_timed_current_perturbation.py \u00b6 Script type: python apply_body_wrench.py \u00b6 Script type: python trajectory_marker_publisher.py \u00b6 Script type: python set_scalar_parameter.py \u00b6 Script type: python set_thruster_output_efficiency.py \u00b6 Script type: python start_helical_trajectory.py \u00b6 Script type: python disturbance_manager.py \u00b6 Script type: python send_waypoint_file.py \u00b6 Script type: python start_circular_trajectory.py \u00b6 Script type: python set_thruster_state.py \u00b6 Script type: python set_gm_current_perturbation.py \u00b6 Script type: python","title":"uuv_control_utils"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#description","text":"The uuv_control_utils package","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#launch-files","text":"","title":"Launch files"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#send_waypoints_filelaunch","text":"Arguments uuv_name filename ( default: $(find uuv_control_utils)/config/example_waypoints.yaml ) start_time ( default: -1 ) interpolator ( default: lipb )","title":"send_waypoints_file.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#set_timed_current_perturbationlaunch","text":"Arguments starting_time ( default: 0.0 ) end_time ( default: -1 ) current_vel ( default: 1 ) horizontal_angle ( default: 0.0 ) vertical_angle ( default: 0.0 )","title":"set_timed_current_perturbation.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#start_disturbance_managerlaunch","text":"Arguments uuv_name use_file ( default: false ) disturbance_file current_starting_time ( default: 20.0 ) current_vel ( default: 1 ) current_horz_angle ( default: 0.0 ) current_vert_angle ( default: 0.0 ) current_duration ( default: 10 ) force_x ( default: 0 ) force_y ( default: 2000 ) force_z ( default: 0 ) torque_x ( default: 0 ) torque_y ( default: 0 ) torque_z ( default: 0 ) wrench_starting_time ( default: 30 ) wrench_duration ( default: 20 )","title":"start_disturbance_manager.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#apply_body_wrenchlaunch","text":"Arguments uuv_name force_x ( default: 0 ) force_y ( default: 0 ) force_z ( default: 0 ) torque_x ( default: 0 ) torque_y ( default: 0 ) torque_z ( default: 0 ) starting_time ( default: 0 ) duration ( default: 1 )","title":"apply_body_wrench.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#start_circular_trajectorylaunch","text":"Arguments uuv_name start_time ( default: -1 ) radius ( default: 8 ) center_x ( default: 4 ) center_y ( default: 2 ) center_z ( default: -22 ) n_points ( default: 50 ) heading_offset ( default: 0 ) duration ( default: 0 ) max_forward_speed ( default: 0.3 )","title":"start_circular_trajectory.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#set_gm_current_perturbationlaunch","text":"Arguments component mean ( default: 0.0 ) min ( default: 0.0 ) max ( default: 0.0 ) noise ( default: 0.0 ) mu ( default: 0.0 )","title":"set_gm_current_perturbation.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#set_scalar_parameterlaunch","text":"Arguments uuv_name service_name data","title":"set_scalar_parameter.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#set_thruster_output_efficiencylaunch","text":"Arguments uuv_name starting_time ( default: 0.0 ) thruster_id ( default: 0 ) efficiency ( default: 1.0 ) duration ( default: -1 )","title":"set_thruster_output_efficiency.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#set_thruster_statelaunch","text":"Arguments uuv_name starting_time ( default: 0.0 ) thruster_id ( default: 0 ) is_on ( default: 0 ) duration ( default: -1 )","title":"set_thruster_state.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#start_helical_trajectorylaunch","text":"Arguments uuv_name start_time ( default: -1 ) radius ( default: 8 ) center_x ( default: 0 ) center_y ( default: 0 ) center_z ( default: -30 ) n_points ( default: 50 ) n_turns ( default: 1 ) delta_z ( default: 5.0 ) heading_offset ( default: 0 ) duration ( default: 150 ) max_forward_speed ( default: 0.3 )","title":"start_helical_trajectory.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#scripts","text":"","title":"Scripts"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#set_timed_current_perturbationpy","text":"Script type: python","title":"set_timed_current_perturbation.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#apply_body_wrenchpy","text":"Script type: python","title":"apply_body_wrench.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#trajectory_marker_publisherpy","text":"Script type: python","title":"trajectory_marker_publisher.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#set_scalar_parameterpy","text":"Script type: python","title":"set_scalar_parameter.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#set_thruster_output_efficiencypy","text":"Script type: python","title":"set_thruster_output_efficiency.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#start_helical_trajectorypy","text":"Script type: python","title":"start_helical_trajectory.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#disturbance_managerpy","text":"Script type: python","title":"disturbance_manager.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#send_waypoint_filepy","text":"Script type: python","title":"send_waypoint_file.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#start_circular_trajectorypy","text":"Script type: python","title":"start_circular_trajectory.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#set_thruster_statepy","text":"Script type: python","title":"set_thruster_state.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_control_utils/#set_gm_current_perturbationpy","text":"Script type: python","title":"set_gm_current_perturbation.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_descriptions/","text":"Link to the uuv_simulator repository here Description \u00b6 The uuv_descriptions package Launch files \u00b6 upload_rexrov_oberon_arms.launch \u00b6 Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) namespace ( default: rexrov ) use_ned_frame ( default: false ) upload_rexrov_oberon7.launch \u00b6 Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) namespace ( default: rexrov ) use_ned_frame ( default: false ) message_to_tf.launch \u00b6 Arguments namespace ( default: rexrov ) upload_rexrov_default.launch \u00b6 Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) mode ( default: default ) namespace ( default: rexrov ) use_ned_frame ( default: false ) upload_rexrov_default_noisy_pose.launch \u00b6 Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) mode ( default: default ) namespace ( default: rexrov ) pose_noise ( default: 0.02 ) world_frame ( default: world ) upload_rexrov.launch \u00b6 Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) mode ( default: default ) namespace ( default: rexrov ) use_ned_frame ( default: false ) upload_rexrov_oberon4.launch \u00b6 Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) namespace ( default: rexrov ) use_ned_frame ( default: false ) Scripts \u00b6 spawn_model \u00b6 Script type: python","title":"uuv_descriptions"},{"location":"packages/uuv_simulator/docs/packages/uuv_descriptions/#description","text":"The uuv_descriptions package","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_descriptions/#launch-files","text":"","title":"Launch files"},{"location":"packages/uuv_simulator/docs/packages/uuv_descriptions/#upload_rexrov_oberon_armslaunch","text":"Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) namespace ( default: rexrov ) use_ned_frame ( default: false )","title":"upload_rexrov_oberon_arms.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_descriptions/#upload_rexrov_oberon7launch","text":"Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) namespace ( default: rexrov ) use_ned_frame ( default: false )","title":"upload_rexrov_oberon7.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_descriptions/#message_to_tflaunch","text":"Arguments namespace ( default: rexrov )","title":"message_to_tf.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_descriptions/#upload_rexrov_defaultlaunch","text":"Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) mode ( default: default ) namespace ( default: rexrov ) use_ned_frame ( default: false )","title":"upload_rexrov_default.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_descriptions/#upload_rexrov_default_noisy_poselaunch","text":"Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) mode ( default: default ) namespace ( default: rexrov ) pose_noise ( default: 0.02 ) world_frame ( default: world )","title":"upload_rexrov_default_noisy_pose.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_descriptions/#upload_rexrovlaunch","text":"Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) mode ( default: default ) namespace ( default: rexrov ) use_ned_frame ( default: false )","title":"upload_rexrov.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_descriptions/#upload_rexrov_oberon4launch","text":"Arguments debug ( default: 0 ) x ( default: 0 ) y ( default: 0 ) z ( default: -20 ) roll ( default: 0.0 ) pitch ( default: 0.0 ) yaw ( default: 0.0 ) namespace ( default: rexrov ) use_ned_frame ( default: false )","title":"upload_rexrov_oberon4.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_descriptions/#scripts","text":"","title":"Scripts"},{"location":"packages/uuv_simulator/docs/packages/uuv_descriptions/#spawn_model","text":"Script type: python","title":"spawn_model"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo/","text":"Link to the uuv_simulator repository here Description \u00b6 The uuv_gazebo package Launch files \u00b6","title":"uuv_gazebo"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo/#description","text":"The uuv_gazebo package","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo/#launch-files","text":"","title":"Launch files"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_plugins/","text":"Link to the uuv_simulator repository here Description \u00b6 UUV Simulator's Gazebo plugins for simulation of hydrodynamic and hydrostatic forces, and underwater actuators (e.g. thrusters and fins).","title":"uuv_gazebo_plugins"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_plugins/#description","text":"UUV Simulator's Gazebo plugins for simulation of hydrodynamic and hydrostatic forces, and underwater actuators (e.g. thrusters and fins).","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_ros_plugins/","text":"Link to the uuv_simulator repository here Description \u00b6 UUV Simulator's extended ROS plugins for generation of the necessary ROS services and topics during the simulation.","title":"uuv_gazebo_ros_plugins"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_ros_plugins/#description","text":"UUV Simulator's extended ROS plugins for generation of the necessary ROS services and topics during the simulation.","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_ros_plugins_msgs/","text":"Link to the uuv_simulator repository here Description \u00b6 The uuv_gazebo_ros_plugins_msgs package ROS Services \u00b6 GetFloat \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- float64 data GetThrusterEfficiency \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- float64 efficiency SetThrusterState \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. bool on --- bool success SetThrusterEfficiency \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 efficiency --- bool success GetModelProperties \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- string[] link_names uuv_gazebo_ros_plugins_msgs/UnderwaterObjectModel[] models GetThrusterConversionFcn \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- uuv_gazebo_ros_plugins_msgs/ThrusterConversionFcn fcn GetListParam \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- string description string[] tags float64[] data SetUseGlobalCurrentVel \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. bool use_global --- bool success GetThrusterState \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- bool is_on SetFloat \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 data --- bool success string message","title":"uuv_gazebo_ros_plugins_msgs"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_ros_plugins_msgs/#description","text":"The uuv_gazebo_ros_plugins_msgs package","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_ros_plugins_msgs/#ros-services","text":"","title":"ROS Services"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_ros_plugins_msgs/#getfloat","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- float64 data","title":"GetFloat"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_ros_plugins_msgs/#getthrusterefficiency","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- float64 efficiency","title":"GetThrusterEfficiency"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_ros_plugins_msgs/#setthrusterstate","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. bool on --- bool success","title":"SetThrusterState"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_ros_plugins_msgs/#setthrusterefficiency","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 efficiency --- bool success","title":"SetThrusterEfficiency"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_ros_plugins_msgs/#getmodelproperties","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- string[] link_names uuv_gazebo_ros_plugins_msgs/UnderwaterObjectModel[] models","title":"GetModelProperties"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_ros_plugins_msgs/#getthrusterconversionfcn","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- uuv_gazebo_ros_plugins_msgs/ThrusterConversionFcn fcn","title":"GetThrusterConversionFcn"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_ros_plugins_msgs/#getlistparam","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- string description string[] tags float64[] data","title":"GetListParam"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_ros_plugins_msgs/#setuseglobalcurrentvel","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. bool use_global --- bool success","title":"SetUseGlobalCurrentVel"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_ros_plugins_msgs/#getthrusterstate","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- bool is_on","title":"GetThrusterState"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_ros_plugins_msgs/#setfloat","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 data --- bool success string message","title":"SetFloat"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_worlds/","text":"Link to the uuv_simulator repository here Description \u00b6 The uuv_gazebo_worlds package Launch files \u00b6 lake.launch \u00b6 Arguments gui ( default: true ) paused ( default: false ) set_timeout ( default: false ) timeout ( default: 0.0 ) subsea_bop_panel.launch \u00b6 Arguments paused ( default: false ) gui ( default: true ) munkholmen.launch \u00b6 Arguments paused ( default: false ) gui ( default: true ) rov_bop_panel.launch \u00b6 Arguments x ( default: -1 ) y ( default: -1 ) z ( default: -4 ) angle ( default: 0 ) mangalia_manipulation.launch \u00b6 Arguments paused ( default: false ) gui ( default: true ) herkules_ship_wreck.launch \u00b6 Arguments paused ( default: false ) gui ( default: true ) ocean_waves.launch \u00b6 Arguments gui ( default: true ) paused ( default: false ) set_timeout ( default: false ) timeout ( default: 0.0 ) auv_underwater_world.launch \u00b6 Description Underwater environment with the ODE physics engine configured for vehicles using the fin plugin Arguments gui ( default: true ) paused ( default: false ) set_timeout ( default: false ) timeout ( default: 0.0 ) mangalia.launch \u00b6 Arguments paused ( default: false ) gui ( default: true ) empty_underwater_world.launch \u00b6 Arguments gui ( default: true ) paused ( default: false ) set_timeout ( default: false ) timeout ( default: 0.0 )","title":"uuv_gazebo_worlds"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_worlds/#description","text":"The uuv_gazebo_worlds package","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_worlds/#launch-files","text":"","title":"Launch files"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_worlds/#lakelaunch","text":"Arguments gui ( default: true ) paused ( default: false ) set_timeout ( default: false ) timeout ( default: 0.0 )","title":"lake.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_worlds/#subsea_bop_panellaunch","text":"Arguments paused ( default: false ) gui ( default: true )","title":"subsea_bop_panel.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_worlds/#munkholmenlaunch","text":"Arguments paused ( default: false ) gui ( default: true )","title":"munkholmen.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_worlds/#rov_bop_panellaunch","text":"Arguments x ( default: -1 ) y ( default: -1 ) z ( default: -4 ) angle ( default: 0 )","title":"rov_bop_panel.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_worlds/#mangalia_manipulationlaunch","text":"Arguments paused ( default: false ) gui ( default: true )","title":"mangalia_manipulation.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_worlds/#herkules_ship_wrecklaunch","text":"Arguments paused ( default: false ) gui ( default: true )","title":"herkules_ship_wreck.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_worlds/#ocean_waveslaunch","text":"Arguments gui ( default: true ) paused ( default: false ) set_timeout ( default: false ) timeout ( default: 0.0 )","title":"ocean_waves.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_worlds/#auv_underwater_worldlaunch","text":"Description Underwater environment with the ODE physics engine configured for vehicles using the fin plugin Arguments gui ( default: true ) paused ( default: false ) set_timeout ( default: false ) timeout ( default: 0.0 )","title":"auv_underwater_world.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_worlds/#mangalialaunch","text":"Arguments paused ( default: false ) gui ( default: true )","title":"mangalia.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_gazebo_worlds/#empty_underwater_worldlaunch","text":"Arguments gui ( default: true ) paused ( default: false ) set_timeout ( default: false ) timeout ( default: 0.0 )","title":"empty_underwater_world.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_sensor_ros_plugins/","text":"Link to the uuv_simulator repository here Description \u00b6 The uuv_sensor_ros_plugins package","title":"uuv_sensor_ros_plugins"},{"location":"packages/uuv_simulator/docs/packages/uuv_sensor_ros_plugins/#description","text":"The uuv_sensor_ros_plugins package","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_sensor_ros_plugins_msgs/","text":"Link to the uuv_simulator repository here Description \u00b6 The uuv_sensor_ros_plugins_msgs package ROS Services \u00b6 ChangeSensorState \u00b6 bool on --- bool success string message","title":"uuv_sensor_ros_plugins_msgs"},{"location":"packages/uuv_simulator/docs/packages/uuv_sensor_ros_plugins_msgs/#description","text":"The uuv_sensor_ros_plugins_msgs package","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_sensor_ros_plugins_msgs/#ros-services","text":"","title":"ROS Services"},{"location":"packages/uuv_simulator/docs/packages/uuv_sensor_ros_plugins_msgs/#changesensorstate","text":"bool on --- bool success string message","title":"ChangeSensorState"},{"location":"packages/uuv_simulator/docs/packages/uuv_teleop/","text":"Link to the uuv_simulator repository here Description \u00b6 ROS nodes to generate command topics for vehicles and manipulators using a joystick input Launch files \u00b6 uuv_teleop.launch \u00b6 Arguments uuv_name joy_id ( default: 0 ) deadman_button ( default: -1 ) exclusion_buttons ( default: 4,5 ) axis_roll ( default: -1 ) axis_pitch ( default: -1 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) gain_roll ( default: 0.0 ) gain_pitch ( default: 0.0 ) gain_yaw ( default: 0.2 ) gain_x ( default: 0.3 ) gain_y ( default: 0.3 ) gain_z ( default: 0.3 ) output_topic ( default: cmd_vel ) message_type ( default: twist ) finned_uuv_teleop.launch \u00b6 Arguments uuv_name joy_id ( default: 0 ) use_param_file ( default: 0 ) filename ( default: . ) axis_thruster ( default: 1 ) axis_roll ( default: 0 ) axis_pitch ( default: 4 ) axis_yaw ( default: 3 ) thruster_rotor_gain ( default: 0.0009 ) max_thrust ( default: 200 ) thruster_topic ( default: thrusters/0/input ) fin_topic_prefix ( default: fins/ ) fin_topic_suffix ( default: /input ) thruster_joy_gain ( default: 1.0 ) n_fins ( default: 4 ) gain_roll ( default: 1,1,1,1 ) gain_pitch ( default: 1,1,-1,-1 ) gain_yaw ( default: -1,1,1,-1 ) Scripts \u00b6 finned_uuv_teleop.py \u00b6 Script type: python vehicle_teleop.py \u00b6 Script type: python","title":"uuv_teleop"},{"location":"packages/uuv_simulator/docs/packages/uuv_teleop/#description","text":"ROS nodes to generate command topics for vehicles and manipulators using a joystick input","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_teleop/#launch-files","text":"","title":"Launch files"},{"location":"packages/uuv_simulator/docs/packages/uuv_teleop/#uuv_teleoplaunch","text":"Arguments uuv_name joy_id ( default: 0 ) deadman_button ( default: -1 ) exclusion_buttons ( default: 4,5 ) axis_roll ( default: -1 ) axis_pitch ( default: -1 ) axis_yaw ( default: 0 ) axis_x ( default: 4 ) axis_y ( default: 3 ) axis_z ( default: 1 ) gain_roll ( default: 0.0 ) gain_pitch ( default: 0.0 ) gain_yaw ( default: 0.2 ) gain_x ( default: 0.3 ) gain_y ( default: 0.3 ) gain_z ( default: 0.3 ) output_topic ( default: cmd_vel ) message_type ( default: twist )","title":"uuv_teleop.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_teleop/#finned_uuv_teleoplaunch","text":"Arguments uuv_name joy_id ( default: 0 ) use_param_file ( default: 0 ) filename ( default: . ) axis_thruster ( default: 1 ) axis_roll ( default: 0 ) axis_pitch ( default: 4 ) axis_yaw ( default: 3 ) thruster_rotor_gain ( default: 0.0009 ) max_thrust ( default: 200 ) thruster_topic ( default: thrusters/0/input ) fin_topic_prefix ( default: fins/ ) fin_topic_suffix ( default: /input ) thruster_joy_gain ( default: 1.0 ) n_fins ( default: 4 ) gain_roll ( default: 1,1,1,1 ) gain_pitch ( default: 1,1,-1,-1 ) gain_yaw ( default: -1,1,1,-1 )","title":"finned_uuv_teleop.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_teleop/#scripts","text":"","title":"Scripts"},{"location":"packages/uuv_simulator/docs/packages/uuv_teleop/#finned_uuv_teleoppy","text":"Script type: python","title":"finned_uuv_teleop.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_teleop/#vehicle_teleoppy","text":"Script type: python","title":"vehicle_teleop.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_thruster_manager/","text":"Link to the uuv_simulator repository here Description \u00b6 The thruster manager package Launch files \u00b6 thruster_manager.launch \u00b6 Arguments model_name uuv_name ( default: $(arg model_name) ) base_link ( default: base_link ) timeout ( default: -1 ) reset_tam ( default: false ) output_dir ( default: $(find uuv_thruster_manager)/config/$(arg model_name) ) config_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml ) tam_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml ) ROS Services \u00b6 GetThrusterManagerConfig \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- string tf_prefix string base_link string thruster_frame_base string thruster_topic_prefix string thruster_topic_suffix float64 timeout float64 max_thrust int32 n_thrusters float64[] allocation_matrix SetThrusterManagerConfig \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # Definitions string DEFAULT_BASE_LINK = /base_link string DEFAULT_THRUSTER_FRAME_BASE = /thruster_ string DEFAULT_PREFIX = thrusters/ string DEFAULT_SUFFIX = /input # Service definition string base_link string thruster_frame_base string thruster_topic_prefix string thruster_topic_suffix float64 timeout float64 max_thrust --- bool success ThrusterManagerInfo \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- int32 n_thrusters float64[] allocation_matrix string reference_frame GetThrusterCurve \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 min float64 max int32 n_points --- float64[] input float64[] thrust Scripts \u00b6 thruster_allocator.py \u00b6 Script type: python","title":"uuv_thruster_manager"},{"location":"packages/uuv_simulator/docs/packages/uuv_thruster_manager/#description","text":"The thruster manager package","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_thruster_manager/#launch-files","text":"","title":"Launch files"},{"location":"packages/uuv_simulator/docs/packages/uuv_thruster_manager/#thruster_managerlaunch","text":"Arguments model_name uuv_name ( default: $(arg model_name) ) base_link ( default: base_link ) timeout ( default: -1 ) reset_tam ( default: false ) output_dir ( default: $(find uuv_thruster_manager)/config/$(arg model_name) ) config_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml ) tam_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml )","title":"thruster_manager.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_thruster_manager/#ros-services","text":"","title":"ROS Services"},{"location":"packages/uuv_simulator/docs/packages/uuv_thruster_manager/#getthrustermanagerconfig","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- string tf_prefix string base_link string thruster_frame_base string thruster_topic_prefix string thruster_topic_suffix float64 timeout float64 max_thrust int32 n_thrusters float64[] allocation_matrix","title":"GetThrusterManagerConfig"},{"location":"packages/uuv_simulator/docs/packages/uuv_thruster_manager/#setthrustermanagerconfig","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # Definitions string DEFAULT_BASE_LINK = /base_link string DEFAULT_THRUSTER_FRAME_BASE = /thruster_ string DEFAULT_PREFIX = thrusters/ string DEFAULT_SUFFIX = /input # Service definition string base_link string thruster_frame_base string thruster_topic_prefix string thruster_topic_suffix float64 timeout float64 max_thrust --- bool success","title":"SetThrusterManagerConfig"},{"location":"packages/uuv_simulator/docs/packages/uuv_thruster_manager/#thrustermanagerinfo","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- int32 n_thrusters float64[] allocation_matrix string reference_frame","title":"ThrusterManagerInfo"},{"location":"packages/uuv_simulator/docs/packages/uuv_thruster_manager/#getthrustercurve","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 min float64 max int32 n_points --- float64[] input float64[] thrust","title":"GetThrusterCurve"},{"location":"packages/uuv_simulator/docs/packages/uuv_thruster_manager/#scripts","text":"","title":"Scripts"},{"location":"packages/uuv_simulator/docs/packages/uuv_thruster_manager/#thruster_allocatorpy","text":"Script type: python","title":"thruster_allocator.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/","text":"Link to the uuv_simulator repository here Description \u00b6 The uuv_trajectory_control package Launch files \u00b6 rov_pid_controller.launch \u00b6 Arguments uuv_name model_name ( default: $(arg uuv_name) ) saturation ( default: 1200 ) gui_on ( default: true ) use_params_file ( default: false ) use_ned_frame ( default: false ) Kp ( default: 11993.888,11993.888,11993.888,19460.069,19460.069,19460.069 ) Kd ( default: 9077.459,9077.459,9077.459,18880.925,18880.925,18880.925 ) Ki ( default: 321.417,321.417,321.417,2096.951,2096.951,2096.951 ) controller_config_file ( default: $(find uuv_trajectory_control)/config/controllers/pid/$(arg model_name)/params.yaml ) thruster_manager_output_dir ( default: $(find uuv_thruster_manager)/config/$(arg model_name) ) thruster_manager_config_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml ) tam_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml ) rov_mb_sm_controller.launch \u00b6 Arguments uuv_name model_name ( default: $(arg uuv_name) ) saturation ( default: 1200 ) gui_on ( default: true ) use_params_file ( default: false ) use_ned_frame ( default: false ) lambda ( default: 10,10,10,10,10,10 ) rho_constant ( default: 10000,10000,10000,10000,10000,10000 ) k ( default: 500,500,500,500,500,500 ) c ( default: 50,50,50,1,1,1 ) adapt_slope ( default: 100,10,10 ) rho_0 ( default: 3000,3000,8000,1500,1500,8000 ) drift_prevent ( default: 0.03 ) controller_config_file ( default: $(find uuv_trajectory_control)/config/controllers/mb_sm/$(arg model_name)/params.yaml ) model_params_file ( default: $(find uuv_trajectory_control)/config/models/$(arg model_name)/params.yaml ) thruster_manager_output_dir ( default: $(find uuv_thruster_manager)/config/$(arg model_name) ) thruster_manager_config_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml ) tam_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml ) auv_geometric_tracking_controller.launch \u00b6 Arguments uuv_name use_params_file ( default: false ) gui_on ( default: true ) use_ned_frame ( default: false ) max_forward_speed ( default: 2 ) dubins_radius ( default: 10 ) dubins_max_pitch ( default: 0.09 ) min_thrust ( default: 70 ) max_thrust ( default: 200 ) thruster_topic ( default: thrusters/0/input ) thrust_p_gain ( default: 1 ) thrust_d_gain ( default: 1 ) gain_roll ( default: 1 ) gain_pitch ( default: 1 ) gain_yaw ( default: 1 ) n_fins ( default: 4 ) map_roll ( default: 0,0,0,0 ) map_pitch ( default: 0,0,0,0 ) map_yaw ( default: 0,0,0,0 ) max_fin_angle ( default: 0.0 ) fin_topic_prefix ( default: fins ) fin_topic_suffix ( default: input ) idle_radius ( default: 10.0 ) look_ahead_delay ( default: 5.0 ) desired_pitch_limit ( default: 0.26 ) yaw_error_limit ( default: 1.0 ) thruster_topic_prefix ( default: thrusters ) thruster_topic_suffix ( default: input ) thruster_frame_base ( default: thruster_ ) thruster_conversion_fcn ( default: proportional ) thruster_gain ( default: 0.0 ) thruster_input ( default: 0,1,2,3 ) thruster_output ( default: 0,1,2,3 ) rov_mb_fl_controller.launch \u00b6 Arguments uuv_name model_name ( default: $(arg uuv_name) ) saturation ( default: 1200 ) gui_on ( default: true ) use_params_file ( default: false ) use_ned_frame ( default: false ) Kp ( default: 19987.218,19987.218,19987.218,19460.293,19460.293,19460.293 ) Kd ( default: 11458.051,11458.051,11458.051,17068.778,17068.778,17068.778 ) Ki ( default: 1689.976,1689.976,1689.976,186.198,186.198,186.198 ) controller_config_file ( default: $(find uuv_trajectory_control)/config/controllers/pid/$(arg model_name)/params.yaml ) model_params_file ( default: $(find uuv_trajectory_control)/config/models/$(arg model_name)/params.yaml ) thruster_manager_output_dir ( default: $(find uuv_thruster_manager)/config/$(arg model_name) ) thruster_manager_config_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml ) tam_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml ) rov_nmb_sm_controller.launch \u00b6 Arguments uuv_name model_name ( default: $(arg uuv_name) ) saturation ( default: 1200 ) gui_on ( default: true ) use_params_file ( default: false ) use_ned_frame ( default: false ) max_forward_speed ( default: 0.5 ) K ( default: 5,5,5,5,5,5 ) Kd ( default: 4118.98,4118.98,4118.98,8000.0,8000.0,8000.0 ) Ki ( default: 0.06144,0.06144,0.06144,0.078,0.078,0.078 ) slope ( default: 0.182,0.182,0.182,3.348,3.348,3.348 ) controller_config_file ( default: $(find uuv_trajectory_control)/config/controllers/nmb_sm/$(arg model_name)/params.yaml ) thruster_manager_output_dir ( default: $(find uuv_thruster_manager)/config/$(arg model_name) ) thruster_manager_config_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml ) tam_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml ) rov_nl_pid_controller.launch \u00b6 Arguments uuv_name model_name saturation ( default: 6000 ) gui_on ( default: true ) use_params_file ( default: false ) use_ned_frame ( default: false ) Kp ( default: 6017.059667616178,6017.059667616178,6017.059667616178,9731.391095849109,9731.391095849109,9731.391095849109 ) Kd ( default: 2682.9509286089447,2682.9509286089447,2682.9509286089447,9440.462338720527,9440.462338720527,9440.462338720527 ) Ki ( default: 0,0,0,0,0,0 ) Hm ( default: 1657.655912647713,1657.655912647713,1657.655912647713,4193.901741127024,4193.901741127024,4193.901741127024 ) controller_config_file ( default: $(find uuv_trajectory_control)/config/controllers/nl_pid/$(arg model_name)/params.yaml ) model_params_file ( default: $(find uuv_trajectory_control)/config/models/$(arg model_name)/params.yaml ) thruster_manager_output_dir ( default: $(find uuv_thruster_manager)/config/$(arg model_name) ) thruster_manager_config_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml ) tam_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml ) rov_sf_controller.launch \u00b6 Arguments uuv_name model_name ( default: $(arg uuv_name) ) saturation ( default: 5000 ) gui_on ( default: true ) use_params_file ( default: false ) use_ned_frame ( default: false ) Kd ( default: 100.0,100.0,100.0,100.0,100.0,100.0 ) lambda ( default: 1.0 ) c ( default: 1.0 ) controller_config_file ( default: $(find uuv_trajectory_control)/config/controllers/pid/$(arg model_name)/params.yaml ) model_params_file ( default: $(find uuv_trajectory_control)/config/models/$(arg model_name)/params.yaml ) thruster_manager_output_dir ( default: $(find uuv_thruster_manager)/config/$(arg model_name) ) thruster_manager_config_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml ) tam_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml ) rov_pd_grav_compensation_controller.launch \u00b6 Arguments uuv_name model_name ( default: $(arg uuv_name) ) saturation ( default: 1200 ) gui_on ( default: true ) use_params_file ( default: false ) use_ned_frame ( default: false ) Kp ( default: 11993.888,11993.888,11993.888,19460.069,19460.069,19460.069 ) Kd ( default: 9077.459,9077.459,9077.459,18880.925,18880.925,18880.925 ) controller_config_file ( default: $(find uuv_trajectory_control)/config/controllers/pid/$(arg model_name)/params.yaml ) model_params_file ( default: $(find uuv_trajectory_control)/config/models/$(arg model_name)/params.yaml ) thruster_manager_output_dir ( default: $(find uuv_thruster_manager)/config/$(arg model_name) ) thruster_manager_config_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml ) tam_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml ) rov_ua_pid_controller.launch \u00b6 Arguments uuv_name model_name ( default: $(arg uuv_name) ) saturation ( default: 1200 ) use_params_file ( default: false ) gui_on ( default: true ) Kp ( default: 10.0,10.0,10.0,10.0 ) Kd ( default: 1.0,1.0,1.0,1.0 ) Ki ( default: 0.5,0.5,0.5,0.5 ) controller_config_file ( default: $(find uuv_trajectory_control)/config/controllers/ua_pid/$(arg model_name)/params.yaml ) thruster_manager_output_dir ( default: $(find uuv_thruster_manager)/config/$(arg model_name) ) thruster_manager_config_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml ) tam_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml ) Scripts \u00b6 rov_mb_fl_controller.py \u00b6 Script type: python rov_pd_grav_compensation_controller.py \u00b6 Script type: python rov_mb_sm_controller.py \u00b6 Script type: python rov_sf_controller.py \u00b6 Script type: python rov_nmb_sm_controller.py \u00b6 Script type: python rov_ua_pid_controller.py \u00b6 Script type: python rov_pid_controller.py \u00b6 Script type: python rov_nl_pid_controller.py \u00b6 Script type: python auv_geometric_tracking_controller.py \u00b6 Script type: python demo_wp_trajectory_generator.py \u00b6 Script type: python","title":"uuv_trajectory_control"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#description","text":"The uuv_trajectory_control package","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#launch-files","text":"","title":"Launch files"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#rov_pid_controllerlaunch","text":"Arguments uuv_name model_name ( default: $(arg uuv_name) ) saturation ( default: 1200 ) gui_on ( default: true ) use_params_file ( default: false ) use_ned_frame ( default: false ) Kp ( default: 11993.888,11993.888,11993.888,19460.069,19460.069,19460.069 ) Kd ( default: 9077.459,9077.459,9077.459,18880.925,18880.925,18880.925 ) Ki ( default: 321.417,321.417,321.417,2096.951,2096.951,2096.951 ) controller_config_file ( default: $(find uuv_trajectory_control)/config/controllers/pid/$(arg model_name)/params.yaml ) thruster_manager_output_dir ( default: $(find uuv_thruster_manager)/config/$(arg model_name) ) thruster_manager_config_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml ) tam_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml )","title":"rov_pid_controller.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#rov_mb_sm_controllerlaunch","text":"Arguments uuv_name model_name ( default: $(arg uuv_name) ) saturation ( default: 1200 ) gui_on ( default: true ) use_params_file ( default: false ) use_ned_frame ( default: false ) lambda ( default: 10,10,10,10,10,10 ) rho_constant ( default: 10000,10000,10000,10000,10000,10000 ) k ( default: 500,500,500,500,500,500 ) c ( default: 50,50,50,1,1,1 ) adapt_slope ( default: 100,10,10 ) rho_0 ( default: 3000,3000,8000,1500,1500,8000 ) drift_prevent ( default: 0.03 ) controller_config_file ( default: $(find uuv_trajectory_control)/config/controllers/mb_sm/$(arg model_name)/params.yaml ) model_params_file ( default: $(find uuv_trajectory_control)/config/models/$(arg model_name)/params.yaml ) thruster_manager_output_dir ( default: $(find uuv_thruster_manager)/config/$(arg model_name) ) thruster_manager_config_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml ) tam_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml )","title":"rov_mb_sm_controller.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#auv_geometric_tracking_controllerlaunch","text":"Arguments uuv_name use_params_file ( default: false ) gui_on ( default: true ) use_ned_frame ( default: false ) max_forward_speed ( default: 2 ) dubins_radius ( default: 10 ) dubins_max_pitch ( default: 0.09 ) min_thrust ( default: 70 ) max_thrust ( default: 200 ) thruster_topic ( default: thrusters/0/input ) thrust_p_gain ( default: 1 ) thrust_d_gain ( default: 1 ) gain_roll ( default: 1 ) gain_pitch ( default: 1 ) gain_yaw ( default: 1 ) n_fins ( default: 4 ) map_roll ( default: 0,0,0,0 ) map_pitch ( default: 0,0,0,0 ) map_yaw ( default: 0,0,0,0 ) max_fin_angle ( default: 0.0 ) fin_topic_prefix ( default: fins ) fin_topic_suffix ( default: input ) idle_radius ( default: 10.0 ) look_ahead_delay ( default: 5.0 ) desired_pitch_limit ( default: 0.26 ) yaw_error_limit ( default: 1.0 ) thruster_topic_prefix ( default: thrusters ) thruster_topic_suffix ( default: input ) thruster_frame_base ( default: thruster_ ) thruster_conversion_fcn ( default: proportional ) thruster_gain ( default: 0.0 ) thruster_input ( default: 0,1,2,3 ) thruster_output ( default: 0,1,2,3 )","title":"auv_geometric_tracking_controller.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#rov_mb_fl_controllerlaunch","text":"Arguments uuv_name model_name ( default: $(arg uuv_name) ) saturation ( default: 1200 ) gui_on ( default: true ) use_params_file ( default: false ) use_ned_frame ( default: false ) Kp ( default: 19987.218,19987.218,19987.218,19460.293,19460.293,19460.293 ) Kd ( default: 11458.051,11458.051,11458.051,17068.778,17068.778,17068.778 ) Ki ( default: 1689.976,1689.976,1689.976,186.198,186.198,186.198 ) controller_config_file ( default: $(find uuv_trajectory_control)/config/controllers/pid/$(arg model_name)/params.yaml ) model_params_file ( default: $(find uuv_trajectory_control)/config/models/$(arg model_name)/params.yaml ) thruster_manager_output_dir ( default: $(find uuv_thruster_manager)/config/$(arg model_name) ) thruster_manager_config_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml ) tam_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml )","title":"rov_mb_fl_controller.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#rov_nmb_sm_controllerlaunch","text":"Arguments uuv_name model_name ( default: $(arg uuv_name) ) saturation ( default: 1200 ) gui_on ( default: true ) use_params_file ( default: false ) use_ned_frame ( default: false ) max_forward_speed ( default: 0.5 ) K ( default: 5,5,5,5,5,5 ) Kd ( default: 4118.98,4118.98,4118.98,8000.0,8000.0,8000.0 ) Ki ( default: 0.06144,0.06144,0.06144,0.078,0.078,0.078 ) slope ( default: 0.182,0.182,0.182,3.348,3.348,3.348 ) controller_config_file ( default: $(find uuv_trajectory_control)/config/controllers/nmb_sm/$(arg model_name)/params.yaml ) thruster_manager_output_dir ( default: $(find uuv_thruster_manager)/config/$(arg model_name) ) thruster_manager_config_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml ) tam_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml )","title":"rov_nmb_sm_controller.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#rov_nl_pid_controllerlaunch","text":"Arguments uuv_name model_name saturation ( default: 6000 ) gui_on ( default: true ) use_params_file ( default: false ) use_ned_frame ( default: false ) Kp ( default: 6017.059667616178,6017.059667616178,6017.059667616178,9731.391095849109,9731.391095849109,9731.391095849109 ) Kd ( default: 2682.9509286089447,2682.9509286089447,2682.9509286089447,9440.462338720527,9440.462338720527,9440.462338720527 ) Ki ( default: 0,0,0,0,0,0 ) Hm ( default: 1657.655912647713,1657.655912647713,1657.655912647713,4193.901741127024,4193.901741127024,4193.901741127024 ) controller_config_file ( default: $(find uuv_trajectory_control)/config/controllers/nl_pid/$(arg model_name)/params.yaml ) model_params_file ( default: $(find uuv_trajectory_control)/config/models/$(arg model_name)/params.yaml ) thruster_manager_output_dir ( default: $(find uuv_thruster_manager)/config/$(arg model_name) ) thruster_manager_config_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml ) tam_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml )","title":"rov_nl_pid_controller.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#rov_sf_controllerlaunch","text":"Arguments uuv_name model_name ( default: $(arg uuv_name) ) saturation ( default: 5000 ) gui_on ( default: true ) use_params_file ( default: false ) use_ned_frame ( default: false ) Kd ( default: 100.0,100.0,100.0,100.0,100.0,100.0 ) lambda ( default: 1.0 ) c ( default: 1.0 ) controller_config_file ( default: $(find uuv_trajectory_control)/config/controllers/pid/$(arg model_name)/params.yaml ) model_params_file ( default: $(find uuv_trajectory_control)/config/models/$(arg model_name)/params.yaml ) thruster_manager_output_dir ( default: $(find uuv_thruster_manager)/config/$(arg model_name) ) thruster_manager_config_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml ) tam_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml )","title":"rov_sf_controller.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#rov_pd_grav_compensation_controllerlaunch","text":"Arguments uuv_name model_name ( default: $(arg uuv_name) ) saturation ( default: 1200 ) gui_on ( default: true ) use_params_file ( default: false ) use_ned_frame ( default: false ) Kp ( default: 11993.888,11993.888,11993.888,19460.069,19460.069,19460.069 ) Kd ( default: 9077.459,9077.459,9077.459,18880.925,18880.925,18880.925 ) controller_config_file ( default: $(find uuv_trajectory_control)/config/controllers/pid/$(arg model_name)/params.yaml ) model_params_file ( default: $(find uuv_trajectory_control)/config/models/$(arg model_name)/params.yaml ) thruster_manager_output_dir ( default: $(find uuv_thruster_manager)/config/$(arg model_name) ) thruster_manager_config_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml ) tam_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml )","title":"rov_pd_grav_compensation_controller.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#rov_ua_pid_controllerlaunch","text":"Arguments uuv_name model_name ( default: $(arg uuv_name) ) saturation ( default: 1200 ) use_params_file ( default: false ) gui_on ( default: true ) Kp ( default: 10.0,10.0,10.0,10.0 ) Kd ( default: 1.0,1.0,1.0,1.0 ) Ki ( default: 0.5,0.5,0.5,0.5 ) controller_config_file ( default: $(find uuv_trajectory_control)/config/controllers/ua_pid/$(arg model_name)/params.yaml ) thruster_manager_output_dir ( default: $(find uuv_thruster_manager)/config/$(arg model_name) ) thruster_manager_config_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml ) tam_file ( default: $(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml )","title":"rov_ua_pid_controller.launch"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#scripts","text":"","title":"Scripts"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#rov_mb_fl_controllerpy","text":"Script type: python","title":"rov_mb_fl_controller.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#rov_pd_grav_compensation_controllerpy","text":"Script type: python","title":"rov_pd_grav_compensation_controller.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#rov_mb_sm_controllerpy","text":"Script type: python","title":"rov_mb_sm_controller.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#rov_sf_controllerpy","text":"Script type: python","title":"rov_sf_controller.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#rov_nmb_sm_controllerpy","text":"Script type: python","title":"rov_nmb_sm_controller.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#rov_ua_pid_controllerpy","text":"Script type: python","title":"rov_ua_pid_controller.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#rov_pid_controllerpy","text":"Script type: python","title":"rov_pid_controller.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#rov_nl_pid_controllerpy","text":"Script type: python","title":"rov_nl_pid_controller.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#auv_geometric_tracking_controllerpy","text":"Script type: python","title":"auv_geometric_tracking_controller.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_trajectory_control/#demo_wp_trajectory_generatorpy","text":"Script type: python","title":"demo_wp_trajectory_generator.py"},{"location":"packages/uuv_simulator/docs/packages/uuv_world_plugins/","text":"Link to the uuv_simulator repository here Description \u00b6 The uuv_world_plugins package","title":"uuv_world_plugins"},{"location":"packages/uuv_simulator/docs/packages/uuv_world_plugins/#description","text":"The uuv_world_plugins package","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_world_ros_plugins/","text":"Link to the uuv_simulator repository here Description \u00b6 The uuv_world_ros_plugins package","title":"uuv_world_ros_plugins"},{"location":"packages/uuv_simulator/docs/packages/uuv_world_ros_plugins/#description","text":"The uuv_world_ros_plugins package","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_world_ros_plugins_msgs/","text":"Link to the uuv_simulator repository here Description \u00b6 The uuv_world_ros_plugins_msgs package ROS Services \u00b6 SetCurrentDirection \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 angle --- bool success SetCurrentVelocity \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 velocity float64 horizontal_angle float64 vertical_angle --- bool success SetOriginSphericalCoord \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # Latitude [degrees]. Positive is north of equator; negative is south. float64 latitude_deg # Longitude [degrees]. Positive is east of prime meridian; negative is west. float64 longitude_deg # Altitude [m]. Positive is above the WGS 84 ellipsoid float64 altitude --- bool success TransformFromSphericalCoord \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # Latitude [degrees]. Positive is north of equator; negative is south. float64 latitude_deg # Longitude [degrees]. Positive is east of prime meridian; negative is west. float64 longitude_deg # Altitude [m]. Positive is above the WGS 84 ellipsoid float64 altitude --- geometry_msgs/Vector3 output GetCurrentModel \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- float64 mean float64 min float64 max float64 noise float64 mu GetOriginSphericalCoord \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- # Latitude [degrees]. Positive is north of equator; negative is south. float64 latitude_deg # Longitude [degrees]. Positive is east of prime meridian; negative is west. float64 longitude_deg # Altitude [m]. Positive is above the WGS 84 ellipsoid float64 altitude SetCurrentModel \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 mean float64 min float64 max float64 noise float64 mu --- bool success TransformToSphericalCoord \u00b6 # Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. geometry_msgs/Vector3 input --- # Latitude [degrees]. Positive is north of equator; negative is south. float64 latitude_deg # Longitude [degrees]. Positive is east of prime meridian; negative is west. float64 longitude_deg # Altitude [m]. Positive is above the WGS 84 ellipsoid float64 altitude","title":"uuv_world_ros_plugins_msgs"},{"location":"packages/uuv_simulator/docs/packages/uuv_world_ros_plugins_msgs/#description","text":"The uuv_world_ros_plugins_msgs package","title":"Description"},{"location":"packages/uuv_simulator/docs/packages/uuv_world_ros_plugins_msgs/#ros-services","text":"","title":"ROS Services"},{"location":"packages/uuv_simulator/docs/packages/uuv_world_ros_plugins_msgs/#setcurrentdirection","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 angle --- bool success","title":"SetCurrentDirection"},{"location":"packages/uuv_simulator/docs/packages/uuv_world_ros_plugins_msgs/#setcurrentvelocity","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 velocity float64 horizontal_angle float64 vertical_angle --- bool success","title":"SetCurrentVelocity"},{"location":"packages/uuv_simulator/docs/packages/uuv_world_ros_plugins_msgs/#setoriginsphericalcoord","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # Latitude [degrees]. Positive is north of equator; negative is south. float64 latitude_deg # Longitude [degrees]. Positive is east of prime meridian; negative is west. float64 longitude_deg # Altitude [m]. Positive is above the WGS 84 ellipsoid float64 altitude --- bool success","title":"SetOriginSphericalCoord"},{"location":"packages/uuv_simulator/docs/packages/uuv_world_ros_plugins_msgs/#transformfromsphericalcoord","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # Latitude [degrees]. Positive is north of equator; negative is south. float64 latitude_deg # Longitude [degrees]. Positive is east of prime meridian; negative is west. float64 longitude_deg # Altitude [m]. Positive is above the WGS 84 ellipsoid float64 altitude --- geometry_msgs/Vector3 output","title":"TransformFromSphericalCoord"},{"location":"packages/uuv_simulator/docs/packages/uuv_world_ros_plugins_msgs/#getcurrentmodel","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- float64 mean float64 min float64 max float64 noise float64 mu","title":"GetCurrentModel"},{"location":"packages/uuv_simulator/docs/packages/uuv_world_ros_plugins_msgs/#getoriginsphericalcoord","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. --- # Latitude [degrees]. Positive is north of equator; negative is south. float64 latitude_deg # Longitude [degrees]. Positive is east of prime meridian; negative is west. float64 longitude_deg # Altitude [m]. Positive is above the WGS 84 ellipsoid float64 altitude","title":"GetOriginSphericalCoord"},{"location":"packages/uuv_simulator/docs/packages/uuv_world_ros_plugins_msgs/#setcurrentmodel","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. float64 mean float64 min float64 max float64 noise float64 mu --- bool success","title":"SetCurrentModel"},{"location":"packages/uuv_simulator/docs/packages/uuv_world_ros_plugins_msgs/#transformtosphericalcoord","text":"# Copyright (c) 2016 The UUV Simulator Authors. # All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. geometry_msgs/Vector3 input --- # Latitude [degrees]. Positive is north of equator; negative is south. float64 latitude_deg # Longitude [degrees]. Positive is east of prime meridian; negative is west. float64 longitude_deg # Altitude [m]. Positive is above the WGS 84 ellipsoid float64 altitude","title":"TransformToSphericalCoord"},{"location":"packages/uuv_simulator/docs/python_api/PID/","text":"PID \u00b6 PIDRegulator \u00b6 PIDRegulator ( self , p , i , d , sat ) A very basic 1D PID Regulator.","title":"PID"},{"location":"packages/uuv_simulator/docs/python_api/PID/#pid","text":"","title":"PID"},{"location":"packages/uuv_simulator/docs/python_api/PID/#pidregulator","text":"PIDRegulator ( self , p , i , d , sat ) A very basic 1D PID Regulator.","title":"PIDRegulator"},{"location":"packages/uuv_simulator/docs/python_api/uuv_auv_actuator_interface/","text":"uuv_auv_actuator_interface \u00b6 uuv_auv_actuator_interface.actuator_manager \u00b6 ActuatorManager \u00b6 ActuatorManager ( self ) MAX_FINS \u00b6 int(x=0) -> int or long int(x, base=10) -> int or long Convert a number or string to an integer, or return 0 if no arguments are given. If x is floating point, the conversion truncates towards zero. If x is outside the integer range, the function returns a long instead. If x is not a number or if base is given, then x must be a string or Unicode object representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 find_actuators \u00b6 ActuatorManager . find_actuators ( self ) Calculate the control allocation matrix, if one is not given. uuv_auv_actuator_interface.fin_model \u00b6","title":"uuv_auv_actuator_interface"},{"location":"packages/uuv_simulator/docs/python_api/uuv_auv_actuator_interface/#uuv_auv_actuator_interface","text":"","title":"uuv_auv_actuator_interface"},{"location":"packages/uuv_simulator/docs/python_api/uuv_auv_actuator_interface/#uuv_auv_actuator_interfaceactuator_manager","text":"","title":"uuv_auv_actuator_interface.actuator_manager"},{"location":"packages/uuv_simulator/docs/python_api/uuv_auv_actuator_interface/#actuatormanager","text":"ActuatorManager ( self )","title":"ActuatorManager"},{"location":"packages/uuv_simulator/docs/python_api/uuv_auv_actuator_interface/#max_fins","text":"int(x=0) -> int or long int(x, base=10) -> int or long Convert a number or string to an integer, or return 0 if no arguments are given. If x is floating point, the conversion truncates towards zero. If x is outside the integer range, the function returns a long instead. If x is not a number or if base is given, then x must be a string or Unicode object representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4","title":"MAX_FINS"},{"location":"packages/uuv_simulator/docs/python_api/uuv_auv_actuator_interface/#find_actuators","text":"ActuatorManager . find_actuators ( self ) Calculate the control allocation matrix, if one is not given.","title":"find_actuators"},{"location":"packages/uuv_simulator/docs/python_api/uuv_auv_actuator_interface/#uuv_auv_actuator_interfacefin_model","text":"","title":"uuv_auv_actuator_interface.fin_model"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/","text":"uuv_control_interfaces \u00b6 uuv_control_interfaces.dp_controller_base \u00b6 DPControllerBase \u00b6 DPControllerBase ( self , is_model_based = False , list_odometry_callbacks = [], planner_full_dof = False ) General abstract class for DP controllers for underwater vehicles. This is an abstract class, must be inherited by a controller module that overrides the update_controller method. If the controller is set to be model based (is_model_based=True), than the vehicle parameters are going to be read from the ROS parameter server. error_orientation_rpy \u00b6 Return orientation error in Euler angles. error_pose_euler \u00b6 Pose error with orientation represented in Euler angles. get_controller \u00b6 DPControllerBase . get_controller ( name , * args ) Create instance of a specific DP controller. get_list_of_controllers \u00b6 DPControllerBase . get_list_of_controllers () Return list of DP controllers using this interface. uuv_control_interfaces.dp_controller_local_planner \u00b6 DPControllerLocalPlanner \u00b6 DPControllerLocalPlanner ( self , full_dof = False , stamped_pose_only = False , thrusters_only = True ) Local planner for the dynamic positioning controllers to interpolate trajectories and generate trajectories from interpolated waypoint paths. set_station_keeping \u00b6 DPControllerLocalPlanner . set_station_keeping ( self , is_on = True ) Set station keeping mode flag. set_automatic_mode \u00b6 DPControllerLocalPlanner . set_automatic_mode ( self , is_on = True ) Set automatic mode flag. set_trajectory_running \u00b6 DPControllerLocalPlanner . set_trajectory_running ( self , is_on = True ) Set trajectory tracking flag. has_started \u00b6 DPControllerLocalPlanner . has_started ( self ) Return if the trajectory interpolator has started generating reference points. hold_vehicle \u00b6 DPControllerLocalPlanner . hold_vehicle ( self , request ) Service callback function to hold the vehicle's current position. start_waypoint_list \u00b6 DPControllerLocalPlanner . start_waypoint_list ( self , request ) Service callback function to follow a set of waypoints Args: request (InitWaypointSet) go_to_incremental \u00b6 DPControllerLocalPlanner . go_to_incremental ( self , request ) Service callback to set the command to the vehicle to move to a relative position in the world. interpolate \u00b6 DPControllerLocalPlanner . interpolate ( self , t ) Function interface to the controller. Calls the interpolator to calculate the current trajectory sample or returns a fixed position based on the past odometry measurements for station keeping. uuv_control_interfaces.dp_pid_controller_base \u00b6 DPPIDControllerBase \u00b6 DPPIDControllerBase ( self , * args ) This is an abstract class for PID-based controllers. The base class method update_controller must be overridden in other for a controller to work. uuv_control_interfaces.sym_vehicle \u00b6 uuv_control_interfaces.vehicle \u00b6 cross_product_operator \u00b6 cross_product_operator ( x ) Return a cross product operator for the given vector. Vehicle \u00b6 Vehicle ( self , inertial_frame_id = 'world' ) Vehicle interface to be used by model-based controllers. It receives the parameters necessary to compute the vehicle's motion according to Fossen's. acc \u00b6 Return linear and angular acceleration vector. depth \u00b6 Return depth of the vehicle. euler \u00b6 Return orientation in Euler angles as described in Fossen, 2011. euler_dot \u00b6 Return time derivative of the Euler angles. heading \u00b6 Return the heading of the vehicle. namespace \u00b6 Return robot namespace. pos \u00b6 Return the position of the vehicle. pose_euler \u00b6 Return pose as a vector, orientation in Euler angles. pose_quat \u00b6 Return pose as a vector, orientation as quaternion. quat \u00b6 Return orientation quaternion. quat_dot \u00b6 Return the time derivative of the quaternion vector. restoring_forces \u00b6 Return the restoring force vector. rotBtoI \u00b6 Return rotation from BODY to INERTIAL frame using the zyx convention to retrieve Euler angles from the quaternion vector (Fossen, 2011). rotItoB \u00b6 Return rotation from INERTIAL to BODY frame TBtoIquat \u00b6 Return matrix for transformation of BODY-fixed angular velocities in the BODY frame in relation to the INERTIAL frame into quaternion rate. vel \u00b6 Return linear and angular velocity vector. print_info \u00b6 Vehicle . print_info ( self ) Print the vehicle's parameters. set_added_mass \u00b6 Vehicle . set_added_mass ( self , Ma ) Set added-mass matrix coefficients. set_damping_coef \u00b6 Vehicle . set_damping_coef ( self , linear_damping , quad_damping ) Set linear and quadratic damping coefficients. compute_force \u00b6 Vehicle . compute_force ( self , acc = None , vel = None , with_restoring = True , use_sname = True ) Return the sum of forces acting on the vehicle. Given acceleration and velocity vectors, this function returns the sum of forces given the rigid-body and hydrodynamic models for the marine vessel. compute_acc \u00b6 Vehicle . compute_acc ( self , gen_forces = None , use_sname = True ) Calculate inverse dynamics to obtain the acceleration vector. get_jacobian \u00b6 Vehicle . get_jacobian ( self ) Return the Jacobian for the current orientation using transformations from BODY to INERTIAL frame. update_odometry \u00b6 Vehicle . update_odometry ( self , msg ) Odometry topic subscriber callback function.","title":"uuv_control_interfaces"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#uuv_control_interfaces","text":"","title":"uuv_control_interfaces"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#uuv_control_interfacesdp_controller_base","text":"","title":"uuv_control_interfaces.dp_controller_base"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#dpcontrollerbase","text":"DPControllerBase ( self , is_model_based = False , list_odometry_callbacks = [], planner_full_dof = False ) General abstract class for DP controllers for underwater vehicles. This is an abstract class, must be inherited by a controller module that overrides the update_controller method. If the controller is set to be model based (is_model_based=True), than the vehicle parameters are going to be read from the ROS parameter server.","title":"DPControllerBase"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#error_orientation_rpy","text":"Return orientation error in Euler angles.","title":"error_orientation_rpy"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#error_pose_euler","text":"Pose error with orientation represented in Euler angles.","title":"error_pose_euler"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#get_controller","text":"DPControllerBase . get_controller ( name , * args ) Create instance of a specific DP controller.","title":"get_controller"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#get_list_of_controllers","text":"DPControllerBase . get_list_of_controllers () Return list of DP controllers using this interface.","title":"get_list_of_controllers"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#uuv_control_interfacesdp_controller_local_planner","text":"","title":"uuv_control_interfaces.dp_controller_local_planner"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#dpcontrollerlocalplanner","text":"DPControllerLocalPlanner ( self , full_dof = False , stamped_pose_only = False , thrusters_only = True ) Local planner for the dynamic positioning controllers to interpolate trajectories and generate trajectories from interpolated waypoint paths.","title":"DPControllerLocalPlanner"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#set_station_keeping","text":"DPControllerLocalPlanner . set_station_keeping ( self , is_on = True ) Set station keeping mode flag.","title":"set_station_keeping"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#set_automatic_mode","text":"DPControllerLocalPlanner . set_automatic_mode ( self , is_on = True ) Set automatic mode flag.","title":"set_automatic_mode"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#set_trajectory_running","text":"DPControllerLocalPlanner . set_trajectory_running ( self , is_on = True ) Set trajectory tracking flag.","title":"set_trajectory_running"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#has_started","text":"DPControllerLocalPlanner . has_started ( self ) Return if the trajectory interpolator has started generating reference points.","title":"has_started"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#hold_vehicle","text":"DPControllerLocalPlanner . hold_vehicle ( self , request ) Service callback function to hold the vehicle's current position.","title":"hold_vehicle"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#start_waypoint_list","text":"DPControllerLocalPlanner . start_waypoint_list ( self , request ) Service callback function to follow a set of waypoints Args: request (InitWaypointSet)","title":"start_waypoint_list"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#go_to_incremental","text":"DPControllerLocalPlanner . go_to_incremental ( self , request ) Service callback to set the command to the vehicle to move to a relative position in the world.","title":"go_to_incremental"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#interpolate","text":"DPControllerLocalPlanner . interpolate ( self , t ) Function interface to the controller. Calls the interpolator to calculate the current trajectory sample or returns a fixed position based on the past odometry measurements for station keeping.","title":"interpolate"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#uuv_control_interfacesdp_pid_controller_base","text":"","title":"uuv_control_interfaces.dp_pid_controller_base"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#dppidcontrollerbase","text":"DPPIDControllerBase ( self , * args ) This is an abstract class for PID-based controllers. The base class method update_controller must be overridden in other for a controller to work.","title":"DPPIDControllerBase"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#uuv_control_interfacessym_vehicle","text":"","title":"uuv_control_interfaces.sym_vehicle"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#uuv_control_interfacesvehicle","text":"","title":"uuv_control_interfaces.vehicle"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#cross_product_operator","text":"cross_product_operator ( x ) Return a cross product operator for the given vector.","title":"cross_product_operator"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#vehicle","text":"Vehicle ( self , inertial_frame_id = 'world' ) Vehicle interface to be used by model-based controllers. It receives the parameters necessary to compute the vehicle's motion according to Fossen's.","title":"Vehicle"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#acc","text":"Return linear and angular acceleration vector.","title":"acc"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#depth","text":"Return depth of the vehicle.","title":"depth"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#euler","text":"Return orientation in Euler angles as described in Fossen, 2011.","title":"euler"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#euler_dot","text":"Return time derivative of the Euler angles.","title":"euler_dot"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#heading","text":"Return the heading of the vehicle.","title":"heading"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#namespace","text":"Return robot namespace.","title":"namespace"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#pos","text":"Return the position of the vehicle.","title":"pos"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#pose_euler","text":"Return pose as a vector, orientation in Euler angles.","title":"pose_euler"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#pose_quat","text":"Return pose as a vector, orientation as quaternion.","title":"pose_quat"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#quat","text":"Return orientation quaternion.","title":"quat"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#quat_dot","text":"Return the time derivative of the quaternion vector.","title":"quat_dot"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#restoring_forces","text":"Return the restoring force vector.","title":"restoring_forces"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#rotbtoi","text":"Return rotation from BODY to INERTIAL frame using the zyx convention to retrieve Euler angles from the quaternion vector (Fossen, 2011).","title":"rotBtoI"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#rotitob","text":"Return rotation from INERTIAL to BODY frame","title":"rotItoB"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#tbtoiquat","text":"Return matrix for transformation of BODY-fixed angular velocities in the BODY frame in relation to the INERTIAL frame into quaternion rate.","title":"TBtoIquat"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#vel","text":"Return linear and angular velocity vector.","title":"vel"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#print_info","text":"Vehicle . print_info ( self ) Print the vehicle's parameters.","title":"print_info"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#set_added_mass","text":"Vehicle . set_added_mass ( self , Ma ) Set added-mass matrix coefficients.","title":"set_added_mass"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#set_damping_coef","text":"Vehicle . set_damping_coef ( self , linear_damping , quad_damping ) Set linear and quadratic damping coefficients.","title":"set_damping_coef"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#compute_force","text":"Vehicle . compute_force ( self , acc = None , vel = None , with_restoring = True , use_sname = True ) Return the sum of forces acting on the vehicle. Given acceleration and velocity vectors, this function returns the sum of forces given the rigid-body and hydrodynamic models for the marine vessel.","title":"compute_force"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#compute_acc","text":"Vehicle . compute_acc ( self , gen_forces = None , use_sname = True ) Calculate inverse dynamics to obtain the acceleration vector.","title":"compute_acc"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#get_jacobian","text":"Vehicle . get_jacobian ( self ) Return the Jacobian for the current orientation using transformations from BODY to INERTIAL frame.","title":"get_jacobian"},{"location":"packages/uuv_simulator/docs/python_api/uuv_control_interfaces/#update_odometry","text":"Vehicle . update_odometry ( self , msg ) Odometry topic subscriber callback function.","title":"update_odometry"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/","text":"uuv_thrusters \u00b6 uuv_thrusters.thruster_manager \u00b6 ThrusterManager \u00b6 ThrusterManager ( self ) The thruster manager generates the thruster allocation matrix using the TF information and publishes the thruster forces assuming the the thruster topics are named in the following pattern / / Thruster frames should also be named as follows _ MAX_THRUSTERS \u00b6 int(x=0) -> int or long int(x, base=10) -> int or long Convert a number or string to an integer, or return 0 if no arguments are given. If x is floating point, the conversion truncates towards zero. If x is outside the integer range, the function returns a long instead. If x is not a number or if base is given, then x must be a string or Unicode object representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 update_tam \u00b6 ThrusterManager . update_tam ( self , recalculate = False ) Calculate the thruster allocation matrix, if one is not given. command_thrusters \u00b6 ThrusterManager . command_thrusters ( self ) Publish the thruster input into their specific topic. compute_thruster_forces \u00b6 ThrusterManager . compute_thruster_forces ( self , gen_forces ) Compute desired thruster forces using the inverse configuration matrix. uuv_thrusters.models \u00b6 uuv_thrusters.models.thruster \u00b6 Thruster \u00b6 Thruster ( self , index , topic , pos , orientation , axis = array ([ 1 , 0 , 0 , 0 ])) Abstract function to all the thruster models avaialble. The instance of a thruster model must use the factory method. LABEL \u00b6 str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object. get_command_value \u00b6 Thruster . get_command_value ( self , thrust ) Convert desired thrust force to input command according to this function. Overwrite this method to implement custom models. get_thrust_value \u00b6 Thruster . get_thrust_value ( self , command ) Computes the thrust force for the given command. get_curve \u00b6 Thruster . get_curve ( self , min_value , max_value , n_points ) Sample the conversion curve and return the values. uuv_thrusters.models.thruster_custom \u00b6 ThrusterCustom \u00b6 ThrusterCustom ( self , * args , ** kwargs ) Class describing a custom conversion curve between the command input, usually the angular velocity, and the correspondent output thrust force. Here the inverse of the conversion function can be computed so that the command for the desired thrust force is retrieved. The input vector corresponds to sampled values for the command input, and the output vector corresponds to the sampled values for the correspondent thrust forces. This information is usually available in the datasheet of the thruster's manufacturer. LABEL \u00b6 str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object. get_thrust_value \u00b6 ThrusterCustom . get_thrust_value ( self , command ) Computes the thrust force for the given command. uuv_thrusters.models.thruster_proportional \u00b6 ThrusterProportional \u00b6 ThrusterProportional ( self , * args , ** kwargs ) This model corresponds to the linear relation between a function abs(command)*command of the command input (usually the command angular velocity) to the thrust force. A constant gain has to be provided. LABEL \u00b6 str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object. get_thrust_value \u00b6 ThrusterProportional . get_thrust_value ( self , command ) Computes the thrust force for the given command.","title":"uuv_thrusters"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#uuv_thrusters","text":"","title":"uuv_thrusters"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#uuv_thrustersthruster_manager","text":"","title":"uuv_thrusters.thruster_manager"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#thrustermanager","text":"ThrusterManager ( self ) The thruster manager generates the thruster allocation matrix using the TF information and publishes the thruster forces assuming the the thruster topics are named in the following pattern / / Thruster frames should also be named as follows _","title":"ThrusterManager"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#max_thrusters","text":"int(x=0) -> int or long int(x, base=10) -> int or long Convert a number or string to an integer, or return 0 if no arguments are given. If x is floating point, the conversion truncates towards zero. If x is outside the integer range, the function returns a long instead. If x is not a number or if base is given, then x must be a string or Unicode object representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4","title":"MAX_THRUSTERS"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#update_tam","text":"ThrusterManager . update_tam ( self , recalculate = False ) Calculate the thruster allocation matrix, if one is not given.","title":"update_tam"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#command_thrusters","text":"ThrusterManager . command_thrusters ( self ) Publish the thruster input into their specific topic.","title":"command_thrusters"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#compute_thruster_forces","text":"ThrusterManager . compute_thruster_forces ( self , gen_forces ) Compute desired thruster forces using the inverse configuration matrix.","title":"compute_thruster_forces"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#uuv_thrustersmodels","text":"","title":"uuv_thrusters.models"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#uuv_thrustersmodelsthruster","text":"","title":"uuv_thrusters.models.thruster"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#thruster","text":"Thruster ( self , index , topic , pos , orientation , axis = array ([ 1 , 0 , 0 , 0 ])) Abstract function to all the thruster models avaialble. The instance of a thruster model must use the factory method.","title":"Thruster"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#label","text":"str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object.","title":"LABEL"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#get_command_value","text":"Thruster . get_command_value ( self , thrust ) Convert desired thrust force to input command according to this function. Overwrite this method to implement custom models.","title":"get_command_value"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#get_thrust_value","text":"Thruster . get_thrust_value ( self , command ) Computes the thrust force for the given command.","title":"get_thrust_value"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#get_curve","text":"Thruster . get_curve ( self , min_value , max_value , n_points ) Sample the conversion curve and return the values.","title":"get_curve"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#uuv_thrustersmodelsthruster_custom","text":"","title":"uuv_thrusters.models.thruster_custom"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#thrustercustom","text":"ThrusterCustom ( self , * args , ** kwargs ) Class describing a custom conversion curve between the command input, usually the angular velocity, and the correspondent output thrust force. Here the inverse of the conversion function can be computed so that the command for the desired thrust force is retrieved. The input vector corresponds to sampled values for the command input, and the output vector corresponds to the sampled values for the correspondent thrust forces. This information is usually available in the datasheet of the thruster's manufacturer.","title":"ThrusterCustom"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#label_1","text":"str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object.","title":"LABEL"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#get_thrust_value_1","text":"ThrusterCustom . get_thrust_value ( self , command ) Computes the thrust force for the given command.","title":"get_thrust_value"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#uuv_thrustersmodelsthruster_proportional","text":"","title":"uuv_thrusters.models.thruster_proportional"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#thrusterproportional","text":"ThrusterProportional ( self , * args , ** kwargs ) This model corresponds to the linear relation between a function abs(command)*command of the command input (usually the command angular velocity) to the thrust force. A constant gain has to be provided.","title":"ThrusterProportional"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#label_2","text":"str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object.","title":"LABEL"},{"location":"packages/uuv_simulator/docs/python_api/uuv_thrusters/#get_thrust_value_2","text":"ThrusterProportional . get_thrust_value ( self , command ) Computes the thrust force for the given command.","title":"get_thrust_value"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/","text":"uuv_trajectory_generator \u00b6 uuv_trajectory_generator.trajectory_generator \u00b6 TrajectoryGenerator \u00b6 TrajectoryGenerator ( self , full_dof = False , stamped_pose_only = False ) get_trajectory_as_message \u00b6 TrajectoryGenerator . get_trajectory_as_message ( self ) Return the trajectory points as a Trajectory type message. If waypoints are currently in use, then sample the interpolated path and return the poses only. is_using_waypoints \u00b6 TrajectoryGenerator . is_using_waypoints ( self ) Return true if the waypoint interpolation is being used. set_waypoints \u00b6 TrajectoryGenerator . set_waypoints ( self , waypoints , init_rot = ( 0 , 0 , 0 , 1 )) Initializes the waypoint interpolator with a set of waypoints. get_waypoints \u00b6 TrajectoryGenerator . get_waypoints ( self ) Return the waypoints used by the waypoint interpolator, if any exist. add_waypoint \u00b6 TrajectoryGenerator . add_waypoint ( self , waypoint , add_to_beginning = False ) Add waypoint to the current waypoint set, if one has been initialized. add_trajectory_point \u00b6 TrajectoryGenerator . add_trajectory_point ( self , pnt ) If a trajectory set is currently being used in the interpolation process, add a trajectory point to the set. uuv_trajectory_generator.trajectory_point \u00b6 TrajectoryPoint \u00b6 TrajectoryPoint ( self , t = 0.0 , pos = [ 0 , 0 , 0 ], quat = [ 0 , 0 , 0 , 1 ], lin_vel = [ 0 , 0 , 0 ], ang_vel = [ 0 , 0 , 0 ], lin_acc = [ 0 , 0 , 0 ], ang_acc = [ 0 , 0 , 0 ]) a \u00b6 Return linear acceleration vector. alpha \u00b6 Return angular acceleration vector. p \u00b6 Return position vector. q \u00b6 Return rotation quaterinon. t \u00b6 Return time stamp in seconds. v \u00b6 Return linear velocity vector. w \u00b6 Return angular velocity vector. x \u00b6 Return X coordinate from the position vector. y \u00b6 Return Y coordinate from the position vector. z \u00b6 Return Z coordinate from the position vector. to_message \u00b6 TrajectoryPoint . to_message ( self ) Convert current data to a trajectory point message. from_message \u00b6 TrajectoryPoint . from_message ( self , msg ) Read trajectory point message and initialize internal attributes. uuv_trajectory_generator.wp_trajectory_generator \u00b6 WPTrajectoryGenerator \u00b6 WPTrajectoryGenerator ( self , full_dof = False , use_finite_diff = True , interpolation_method = 'cubic' , stamped_pose_only = False ) Class that generates a trajectory from the interpolated path generated from a set of waypoints. It uses the information given for the waypoint's maximum forward speed to estimate the velocity between waypoint and parametrize the interpolated curve. The velocity and acceleration profiles are the generated through finite discretization. These profiles are not optimized, this class is a simple solution for quick trajectory generation for waypoint navigation. closest_waypoint \u00b6 Return the closest waypoint to the current position on the path. closest_waypoint_idx \u00b6 Return the index of the closest waypoint to the current position on the path. started \u00b6 Return true if the interpolation has started. is_full_dof \u00b6 WPTrajectoryGenerator . is_full_dof ( self ) Return true if the trajectory is generated for all 6 degrees of freedom. get_max_time \u00b6 WPTrajectoryGenerator . get_max_time ( self ) Return maximum trajectory time. set_duration \u00b6 WPTrajectoryGenerator . set_duration ( self , t ) Set a new maximum trajectory time. is_finished \u00b6 WPTrajectoryGenerator . is_finished ( self ) Return true if the trajectory has finished. reset \u00b6 WPTrajectoryGenerator . reset ( self ) Reset all class attributes to allow a new trajectory to be computed. init_waypoints \u00b6 WPTrajectoryGenerator . init_waypoints ( self , waypoint_set , init_rot = ( 0 , 0 , 0 , 1 )) Initialize the waypoint set. add_waypoint \u00b6 WPTrajectoryGenerator . add_waypoint ( self , waypoint , add_to_beginning = False ) Add waypoint to the existing waypoint set. If no waypoint set has been initialized, create new waypoint set structure and add the given waypoint. get_waypoints \u00b6 WPTrajectoryGenerator . get_waypoints ( self ) Return waypoint set. update_dt \u00b6 WPTrajectoryGenerator . update_dt ( self , t ) Update the time stamp. get_samples \u00b6 WPTrajectoryGenerator . get_samples ( self , step = 0.005 ) Return pose samples from the interpolated path. set_start_time \u00b6 WPTrajectoryGenerator . set_start_time ( self , t ) Set a custom starting time to the interpolated trajectory. generate_pnt \u00b6 WPTrajectoryGenerator . generate_pnt ( self , t , pos , rot ) Return trajectory sample for the current parameter s. uuv_trajectory_generator.path_generator.bezier_curve \u00b6 BezierCurve \u00b6 BezierCurve ( self , pnts , order , tangents = None , normals = None ) Implementation of Bezier curves of orders 3, 4 and 5 based on [1]. [1] Biagiotti, Luigi, and Claudio Melchiorri. Trajectory planning for automatic machines and robots. Springer Science & Business Media, 2008. uuv_trajectory_generator.path_generator.cs_interpolator \u00b6 CSInterpolator \u00b6 CSInterpolator ( self ) Interpolator that will generate cubic Bezier curve segments for a set of waypoints. LABEL \u00b6 str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object. set_parameters \u00b6 CSInterpolator . set_parameters ( self , params ) Not implemented for this interpolator. uuv_trajectory_generator.path_generator.dubins_interpolator \u00b6 DubinsInterpolator \u00b6 DubinsInterpolator ( self ) 3D Dubins path interpolator LABEL \u00b6 str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object. uuv_trajectory_generator.path_generator.helical_segment \u00b6 uuv_trajectory_generator.path_generator.line_segment \u00b6 uuv_trajectory_generator.path_generator.linear_interpolator \u00b6 LinearInterpolator \u00b6 LinearInterpolator ( self ) Simple linear interpolator LABEL \u00b6 str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object. set_parameters \u00b6 LinearInterpolator . set_parameters ( self , params ) Not implemented for this interpolator. uuv_trajectory_generator.path_generator.lipb_interpolator \u00b6 LIPBInterpolator \u00b6 LIPBInterpolator ( self ) Linear interpolator with polynomial blends. [1] Biagiotti, Luigi, and Claudio Melchiorri. Trajectory planning for automatic machines and robots. Springer Science & Business Media, 2008. LABEL \u00b6 str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object. uuv_trajectory_generator.path_generator.path_generator \u00b6","title":"uuv_trajectory_generator"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#uuv_trajectory_generator","text":"","title":"uuv_trajectory_generator"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#uuv_trajectory_generatortrajectory_generator","text":"","title":"uuv_trajectory_generator.trajectory_generator"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#trajectorygenerator","text":"TrajectoryGenerator ( self , full_dof = False , stamped_pose_only = False )","title":"TrajectoryGenerator"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#get_trajectory_as_message","text":"TrajectoryGenerator . get_trajectory_as_message ( self ) Return the trajectory points as a Trajectory type message. If waypoints are currently in use, then sample the interpolated path and return the poses only.","title":"get_trajectory_as_message"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#is_using_waypoints","text":"TrajectoryGenerator . is_using_waypoints ( self ) Return true if the waypoint interpolation is being used.","title":"is_using_waypoints"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#set_waypoints","text":"TrajectoryGenerator . set_waypoints ( self , waypoints , init_rot = ( 0 , 0 , 0 , 1 )) Initializes the waypoint interpolator with a set of waypoints.","title":"set_waypoints"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#get_waypoints","text":"TrajectoryGenerator . get_waypoints ( self ) Return the waypoints used by the waypoint interpolator, if any exist.","title":"get_waypoints"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#add_waypoint","text":"TrajectoryGenerator . add_waypoint ( self , waypoint , add_to_beginning = False ) Add waypoint to the current waypoint set, if one has been initialized.","title":"add_waypoint"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#add_trajectory_point","text":"TrajectoryGenerator . add_trajectory_point ( self , pnt ) If a trajectory set is currently being used in the interpolation process, add a trajectory point to the set.","title":"add_trajectory_point"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#uuv_trajectory_generatortrajectory_point","text":"","title":"uuv_trajectory_generator.trajectory_point"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#trajectorypoint","text":"TrajectoryPoint ( self , t = 0.0 , pos = [ 0 , 0 , 0 ], quat = [ 0 , 0 , 0 , 1 ], lin_vel = [ 0 , 0 , 0 ], ang_vel = [ 0 , 0 , 0 ], lin_acc = [ 0 , 0 , 0 ], ang_acc = [ 0 , 0 , 0 ])","title":"TrajectoryPoint"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#a","text":"Return linear acceleration vector.","title":"a"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#alpha","text":"Return angular acceleration vector.","title":"alpha"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#p","text":"Return position vector.","title":"p"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#q","text":"Return rotation quaterinon.","title":"q"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#t","text":"Return time stamp in seconds.","title":"t"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#v","text":"Return linear velocity vector.","title":"v"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#w","text":"Return angular velocity vector.","title":"w"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#x","text":"Return X coordinate from the position vector.","title":"x"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#y","text":"Return Y coordinate from the position vector.","title":"y"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#z","text":"Return Z coordinate from the position vector.","title":"z"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#to_message","text":"TrajectoryPoint . to_message ( self ) Convert current data to a trajectory point message.","title":"to_message"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#from_message","text":"TrajectoryPoint . from_message ( self , msg ) Read trajectory point message and initialize internal attributes.","title":"from_message"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#uuv_trajectory_generatorwp_trajectory_generator","text":"","title":"uuv_trajectory_generator.wp_trajectory_generator"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#wptrajectorygenerator","text":"WPTrajectoryGenerator ( self , full_dof = False , use_finite_diff = True , interpolation_method = 'cubic' , stamped_pose_only = False ) Class that generates a trajectory from the interpolated path generated from a set of waypoints. It uses the information given for the waypoint's maximum forward speed to estimate the velocity between waypoint and parametrize the interpolated curve. The velocity and acceleration profiles are the generated through finite discretization. These profiles are not optimized, this class is a simple solution for quick trajectory generation for waypoint navigation.","title":"WPTrajectoryGenerator"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#closest_waypoint","text":"Return the closest waypoint to the current position on the path.","title":"closest_waypoint"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#closest_waypoint_idx","text":"Return the index of the closest waypoint to the current position on the path.","title":"closest_waypoint_idx"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#started","text":"Return true if the interpolation has started.","title":"started"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#is_full_dof","text":"WPTrajectoryGenerator . is_full_dof ( self ) Return true if the trajectory is generated for all 6 degrees of freedom.","title":"is_full_dof"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#get_max_time","text":"WPTrajectoryGenerator . get_max_time ( self ) Return maximum trajectory time.","title":"get_max_time"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#set_duration","text":"WPTrajectoryGenerator . set_duration ( self , t ) Set a new maximum trajectory time.","title":"set_duration"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#is_finished","text":"WPTrajectoryGenerator . is_finished ( self ) Return true if the trajectory has finished.","title":"is_finished"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#reset","text":"WPTrajectoryGenerator . reset ( self ) Reset all class attributes to allow a new trajectory to be computed.","title":"reset"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#init_waypoints","text":"WPTrajectoryGenerator . init_waypoints ( self , waypoint_set , init_rot = ( 0 , 0 , 0 , 1 )) Initialize the waypoint set.","title":"init_waypoints"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#add_waypoint_1","text":"WPTrajectoryGenerator . add_waypoint ( self , waypoint , add_to_beginning = False ) Add waypoint to the existing waypoint set. If no waypoint set has been initialized, create new waypoint set structure and add the given waypoint.","title":"add_waypoint"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#get_waypoints_1","text":"WPTrajectoryGenerator . get_waypoints ( self ) Return waypoint set.","title":"get_waypoints"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#update_dt","text":"WPTrajectoryGenerator . update_dt ( self , t ) Update the time stamp.","title":"update_dt"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#get_samples","text":"WPTrajectoryGenerator . get_samples ( self , step = 0.005 ) Return pose samples from the interpolated path.","title":"get_samples"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#set_start_time","text":"WPTrajectoryGenerator . set_start_time ( self , t ) Set a custom starting time to the interpolated trajectory.","title":"set_start_time"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#generate_pnt","text":"WPTrajectoryGenerator . generate_pnt ( self , t , pos , rot ) Return trajectory sample for the current parameter s.","title":"generate_pnt"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#uuv_trajectory_generatorpath_generatorbezier_curve","text":"","title":"uuv_trajectory_generator.path_generator.bezier_curve"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#beziercurve","text":"BezierCurve ( self , pnts , order , tangents = None , normals = None ) Implementation of Bezier curves of orders 3, 4 and 5 based on [1]. [1] Biagiotti, Luigi, and Claudio Melchiorri. Trajectory planning for automatic machines and robots. Springer Science & Business Media, 2008.","title":"BezierCurve"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#uuv_trajectory_generatorpath_generatorcs_interpolator","text":"","title":"uuv_trajectory_generator.path_generator.cs_interpolator"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#csinterpolator","text":"CSInterpolator ( self ) Interpolator that will generate cubic Bezier curve segments for a set of waypoints.","title":"CSInterpolator"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#label","text":"str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object.","title":"LABEL"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#set_parameters","text":"CSInterpolator . set_parameters ( self , params ) Not implemented for this interpolator.","title":"set_parameters"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#uuv_trajectory_generatorpath_generatordubins_interpolator","text":"","title":"uuv_trajectory_generator.path_generator.dubins_interpolator"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#dubinsinterpolator","text":"DubinsInterpolator ( self ) 3D Dubins path interpolator","title":"DubinsInterpolator"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#label_1","text":"str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object.","title":"LABEL"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#uuv_trajectory_generatorpath_generatorhelical_segment","text":"","title":"uuv_trajectory_generator.path_generator.helical_segment"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#uuv_trajectory_generatorpath_generatorline_segment","text":"","title":"uuv_trajectory_generator.path_generator.line_segment"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#uuv_trajectory_generatorpath_generatorlinear_interpolator","text":"","title":"uuv_trajectory_generator.path_generator.linear_interpolator"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#linearinterpolator","text":"LinearInterpolator ( self ) Simple linear interpolator","title":"LinearInterpolator"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#label_2","text":"str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object.","title":"LABEL"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#set_parameters_1","text":"LinearInterpolator . set_parameters ( self , params ) Not implemented for this interpolator.","title":"set_parameters"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#uuv_trajectory_generatorpath_generatorlipb_interpolator","text":"","title":"uuv_trajectory_generator.path_generator.lipb_interpolator"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#lipbinterpolator","text":"LIPBInterpolator ( self ) Linear interpolator with polynomial blends. [1] Biagiotti, Luigi, and Claudio Melchiorri. Trajectory planning for automatic machines and robots. Springer Science & Business Media, 2008.","title":"LIPBInterpolator"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#label_3","text":"str(object='') -> string Return a nice string representation of the object. If the argument is a string, the return value is the same object.","title":"LABEL"},{"location":"packages/uuv_simulator/docs/python_api/uuv_trajectory_generator/#uuv_trajectory_generatorpath_generatorpath_generator","text":"","title":"uuv_trajectory_generator.path_generator.path_generator"},{"location":"packages/uuv_simulator/docs/python_api/uuv_waypoints/","text":"uuv_waypoints \u00b6 uuv_waypoints.waypoint \u00b6 Waypoint \u00b6 Waypoint ( self , x = 0 , y = 0 , z = 0 , max_forward_speed = 0 , heading_offset = 0 , use_fixed_heading = False , inertial_frame_id = 'world' , radius_acceptance = 0.0 ) FAILED_WAYPOINT \u00b6 list() -> new empty list list(iterable) -> new list initialized from iterable's items FINAL_WAYPOINT_COLOR \u00b6 list() -> new empty list list(iterable) -> new list initialized from iterable's items OK_WAYPOINT \u00b6 list() -> new empty list list(iterable) -> new list initialized from iterable's items uuv_waypoints.waypoint_set \u00b6 WaypointSet \u00b6 WaypointSet ( self , scale = 0.1 , inertial_frame_id = 'world' , max_surge_speed = None ) FAILED_WAYPOINT \u00b6 list() -> new empty list list(iterable) -> new list initialized from iterable's items FINAL_WAYPOINT_COLOR \u00b6 list() -> new empty list list(iterable) -> new list initialized from iterable's items OK_WAYPOINT \u00b6 list() -> new empty list list(iterable) -> new list initialized from iterable's items","title":"uuv_waypoints"},{"location":"packages/uuv_simulator/docs/python_api/uuv_waypoints/#uuv_waypoints","text":"","title":"uuv_waypoints"},{"location":"packages/uuv_simulator/docs/python_api/uuv_waypoints/#uuv_waypointswaypoint","text":"","title":"uuv_waypoints.waypoint"},{"location":"packages/uuv_simulator/docs/python_api/uuv_waypoints/#waypoint","text":"Waypoint ( self , x = 0 , y = 0 , z = 0 , max_forward_speed = 0 , heading_offset = 0 , use_fixed_heading = False , inertial_frame_id = 'world' , radius_acceptance = 0.0 )","title":"Waypoint"},{"location":"packages/uuv_simulator/docs/python_api/uuv_waypoints/#failed_waypoint","text":"list() -> new empty list list(iterable) -> new list initialized from iterable's items","title":"FAILED_WAYPOINT"},{"location":"packages/uuv_simulator/docs/python_api/uuv_waypoints/#final_waypoint_color","text":"list() -> new empty list list(iterable) -> new list initialized from iterable's items","title":"FINAL_WAYPOINT_COLOR"},{"location":"packages/uuv_simulator/docs/python_api/uuv_waypoints/#ok_waypoint","text":"list() -> new empty list list(iterable) -> new list initialized from iterable's items","title":"OK_WAYPOINT"},{"location":"packages/uuv_simulator/docs/python_api/uuv_waypoints/#uuv_waypointswaypoint_set","text":"","title":"uuv_waypoints.waypoint_set"},{"location":"packages/uuv_simulator/docs/python_api/uuv_waypoints/#waypointset","text":"WaypointSet ( self , scale = 0.1 , inertial_frame_id = 'world' , max_surge_speed = None )","title":"WaypointSet"},{"location":"packages/uuv_simulator/docs/python_api/uuv_waypoints/#failed_waypoint_1","text":"list() -> new empty list list(iterable) -> new list initialized from iterable's items","title":"FAILED_WAYPOINT"},{"location":"packages/uuv_simulator/docs/python_api/uuv_waypoints/#final_waypoint_color_1","text":"list() -> new empty list list(iterable) -> new list initialized from iterable's items","title":"FINAL_WAYPOINT_COLOR"},{"location":"packages/uuv_simulator/docs/python_api/uuv_waypoints/#ok_waypoint_1","text":"list() -> new empty list list(iterable) -> new list initialized from iterable's items","title":"OK_WAYPOINT"},{"location":"tutorials/config_thruster_manager/","text":"Configuring the thruster manager for a new vehicle \u00b6 In order to generate control forces for thruster-actuated vehicles, it is necessary to compute the thruster allocation matrix , which will translate the output of the controller \\boldsymbol{\\tau}_C = (f_x, f_y, f_z, \\tau_r, \\tau_p, \\tau_y)^T \\boldsymbol{\\tau}_C = (f_x, f_y, f_z, \\tau_r, \\tau_p, \\tau_y)^T represented in the vehicle's body frame, where f_i f_i represents the forces and \\tau_i \\tau_i represents the torques, into the output thruster forces \\tau_i \\tau_i for each. The simulation expects each thruster unit to have its own unique frame, which enables the use of tf to lookup the transformation matrix between the vehicle's body frame and each thruster during runtime. Using this possibility, a package called uuv_thruster_manager has been developed to generate the thruster allocation matrix automatically and translating the control vector into commands to each thruster. Note Check the tutorial to create a new vehicle to check on how to setup the new underwater vehicle and actuators properly. To create an initial package with the control configuration for a new vehicle, run the following in your catkin workspace rosrun uuv_assistants create_thruster_manager_configuration --robot_name <ROBOT_NAME> This script will create a new <ROBOT_NAME>_control package with initial templates for the launch and parameter files. If you already have catkin package where you want to store these files, run rosrun uuv_assistants create_thruster_manager_configuration --robot_name <ROBOT_NAME> --output_dir <CATKIN_PKG> The folder structure will look like the following <ROBOT_NAME>_control |-- config |-- thruster_manager.yaml |-- launch |-- start_thruster_manager.launch `-- CMakeLists.txt `-- package.xml You should edit the thruster_manager.yaml file to include the correct thruster model parameters and topics. Instructions on how to do it can be found in the comments on the same file. Here is an example from the RexROV vehicle thruster manager configuration: thruster_manager : tf_prefix : rexrov base_link : base_link thruster_topic_prefix : thrusters / thruster_topic_suffix : / input thruster_frame_base : thruster_ max_thrust : 2000.0 timeout : - 1 update_rate : 50 conversion_fcn : proportional conversion_fcn_params : gain : 0.00031 Once the configuration is done, the thruster allocation matrix file should be generated and stored. The tam matrix can be generated in runtime everytime the simulation starts, but it is recommended to store and read it from a file since the tf_listener can take a long time to find all frames and will therefore make the vehicle inactive for a while at the beginning of the simulation. To do this, you must compile you catkin workspace cd ~/catkin_ws catkin_make or cd ~/catkin_ws catkin build Tip You can run :: cd ~/catkin_ws source devel/setup.sh if after compiling your package seems to not be found. A TAM.yaml file will be stored in the config folder once you start a Gazebo world :: roslaunch uuv_gazebo_worlds empty_underwater_world.launch and then include the vehicle roslaunch <ROBOT_NAME>_description upload.launch and finally run roslaunch <ROBOT_NAME>_control start_thruster_manager.launch reset_tam: = true From now on, if you always start the thruster manager using the launch file above (using the reset_tam as false ), you can load the TAM matrix. To command the vehicle, you have to start the thruster manager and publish a ROS Wrench message to the input topic /<ROBOT_NAME or ROBOT_NAMESPACE>/thruster_manager/input with the wrench command to the vehicle. The thrust forces will be generated at each thruster's unit frame like in the RViz screenshot below.","title":"Configuring the thruster manager"},{"location":"tutorials/config_thruster_manager/#configuring-the-thruster-manager-for-a-new-vehicle","text":"In order to generate control forces for thruster-actuated vehicles, it is necessary to compute the thruster allocation matrix , which will translate the output of the controller \\boldsymbol{\\tau}_C = (f_x, f_y, f_z, \\tau_r, \\tau_p, \\tau_y)^T \\boldsymbol{\\tau}_C = (f_x, f_y, f_z, \\tau_r, \\tau_p, \\tau_y)^T represented in the vehicle's body frame, where f_i f_i represents the forces and \\tau_i \\tau_i represents the torques, into the output thruster forces \\tau_i \\tau_i for each. The simulation expects each thruster unit to have its own unique frame, which enables the use of tf to lookup the transformation matrix between the vehicle's body frame and each thruster during runtime. Using this possibility, a package called uuv_thruster_manager has been developed to generate the thruster allocation matrix automatically and translating the control vector into commands to each thruster. Note Check the tutorial to create a new vehicle to check on how to setup the new underwater vehicle and actuators properly. To create an initial package with the control configuration for a new vehicle, run the following in your catkin workspace rosrun uuv_assistants create_thruster_manager_configuration --robot_name <ROBOT_NAME> This script will create a new <ROBOT_NAME>_control package with initial templates for the launch and parameter files. If you already have catkin package where you want to store these files, run rosrun uuv_assistants create_thruster_manager_configuration --robot_name <ROBOT_NAME> --output_dir <CATKIN_PKG> The folder structure will look like the following <ROBOT_NAME>_control |-- config |-- thruster_manager.yaml |-- launch |-- start_thruster_manager.launch `-- CMakeLists.txt `-- package.xml You should edit the thruster_manager.yaml file to include the correct thruster model parameters and topics. Instructions on how to do it can be found in the comments on the same file. Here is an example from the RexROV vehicle thruster manager configuration: thruster_manager : tf_prefix : rexrov base_link : base_link thruster_topic_prefix : thrusters / thruster_topic_suffix : / input thruster_frame_base : thruster_ max_thrust : 2000.0 timeout : - 1 update_rate : 50 conversion_fcn : proportional conversion_fcn_params : gain : 0.00031 Once the configuration is done, the thruster allocation matrix file should be generated and stored. The tam matrix can be generated in runtime everytime the simulation starts, but it is recommended to store and read it from a file since the tf_listener can take a long time to find all frames and will therefore make the vehicle inactive for a while at the beginning of the simulation. To do this, you must compile you catkin workspace cd ~/catkin_ws catkin_make or cd ~/catkin_ws catkin build Tip You can run :: cd ~/catkin_ws source devel/setup.sh if after compiling your package seems to not be found. A TAM.yaml file will be stored in the config folder once you start a Gazebo world :: roslaunch uuv_gazebo_worlds empty_underwater_world.launch and then include the vehicle roslaunch <ROBOT_NAME>_description upload.launch and finally run roslaunch <ROBOT_NAME>_control start_thruster_manager.launch reset_tam: = true From now on, if you always start the thruster manager using the launch file above (using the reset_tam as false ), you can load the TAM matrix. To command the vehicle, you have to start the thruster manager and publish a ROS Wrench message to the input topic /<ROBOT_NAME or ROBOT_NAMESPACE>/thruster_manager/input with the wrench command to the vehicle. The thrust forces will be generated at each thruster's unit frame like in the RViz screenshot below.","title":"Configuring the thruster manager for a new vehicle"},{"location":"tutorials/create_new_vehicle/","text":"To create the catkin package and file structure necessary to create a new underwater vehicle, you can run the following script in your catkin workspace rosrun uuv_assistants create_new_robot_model --robot_name <ROBOT_NAME> This will create a catkin package named <ROBOT_NAME>_description with templates for launch and URDF files. The snippets to use the UUV simulator's plugins are included and should be modified in order to be used. The template files do NOT describe any vehicle in particular. Meshes should also be included by the user in the meshes folder. The complete folder structure can be seen below. <ROBOT_NAME>_description |-- launch |-- upload.launch |-- meshes |-- README.md |-- robots |-- default.xacro |-- urdf |-- actuators.xacro |-- base.xacro |-- gazebo.xacro |-- sensors.xacro |-- snippets.xacro `-- CMakeLists.txt `-- package.xml Actuators and vehicles are modeled separately in the robot description and should also have separate mesh files. The thruster plugin macros set the axis of rotation of the thruster as the X axis, so it is better to setup the mesh accordingly, like in the example below showing the mesh for the RexROV thruster. Note Check the page on how to configuration the thruster manager to see how to setup the thruster allocation matrix and configure the thruster manager node for the vehicle. The fin plugin macros available in set the fin joint to rotate around the Z axis, so the fin mesh can be positioned as in the image below to avoid configuring its origin and orientation in the URDF file. .. image:: ../images/tutorial_new_vehicle/fin_mesh.png The template files should have the necessary macros for ROVs, AUVs and simple surface vessels. If you want to check more macros of URDF snippets for UUV simulator plugins, you should check the uuv_gazebo_ros_plugins XACRO macros <https://github.com/uuvsimulator/uuv_simulator/tree/master/uuv_gazebo_plugins/uuv_gazebo_ros_plugins/urdf> _ and the uuv_sensor_plugins_ros XACRO macros <https://github.com/uuvsimulator/uuv_simulator/tree/master/uuv_sensor_plugins/uuv_sensor_plugins_ros/urdf> _. .. note:: The position and orientation for sensors, actuators and center of buoyancy must be set with respect to the center of gravity of the vehicle's base link. ROS and Gazebo also use per default the ENU (East-North-Up) reference frame <http://www.ros.org/reps/rep-0103.html> _ convention, not NED (North-East-Down).","title":"Create new vehicle"},{"location":"tutorials/creating_new_dp_controller/","text":"To facilitate the implementation of new control algorithms for the vehicle modelled in this package, a few Python modules were created as an interface to the vehicle's thruster manager, the local planner and setup the necessary publishers and subscribers needed to receive trajectory messages and send thruster commands. The module also includes an implementation of Fossen's equations of motion that can be used by model-based controllers. To create a controller based on this Python modules, see the following steps. All the files discussed below are available in the package uuv_tutorial_dp_controller in the uuv_tutorials folder. Remember to change the name of the package when developing your own module to avoid conflicts when compiling the catkin workspace. Creating the custom controller package \u00b6 First, a new catkin package will be created to include the scripts and launch files necessary for this implementation. Replace the name of the catkin workspace catkin_ws below if yours is named differently. cd ~/catkin_ws/src catkin_create_pkg uuv_tutorial_dp_controller This command will create the necessary files for the new package which will be edited further on in this tutorial. Next, two folders are needed, one launch folder to the launch files and one scripts folder, where the implementation of the custom controller will be stored. cd ~/catkin_ws/src/uuv_tutorial_dp_controller mkdir launch scripts Creating the controller node \u00b6 In the scripts folder, a Python file has to be created, here we will name it tutorial_dp_controller.py . touch scripts/tutorial_dp_controller.py This file will have the implementation of the controller named TutorialDPController , a very simple PID controller, as shown below. #!/usr/bin/env python import rospy import numpy as np from uuv_control_interfaces import DPControllerBase class TutorialDPController ( DPControllerBase ): def __init__ ( self ): super ( TutorialDPController , self ) . __init__ ( self ) self . _Kp = np . zeros ( shape = ( 6 , 6 )) self . _Kd = np . zeros ( shape = ( 6 , 6 )) self . _Ki = np . zeros ( shape = ( 6 , 6 )) self . _int = np . zeros ( shape = ( 6 ,)) self . _error_pose = np . zeros ( shape = ( 6 ,)) # Do the same for the other two matrices if rospy . get_param ( '~Kp' ): diag = rospy . get_param ( '~Kp' ) if len ( diag ) == 6 : self . _Kp = np . diag ( diag ) print 'Kp= \\n ' , self . _Kp else : # If the vector provided has the wrong dimension, raise an exception raise rospy . ROSException ( 'For the Kp diagonal matrix, 6 coefficients are needed' ) if rospy . get_param ( '~Kd' ): diag = rospy . get_param ( '~Kd' ) if len ( diag ) == 6 : self . _Kd = np . diag ( diag ) print 'Kd= \\n ' , self . _Kd else : # If the vector provided has the wrong dimension, raise an exception raise rospy . ROSException ( 'For the Kd diagonal matrix, 6 coefficients are needed' ) if rospy . get_param ( '~Ki' ): diag = rospy . get_param ( '~Ki' ) if len ( diag ) == 6 : self . _Ki = np . diag ( diag ) print 'Ki= \\n ' , self . _Ki else : # If the vector provided has the wrong dimension, raise an exception raise rospy . ROSException ( 'For the Ki diagonal matrix, 6 coefficients are needed' ) self . _is_init = True def _reset_controller ( self ): super ( TutorialDPController , self ) . _reset_controller () self . _error_pose = np . zeros ( shape = ( 6 ,)) self . _int = np . zeros ( shape = ( 6 ,)) def update_controller ( self ): if not self . _is_init : return False if not self . odom_is_init : return self . _int = self . _int + 0.5 * ( self . error_pose_euler + self . _error_pose ) * self . _dt self . _error_pose = self . error_pose_euler tau = np . dot ( self . _Kp , self . error_pose_euler ) + np . dot ( self . _Kd , self . _errors [ 'vel' ]) + np . dot ( self . _Ki , self . _int ) self . publish_control_wrench ( tau ) if __name__ == '__main__' : print ( 'Tutorial - DP Controller' ) rospy . init_node ( 'tutorial_dp_controller' ) try : node = TutorialDPController () rospy . spin () except rospy . ROSInterruptException : print ( 'caught exception' ) print ( 'exiting' ) Analyzing the file in detail, for the controller to use the controller modules from uuv_control_interfaces , it has to inherit the DPControllerBase class and initialize it class TutorialDPController ( DPControllerBase ): def __init__ ( self ): super ( TutorialDPController , self ) . __init__ ( self ) This will setup the super class to initialize, for example, odometry message subscribers and thruster manager topic publishers. For model-based controllers, the super class constructor has to be called as super ( TutorialDPController , self ) . __init__ ( self , is_model_based = True ) The controller's parameters, in this case K_p K_p , K_d K_d and K_i K_i should retrieved from the parameter server to allow the controller to be used in different configurations. One alternative is to read this information from the node's private parameter namespace as shown below. This is done by adding a ~ in front of the parameters's tag. The parameter has to be provided at the controller's launch file accordingly, which will be discussed later on. if rospy . get_param ( '~Kd' ): diag = rospy . get_param ( '~Kd' ) if len ( diag ) == 6 : self . _Kd = np . diag ( diag ) print 'Kd= \\n ' , self . _Kd else : # If the vector provided has the wrong dimension, raise an exception raise rospy . ROSException ( 'For the Kd diagonal matrix, 6 coefficients are needed' ) The _reset_controller method can be overriden in case internal variables must be reset when the reset service call is received. It is important to also call the super class' reset method as seen below to ensure that error and reference vectors are also going to be cleared. super ( TutorialDPController , self ) . _reset_controller () When using the super class DPControllerBase , there is no need to add an controller update sequence or a timer. Once the method update_controller is implemented in the controller class, it will be given as a callback function to the odometry update method. This update method should include the controller's algorithm and generate the control effort vector (in this case \\tau \\tau ) and use the super class function publish_control_wrench to publish it to the thruster manager input. The last part of the file is necessary for the ROS node to be executed. if __name__ == '__main__' : print ( 'Tutorial - DP Controller' ) rospy . init_node ( 'tutorial_dp_controller' ) try : node = TutorialDPController () rospy . spin () except rospy . ROSInterruptException : print ( 'caught exception' ) print ( 'exiting' ) Configuring the launch files \u00b6 Once the custom controller is done, you have to turn your Python script into an executable and it can be done as follows, otherwise you will not be able to start the ROS node. chmod u+x tutorial_dp_controller.py Next step is to setup the launch file for the new controller. Create a new launch file as follows cd ~/catkin_ws/src/uuv_tutorial_dp_controller/launch touch start_tutorial_dp_controller.launch Edit the file to include the following <launch> <arg name= \"uuv_name\" /> <arg name= \"model_name\" default= \"$(arg uuv_name)\" /> <arg name= \"saturation\" default= \"5000\" /> <arg name= \"Kp\" default= \"11993.888,11993.888,11993.888,19460.069,19460.069,19460.069\" /> <arg name= \"Kd\" default= \"9077.459,9077.459,9077.459,18880.925,18880.925,18880.925\" /> <arg name= \"Ki\" default= \"321.417,321.417,321.417,2096.951,2096.951,2096.951\" /> <arg name= \"output_dir\" default= \"$(find uuv_thruster_manager)/config/$(arg model_name)\" /> <arg name= \"config_file\" default= \"$(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml\" /> <arg name= \"tam_file\" default= \"$(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml\" /> <include file= \"$(find uuv_thruster_manager)/launch/thruster_manager.launch\" > <arg name= \"uuv_name\" value= \"$(arg uuv_name)\" /> <arg name= \"model_name\" value= \"$(arg model_name)\" /> <arg name= \"output_dir\" value= \"$(arg output_dir)\" /> <arg name= \"config_file\" value= \"$(arg config_file)\" /> <arg name= \"tam_file\" value= \"$(arg tam_file)\" /> </include> <group ns= \"$(arg uuv_name)\" > <node pkg= \"uuv_control_utils\" type= \"trajectory_marker_publisher.py\" name= \"trajectory_marker_publisher\" output= \"screen\" > <remap from= \"trajectory\" to= \"dp_controller/trajectory\" /> <remap from= \"waypoints\" to= \"dp_controller/waypoints\" /> </node> <node pkg= \"uuv_tutorial_dp_controller\" type= \"tutorial_dp_controller.py\" name= \"tutorial_dp_controller\" output= \"screen\" > <remap from= \"odom\" to= \"pose_gt\" /> <remap from= \"trajectory\" to= \"dp_controller/trajectory\" /> <remap from= \"input_trajectory\" to= \"dp_controller/input_trajectory\" /> <remap from= \"waypoints\" to= \"dp_controller/waypoints\" /> <remap from= \"error\" to= \"dp_controller/error\" /> <remap from= \"reference\" to= \"dp_controller/reference\" /> <remap from= \"thruster_output\" to= \"thruster_manager/input_stamped\" /> <rosparam subst_value= \"true\" > saturation: $(arg saturation) Kp: [$(arg Kp)] Kd: [$(arg Kd)] Ki: [$(arg Ki)] </rosparam> </node> </group> </launch> The most important parts of the launch file to notice is that the vehicle namespace uuv_name must always be provided, since the simulation per default will have nodes specific to the operation of each vehicle created inside their namespaces. The thruster manager must also be initialized. Info For more information on how to setup the thruster manager, check the tutorial about configuration of the thruster manager . Finally, the controller node has to be called, along with the correct parameters set by the arguments K_p K_p , K_d K_d and K_i K_i in this example. You can pass this parameters by command line or set default vectors as seen above, but there should be no spaces between commas and values. They have to be set in the rosparam block. The trajectory_marker_publisher is an optional node used only to publish visual markers. To start a small demonstration using the RexROV vehicle, you can create another launch file as follows cd ~/catkin_ws/src/uuv_tutorial_dp_controller/launch touch start_tutorial_dp_controller_demo.launch and initialize a world, the vehicle and the RViz visualization tool as follows <launch> <!-- This launch file will start the controller nodes with the necessary parameters --> <!-- Vehicle namespace: since the simulation can run with multiple vehicle, each vehicle is created under a namespace, which is per default equal to the name of vehicle model, but can be assigned differently at startup --> <arg name= \"uuv_name\" /> <!-- Name of the vehicle model: the name of the robot model --> <arg name= \"model_name\" default= \"$(arg uuv_name)\" /> <!-- Control effort saturation --> <arg name= \"saturation\" default= \"5000\" /> <!-- The controller parameters are given below and will be given to the controller node in its private namespace. These are vectors and for roslaunch to see this as one argument, there can be no spaces between the commas and the floating point values. The default values are usually the ones that are going to be used. --> <arg name= \"Kp\" default= \"11993.888,11993.888,11993.888,19460.069,19460.069,19460.069\" /> <arg name= \"Kd\" default= \"9077.459,9077.459,9077.459,18880.925,18880.925,18880.925\" /> <arg name= \"Ki\" default= \"321.417,321.417,321.417,2096.951,2096.951,2096.951\" /> <arg name= \"output_dir\" default= \"$(find uuv_thruster_manager)/config/$(arg model_name)\" /> <arg name= \"config_file\" default= \"$(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml\" /> <arg name= \"tam_file\" default= \"$(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml\" /> <!-- For the control vector to be distributed amongst the thrusters, a thruster manager node has to be initialized for this specific vehicle. The thruster manager will calculate the thruster allocation matrix if none is provided, but it is better if the TAM is stored in a YAML file beforehand. Check the tutorial on how to initialize the thruster allocation matrix. --> <include file= \"$(find uuv_thruster_manager)/launch/thruster_manager.launch\" > <!-- The thruster manager will use the namespace uuv_name to initialize the node and will use the robot's model_name to search for the YAML file containing the thruster allocation matrix. --> <arg name= \"uuv_name\" value= \"$(arg uuv_name)\" /> <arg name= \"model_name\" value= \"$(arg model_name)\" /> <arg name= \"output_dir\" value= \"$(arg output_dir)\" /> <arg name= \"config_file\" value= \"$(arg config_file)\" /> <arg name= \"tam_file\" value= \"$(arg tam_file)\" /> </include> <!-- It is important to start all nodes relative to this vehicle under the vehicle's namespace in order to avoid errors and parameter being initialized in wrong place. Most of the nodes per default are going to look for configuration parameters and topics under the vehicle's namespace per default. --> <group ns= \"$(arg uuv_name)\" > <!-- This node just reads the trajectory and waypoint topics and publishes visualization markers to RViz, but is not essential to the controller's operation --> <node pkg= \"uuv_control_utils\" type= \"trajectory_marker_publisher.py\" name= \"trajectory_marker_publisher\" output= \"screen\" > <remap from= \"trajectory\" to= \"dp_controller/trajectory\" /> <remap from= \"waypoints\" to= \"dp_controller/waypoints\" /> </node> <!-- Start the vehicle controller node. Remember to include this controller's script correctly in the CMakeLists.txt file of your catkin package. This can be done by adding the following line in the CMakeLists.txt after the line where catkin_package() is given: catkin_install_python(PROGRAMS scripts/tutorial_dp_controller.py DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}) The scripts/tutorial_dp_controller.py file must also be set as an executable as follows >> cd <path_to_ros_package>/scripts >> chmod 777 tutorial_dp_controller.py --> <node pkg= \"uuv_tutorial_dp_controller\" type= \"tutorial_dp_controller.py\" name= \"tutorial_dp_controller\" output= \"screen\" > <!-- Remap necessary topics --> <remap from= \"odom\" to= \"pose_gt\" /> <remap from= \"trajectory\" to= \"dp_controller/trajectory\" /> <remap from= \"input_trajectory\" to= \"dp_controller/input_trajectory\" /> <remap from= \"waypoints\" to= \"dp_controller/waypoints\" /> <remap from= \"error\" to= \"dp_controller/error\" /> <remap from= \"reference\" to= \"dp_controller/reference\" /> <remap from= \"thruster_output\" to= \"thruster_manager/input_stamped\" /> <!-- Set the controller parameters in the node's private namespace--> <rosparam subst_value= \"true\" > saturation: $(arg saturation) Kp: [$(arg Kp)] Kd: [$(arg Kd)] Ki: [$(arg Ki)] </rosparam> </node> </group> <!-- Now run the demo file to start a new simulation with this controller >> roslaunch uuv_tutorial_dp_controller start_tutorial_dp_controller_demo.launch --> </launch> Before you can run this demo, the package has to be configured. Configuring the package \u00b6 To allow catkin to install all your modules, you can open the CMakeLists.txt file from your catkin package and edit it to look like in the example below. cmake_minimum_required ( VERSION 2.8.3 ) project ( uuv_tutorial_dp_controller ) find_package ( catkin REQUIRED ) catkin_package () catkin_install_python ( PROGRAMS scripts/tutorial_dp_controller.py DESTINATION ${ CATKIN_PACKAGE_BIN_DESTINATION } ) install ( DIRECTORY launch DESTINATION ${ CATKIN_PACKAGE_SHARE_DESTINATION } PATTERN \"*~\" EXCLUDE ) Running the simulation \u00b6 After you compile you workspace again with catkin_make or catkin build , you can run the demo launch file created before. roslaunch uuv_tutorial_dp_controller start_tutorial_dp_controller_demo.launch This will start the Gazebo simulator with an instance of the RexROV vehicle with this custom controller being used for positioning. You can use one the modules from the uuv_control_utils package to send the vehicle some waypoints and see the controller in action. For example, use the default list of waypoints and send them to the controller by using roslaunch uuv_control_utils send_waypoints_file.launch uuv_name: = rexrov The local planner in uuv_control_interfaces that is used per default by the DPControllerBase class will receive the waypoints and apply a linear interpolation with polynomial blends to generate a path to be followed by the vehicle.","title":"Creating new dynamic positioning controller"},{"location":"tutorials/creating_new_dp_controller/#creating-the-custom-controller-package","text":"First, a new catkin package will be created to include the scripts and launch files necessary for this implementation. Replace the name of the catkin workspace catkin_ws below if yours is named differently. cd ~/catkin_ws/src catkin_create_pkg uuv_tutorial_dp_controller This command will create the necessary files for the new package which will be edited further on in this tutorial. Next, two folders are needed, one launch folder to the launch files and one scripts folder, where the implementation of the custom controller will be stored. cd ~/catkin_ws/src/uuv_tutorial_dp_controller mkdir launch scripts","title":"Creating the custom controller package"},{"location":"tutorials/creating_new_dp_controller/#creating-the-controller-node","text":"In the scripts folder, a Python file has to be created, here we will name it tutorial_dp_controller.py . touch scripts/tutorial_dp_controller.py This file will have the implementation of the controller named TutorialDPController , a very simple PID controller, as shown below. #!/usr/bin/env python import rospy import numpy as np from uuv_control_interfaces import DPControllerBase class TutorialDPController ( DPControllerBase ): def __init__ ( self ): super ( TutorialDPController , self ) . __init__ ( self ) self . _Kp = np . zeros ( shape = ( 6 , 6 )) self . _Kd = np . zeros ( shape = ( 6 , 6 )) self . _Ki = np . zeros ( shape = ( 6 , 6 )) self . _int = np . zeros ( shape = ( 6 ,)) self . _error_pose = np . zeros ( shape = ( 6 ,)) # Do the same for the other two matrices if rospy . get_param ( '~Kp' ): diag = rospy . get_param ( '~Kp' ) if len ( diag ) == 6 : self . _Kp = np . diag ( diag ) print 'Kp= \\n ' , self . _Kp else : # If the vector provided has the wrong dimension, raise an exception raise rospy . ROSException ( 'For the Kp diagonal matrix, 6 coefficients are needed' ) if rospy . get_param ( '~Kd' ): diag = rospy . get_param ( '~Kd' ) if len ( diag ) == 6 : self . _Kd = np . diag ( diag ) print 'Kd= \\n ' , self . _Kd else : # If the vector provided has the wrong dimension, raise an exception raise rospy . ROSException ( 'For the Kd diagonal matrix, 6 coefficients are needed' ) if rospy . get_param ( '~Ki' ): diag = rospy . get_param ( '~Ki' ) if len ( diag ) == 6 : self . _Ki = np . diag ( diag ) print 'Ki= \\n ' , self . _Ki else : # If the vector provided has the wrong dimension, raise an exception raise rospy . ROSException ( 'For the Ki diagonal matrix, 6 coefficients are needed' ) self . _is_init = True def _reset_controller ( self ): super ( TutorialDPController , self ) . _reset_controller () self . _error_pose = np . zeros ( shape = ( 6 ,)) self . _int = np . zeros ( shape = ( 6 ,)) def update_controller ( self ): if not self . _is_init : return False if not self . odom_is_init : return self . _int = self . _int + 0.5 * ( self . error_pose_euler + self . _error_pose ) * self . _dt self . _error_pose = self . error_pose_euler tau = np . dot ( self . _Kp , self . error_pose_euler ) + np . dot ( self . _Kd , self . _errors [ 'vel' ]) + np . dot ( self . _Ki , self . _int ) self . publish_control_wrench ( tau ) if __name__ == '__main__' : print ( 'Tutorial - DP Controller' ) rospy . init_node ( 'tutorial_dp_controller' ) try : node = TutorialDPController () rospy . spin () except rospy . ROSInterruptException : print ( 'caught exception' ) print ( 'exiting' ) Analyzing the file in detail, for the controller to use the controller modules from uuv_control_interfaces , it has to inherit the DPControllerBase class and initialize it class TutorialDPController ( DPControllerBase ): def __init__ ( self ): super ( TutorialDPController , self ) . __init__ ( self ) This will setup the super class to initialize, for example, odometry message subscribers and thruster manager topic publishers. For model-based controllers, the super class constructor has to be called as super ( TutorialDPController , self ) . __init__ ( self , is_model_based = True ) The controller's parameters, in this case K_p K_p , K_d K_d and K_i K_i should retrieved from the parameter server to allow the controller to be used in different configurations. One alternative is to read this information from the node's private parameter namespace as shown below. This is done by adding a ~ in front of the parameters's tag. The parameter has to be provided at the controller's launch file accordingly, which will be discussed later on. if rospy . get_param ( '~Kd' ): diag = rospy . get_param ( '~Kd' ) if len ( diag ) == 6 : self . _Kd = np . diag ( diag ) print 'Kd= \\n ' , self . _Kd else : # If the vector provided has the wrong dimension, raise an exception raise rospy . ROSException ( 'For the Kd diagonal matrix, 6 coefficients are needed' ) The _reset_controller method can be overriden in case internal variables must be reset when the reset service call is received. It is important to also call the super class' reset method as seen below to ensure that error and reference vectors are also going to be cleared. super ( TutorialDPController , self ) . _reset_controller () When using the super class DPControllerBase , there is no need to add an controller update sequence or a timer. Once the method update_controller is implemented in the controller class, it will be given as a callback function to the odometry update method. This update method should include the controller's algorithm and generate the control effort vector (in this case \\tau \\tau ) and use the super class function publish_control_wrench to publish it to the thruster manager input. The last part of the file is necessary for the ROS node to be executed. if __name__ == '__main__' : print ( 'Tutorial - DP Controller' ) rospy . init_node ( 'tutorial_dp_controller' ) try : node = TutorialDPController () rospy . spin () except rospy . ROSInterruptException : print ( 'caught exception' ) print ( 'exiting' )","title":"Creating the controller node"},{"location":"tutorials/creating_new_dp_controller/#configuring-the-launch-files","text":"Once the custom controller is done, you have to turn your Python script into an executable and it can be done as follows, otherwise you will not be able to start the ROS node. chmod u+x tutorial_dp_controller.py Next step is to setup the launch file for the new controller. Create a new launch file as follows cd ~/catkin_ws/src/uuv_tutorial_dp_controller/launch touch start_tutorial_dp_controller.launch Edit the file to include the following <launch> <arg name= \"uuv_name\" /> <arg name= \"model_name\" default= \"$(arg uuv_name)\" /> <arg name= \"saturation\" default= \"5000\" /> <arg name= \"Kp\" default= \"11993.888,11993.888,11993.888,19460.069,19460.069,19460.069\" /> <arg name= \"Kd\" default= \"9077.459,9077.459,9077.459,18880.925,18880.925,18880.925\" /> <arg name= \"Ki\" default= \"321.417,321.417,321.417,2096.951,2096.951,2096.951\" /> <arg name= \"output_dir\" default= \"$(find uuv_thruster_manager)/config/$(arg model_name)\" /> <arg name= \"config_file\" default= \"$(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml\" /> <arg name= \"tam_file\" default= \"$(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml\" /> <include file= \"$(find uuv_thruster_manager)/launch/thruster_manager.launch\" > <arg name= \"uuv_name\" value= \"$(arg uuv_name)\" /> <arg name= \"model_name\" value= \"$(arg model_name)\" /> <arg name= \"output_dir\" value= \"$(arg output_dir)\" /> <arg name= \"config_file\" value= \"$(arg config_file)\" /> <arg name= \"tam_file\" value= \"$(arg tam_file)\" /> </include> <group ns= \"$(arg uuv_name)\" > <node pkg= \"uuv_control_utils\" type= \"trajectory_marker_publisher.py\" name= \"trajectory_marker_publisher\" output= \"screen\" > <remap from= \"trajectory\" to= \"dp_controller/trajectory\" /> <remap from= \"waypoints\" to= \"dp_controller/waypoints\" /> </node> <node pkg= \"uuv_tutorial_dp_controller\" type= \"tutorial_dp_controller.py\" name= \"tutorial_dp_controller\" output= \"screen\" > <remap from= \"odom\" to= \"pose_gt\" /> <remap from= \"trajectory\" to= \"dp_controller/trajectory\" /> <remap from= \"input_trajectory\" to= \"dp_controller/input_trajectory\" /> <remap from= \"waypoints\" to= \"dp_controller/waypoints\" /> <remap from= \"error\" to= \"dp_controller/error\" /> <remap from= \"reference\" to= \"dp_controller/reference\" /> <remap from= \"thruster_output\" to= \"thruster_manager/input_stamped\" /> <rosparam subst_value= \"true\" > saturation: $(arg saturation) Kp: [$(arg Kp)] Kd: [$(arg Kd)] Ki: [$(arg Ki)] </rosparam> </node> </group> </launch> The most important parts of the launch file to notice is that the vehicle namespace uuv_name must always be provided, since the simulation per default will have nodes specific to the operation of each vehicle created inside their namespaces. The thruster manager must also be initialized. Info For more information on how to setup the thruster manager, check the tutorial about configuration of the thruster manager . Finally, the controller node has to be called, along with the correct parameters set by the arguments K_p K_p , K_d K_d and K_i K_i in this example. You can pass this parameters by command line or set default vectors as seen above, but there should be no spaces between commas and values. They have to be set in the rosparam block. The trajectory_marker_publisher is an optional node used only to publish visual markers. To start a small demonstration using the RexROV vehicle, you can create another launch file as follows cd ~/catkin_ws/src/uuv_tutorial_dp_controller/launch touch start_tutorial_dp_controller_demo.launch and initialize a world, the vehicle and the RViz visualization tool as follows <launch> <!-- This launch file will start the controller nodes with the necessary parameters --> <!-- Vehicle namespace: since the simulation can run with multiple vehicle, each vehicle is created under a namespace, which is per default equal to the name of vehicle model, but can be assigned differently at startup --> <arg name= \"uuv_name\" /> <!-- Name of the vehicle model: the name of the robot model --> <arg name= \"model_name\" default= \"$(arg uuv_name)\" /> <!-- Control effort saturation --> <arg name= \"saturation\" default= \"5000\" /> <!-- The controller parameters are given below and will be given to the controller node in its private namespace. These are vectors and for roslaunch to see this as one argument, there can be no spaces between the commas and the floating point values. The default values are usually the ones that are going to be used. --> <arg name= \"Kp\" default= \"11993.888,11993.888,11993.888,19460.069,19460.069,19460.069\" /> <arg name= \"Kd\" default= \"9077.459,9077.459,9077.459,18880.925,18880.925,18880.925\" /> <arg name= \"Ki\" default= \"321.417,321.417,321.417,2096.951,2096.951,2096.951\" /> <arg name= \"output_dir\" default= \"$(find uuv_thruster_manager)/config/$(arg model_name)\" /> <arg name= \"config_file\" default= \"$(find uuv_thruster_manager)/config/$(arg model_name)/thruster_manager.yaml\" /> <arg name= \"tam_file\" default= \"$(find uuv_thruster_manager)/config/$(arg model_name)/TAM.yaml\" /> <!-- For the control vector to be distributed amongst the thrusters, a thruster manager node has to be initialized for this specific vehicle. The thruster manager will calculate the thruster allocation matrix if none is provided, but it is better if the TAM is stored in a YAML file beforehand. Check the tutorial on how to initialize the thruster allocation matrix. --> <include file= \"$(find uuv_thruster_manager)/launch/thruster_manager.launch\" > <!-- The thruster manager will use the namespace uuv_name to initialize the node and will use the robot's model_name to search for the YAML file containing the thruster allocation matrix. --> <arg name= \"uuv_name\" value= \"$(arg uuv_name)\" /> <arg name= \"model_name\" value= \"$(arg model_name)\" /> <arg name= \"output_dir\" value= \"$(arg output_dir)\" /> <arg name= \"config_file\" value= \"$(arg config_file)\" /> <arg name= \"tam_file\" value= \"$(arg tam_file)\" /> </include> <!-- It is important to start all nodes relative to this vehicle under the vehicle's namespace in order to avoid errors and parameter being initialized in wrong place. Most of the nodes per default are going to look for configuration parameters and topics under the vehicle's namespace per default. --> <group ns= \"$(arg uuv_name)\" > <!-- This node just reads the trajectory and waypoint topics and publishes visualization markers to RViz, but is not essential to the controller's operation --> <node pkg= \"uuv_control_utils\" type= \"trajectory_marker_publisher.py\" name= \"trajectory_marker_publisher\" output= \"screen\" > <remap from= \"trajectory\" to= \"dp_controller/trajectory\" /> <remap from= \"waypoints\" to= \"dp_controller/waypoints\" /> </node> <!-- Start the vehicle controller node. Remember to include this controller's script correctly in the CMakeLists.txt file of your catkin package. This can be done by adding the following line in the CMakeLists.txt after the line where catkin_package() is given: catkin_install_python(PROGRAMS scripts/tutorial_dp_controller.py DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}) The scripts/tutorial_dp_controller.py file must also be set as an executable as follows >> cd <path_to_ros_package>/scripts >> chmod 777 tutorial_dp_controller.py --> <node pkg= \"uuv_tutorial_dp_controller\" type= \"tutorial_dp_controller.py\" name= \"tutorial_dp_controller\" output= \"screen\" > <!-- Remap necessary topics --> <remap from= \"odom\" to= \"pose_gt\" /> <remap from= \"trajectory\" to= \"dp_controller/trajectory\" /> <remap from= \"input_trajectory\" to= \"dp_controller/input_trajectory\" /> <remap from= \"waypoints\" to= \"dp_controller/waypoints\" /> <remap from= \"error\" to= \"dp_controller/error\" /> <remap from= \"reference\" to= \"dp_controller/reference\" /> <remap from= \"thruster_output\" to= \"thruster_manager/input_stamped\" /> <!-- Set the controller parameters in the node's private namespace--> <rosparam subst_value= \"true\" > saturation: $(arg saturation) Kp: [$(arg Kp)] Kd: [$(arg Kd)] Ki: [$(arg Ki)] </rosparam> </node> </group> <!-- Now run the demo file to start a new simulation with this controller >> roslaunch uuv_tutorial_dp_controller start_tutorial_dp_controller_demo.launch --> </launch> Before you can run this demo, the package has to be configured.","title":"Configuring the launch files"},{"location":"tutorials/creating_new_dp_controller/#configuring-the-package","text":"To allow catkin to install all your modules, you can open the CMakeLists.txt file from your catkin package and edit it to look like in the example below. cmake_minimum_required ( VERSION 2.8.3 ) project ( uuv_tutorial_dp_controller ) find_package ( catkin REQUIRED ) catkin_package () catkin_install_python ( PROGRAMS scripts/tutorial_dp_controller.py DESTINATION ${ CATKIN_PACKAGE_BIN_DESTINATION } ) install ( DIRECTORY launch DESTINATION ${ CATKIN_PACKAGE_SHARE_DESTINATION } PATTERN \"*~\" EXCLUDE )","title":"Configuring the package"},{"location":"tutorials/creating_new_dp_controller/#running-the-simulation","text":"After you compile you workspace again with catkin_make or catkin build , you can run the demo launch file created before. roslaunch uuv_tutorial_dp_controller start_tutorial_dp_controller_demo.launch This will start the Gazebo simulator with an instance of the RexROV vehicle with this custom controller being used for positioning. You can use one the modules from the uuv_control_utils package to send the vehicle some waypoints and see the controller in action. For example, use the default list of waypoints and send them to the controller by using roslaunch uuv_control_utils send_waypoints_file.launch uuv_name: = rexrov The local planner in uuv_control_interfaces that is used per default by the DPControllerBase class will receive the waypoints and apply a linear interpolation with polynomial blends to generate a path to be followed by the vehicle.","title":"Running the simulation"},{"location":"tutorials/disturbances/","text":"One of the steps to evaluate the vehicle's performance using a control strategy is to check how it would behave under different kinds of disturbances. One tool that can be used is an option in Gazebo through the GUI or using a ROS service to apply forces and torque to a link in the scenario. Additionally, it is possible to use the services provided by this package's underwater world Gazebo plugin to set a constant current velocity to the vehicles. To make this type of tests easier, some scripts are available in the package uuv_control_utils to schedule disturbances to happen during the simulation, making it easier to reproduce a scenario where the disturbances have to be active only at a certain simulation time or have a limited duration. The uuv_control_utils package provides scripts to apply the disturbances at specific times and also launch files that can be built in an use-case scenario. The files mentioned below are available at the uuv_tutorial_disturbances . Thruster failure \u00b6 One interesting use-case to be tested is to see how the vehicle would behave in case one or more thrusters stops working. The thruster plugin provides a service call to set the thruster state to ON or OFF . Each thruster unit generates the service names automatically as follows /<model_name>/thrusters/<thruster_id>/set_thruster_state /<model_name>/thrusters/<thruster_id>/get_thruster_state The RexROV vehicle, for instance, provides the set thruster state service for thruster #2 as /rexrov/thrusters/2/set_thruster_state. To use the service call, a few options are presented below. Setting thruster state through ROS service call \u00b6 When you start the simulation with an thruster-actuated underwater vehicle, the thruster services will be made available by the thruster unit plugins. So, if you start, for example, the PID controller demo launch file as roslaunch uuv_gazebo start_pid_demo.launch you can set the state of one of the thrusters to OFF using the following rosservice call /rexrov/thrusters/2/set_thruster_state \"'on': false\" You can check the state of the thruster unit by calling rosservice call /rexrov/thrusters/2/get_thruster_state which should return is_on: False Using the uuv_control_utils ROS nodes \u00b6 Even though the service call can be used in run time, if you want to schedule one or more thrusters to be turned off at a specific time and, optionally, set them to be turned on again after some time, you can use the ROS node in uuv_control_utils , set_thruster_state.py . As an example, start the previous simulation again roslaunch uuv_gazebo start_pid_demo.launch and then start the node with its launch file as roslaunch uuv_control_utils set_thruster_state.launch uuv_name:=rexrov starting_time:=10 duration:=20 is_on:=false thruster_id:=2 The argument uuv_name refers to the namespace of the robot model, starting_time is the simulation time stamp when the thruster state is going to be altered in seconds, duration refers to the duration in seconds of this new thruster state (set it to -1 if the thruster should be kept in this state indefinitely), is_on should be set to false to turn off the thruster and thruster_id is the index of the unit. This launch file can also be included in other launch files to build a scenario with this thruster failure setup. The following example can called to demonstrate this as roslaunch uuv_tutorial_disturbances tutorial_thruster_state.launch You can monitor the thruster output during the simulation using rqt_plot or by reading the thruster unit output topic as rostopic echo /rexrov/thrusters/2/thrust Thruster and propeller efficiency loss \u00b6 Another possibility is to set a efficiency factor to the thruster unit's thrust force output and/or to the propeller's dynamic state variable (usually the rotor's angular velocity). The services that allow these settings are, respectively /<model_name>/thrusters/<thruster_id>/set_thrust_force_efficiency /<model_name>/thrusters/<thruster_id>/set_dynamic_state_efficiency Setting thruster and propeller efficiency through ROS service call \u00b6 Similar to the last example, you can start a simulation scenario with a vehicle, such as the demo roslaunch uuv_gazebo start_pid_demo.launch and then make a service call such as rosservice call /rexrov/thrusters/2/set_thrust_force_efficiency \"efficiency: 0.1\" Using the uuv_control_utils ROS nodes \u00b6 For the setup of a thruster output efficiency factor during the simulation, you can use the launch file roslaunch uuv_control_utils set_thruster_output_efficiency.launch uuv_name: = rexrov starting_time: = 10 thruster_id: = 2 duration: = 20 efficiency: = 0 .3 where the argument efficiency must be a floating number from 0.0 to 1.0. A example is available and can be launched as follows roslaunch uuv_tutorial_disturbances tutorial_thruster_efficiency.launch Body wrench disturbances \u00b6 It is also possible to set a simple step wrench disturbance to be applied on the center of mass of the vehicle during the simulation using Gazebo's apply body wrench services. To see more details on how to use Gazebo's ROS service, check this link . In order to manage to use this disturbance in a launch file, you can also use the following roslaunch uuv_control_utils apply_body_wrench.launch uuv_name: = rexrov starting_time: = 0 .0 duration: = 10 force_x: = 0 force_y: = 0 force_z: = 0 torque_x: = 0 torque_y: = 0 torque_z: = 0 It is not necessary to set force and torque components explicitly if they are supposed to be set to 0.0, the launch file already does that per default. The duration can be set to -1 if the wrench must be applied for an indefinitely amount of time. It is important to remember that the wrench will be applied on the center of mass of the vehicle's base link with respect to the inertial frame. You can run the following launch file to see an example of this disturbance roslaunch uuv_tutorial_disturbances tutorial_body_wrench.launch Current velocity \u00b6 The current velocity is probably the most important type of disturbance in this list. Each model in the simulation running an instance of the underwater object plugin <https://github.com/uuvsimulator/uuv_simulator/blob/master/uuv_gazebo_plugins/uuv_gazebo_plugins/src/UnderwaterObjectPlugin.cc> _ with defined linear and quadratic damping coefficients will be affected by the current velocity that is published by the underwater world plugin through the topic /hydrodynamics/current_velocity . The underwater object plugin can also subscribe to its own private current velocity topic /<model_name/current_velocity , but this is subject for another tutorial. The underwater world plugin can generate current velocity topics using three separate Gauss-Markov processes as described in Fossen, 2011 (for the current velocity magnitude, horizontal angle and vertical angle) that can be also set in the world SDF file. Setting the current velocity model using ROS service calls \u00b6 There are different possibilities to set the current velocity through service call. The simplest option is to simply set constant current velocity vector as in the example rosservice call /hydrodynamics/set_current_velocity \"velocity: 1.0 horizontal_angle: -0.8 vertical_angle: 0.2\" The angles here are expressed in radians. These parameters can also be individually set using the following calls rosservice call /hydrodynamics/set_current_horz_angle \"angle: 0.0\" rosservice call /hydrodynamics/set_current_vert_angle \"angle: 0.0\" and you can monitor the current velocity topic /hydrodynamics/current_velocity on the terminal with rostopic echo or in rqt . It is important to note that the current velocity is calculated in Gazebo's ENU reference frame since it does not recognize the SNAME convention. If you visualize the simulation output in RViz, you can subscribe to the topic /<model_name>/current_velocity_marker to see an arrow indicating the direction of the current velocity as shown in the image below. The marker disappears if the current velocity is set to zero. As mentioned, the current velocity magnitude, horizontal and vertical angles are modelled as Gauss-Markov processes to allow a small variation around a mean value. These models can be set using the service calls below rosservice call /hydrodynamics/set_current_velocity_model \"{mean: 0.0, min: 0.0, max: 0.0, noise: 0.0, mu: 0.0}\" rosservice call /hydrodynamics/set_current_horz_angle_model \"{mean: 0.0, min: 0.0, max: 0.0, noise: 0.0, mu: 0.0}\" rosservice call /hydrodynamics/set_current_vert_angle_model \"{mean: 0.0, min: 0.0, max: 0.0, noise: 0.0, mu: 0.0}\" Using the uuv_control_utils ROS node \u00b6 In order set a current velocity to the simulation without needing manual service calls or changes in the world's SDF file, a ROS node is available in the uuv_control_utils package, but currently only for constant current velocity models. You can call it using the following launch file roslaunch uuv_control_utils set_timed_current_perturbation.launch starting_time: = 0 .0 end_time: = 10 .0 current_vel: = 1 .0 horizontal_angle: = 10 .0 vertical_angle: = 30 This ROS node takes the horizontal and vertical angles in degrees and the current can also be set to end in a fixed time by using the argument end_time . You can run the following tutorial example to see how it can be used roslaunch uuv_tutorial_disturbances tutorial_timed_current.launch Disturbance manager \u00b6 All of these past examples are very helpful to set individual disturbances, but in case one scenario needs several (and sometimes different) disturbance models to be activated in the same simulation scenario, you can use the disturbance manager node <https://github.com/uuvsimulator/uuv_simulator/blob/master/uuv_control/uuv_control_utils/launch/start_disturbance_manager.launch> _. With this tool, you can make an YAML files with the full configuration of the disturbances that will be activated during the simulation such as in the example below disturbances: - type: current starting_time: 0 velocity: 1.2 horizontal_angle: 0 vertical_angle: 0 duration: 10 - type: thruster_state starting_time: 10 duration: 10 thruster_id: 2 is_on: 0 - type: propeller_efficiency starting_time: 20 duration: 10 thruster_id: 4 efficiency: 0.2 - type: thrust_efficiency starting_time: 30 duration: 10 thruster_id: 4 efficiency: 0.1 - type: wrench starting_time: 40 duration: 10 force: - 1500 - 0 - -1500 torque: - 1000 - 0 - 0 and pass the path of the file to the disturbance manager node as in the following example <include file= \"$(find uuv_control_utils)/launch/start_disturbance_manager.launch\" > <arg name= \"uuv_name\" value= \"rexrov\" /> <arg name= \"use_file\" value= \"true\" /> <arg name= \"disturbance_file\" value= \"$(find uuv_tutorial_disturbances)/config/disturbances.yaml\" /> </include> The functionalities mentioned previously, such as disturbance duration, remain the same. Run the following example to see how it works :: roslaunch uuv_tutorial_disturbances tutorial_disturbance_manager.launch","title":"Disturbances"},{"location":"tutorials/disturbances/#thruster-failure","text":"One interesting use-case to be tested is to see how the vehicle would behave in case one or more thrusters stops working. The thruster plugin provides a service call to set the thruster state to ON or OFF . Each thruster unit generates the service names automatically as follows /<model_name>/thrusters/<thruster_id>/set_thruster_state /<model_name>/thrusters/<thruster_id>/get_thruster_state The RexROV vehicle, for instance, provides the set thruster state service for thruster #2 as /rexrov/thrusters/2/set_thruster_state. To use the service call, a few options are presented below.","title":"Thruster failure"},{"location":"tutorials/disturbances/#setting-thruster-state-through-ros-service-call","text":"When you start the simulation with an thruster-actuated underwater vehicle, the thruster services will be made available by the thruster unit plugins. So, if you start, for example, the PID controller demo launch file as roslaunch uuv_gazebo start_pid_demo.launch you can set the state of one of the thrusters to OFF using the following rosservice call /rexrov/thrusters/2/set_thruster_state \"'on': false\" You can check the state of the thruster unit by calling rosservice call /rexrov/thrusters/2/get_thruster_state which should return is_on: False","title":"Setting thruster state through ROS service call"},{"location":"tutorials/disturbances/#using-the-uuv_control_utils-ros-nodes","text":"Even though the service call can be used in run time, if you want to schedule one or more thrusters to be turned off at a specific time and, optionally, set them to be turned on again after some time, you can use the ROS node in uuv_control_utils , set_thruster_state.py . As an example, start the previous simulation again roslaunch uuv_gazebo start_pid_demo.launch and then start the node with its launch file as roslaunch uuv_control_utils set_thruster_state.launch uuv_name:=rexrov starting_time:=10 duration:=20 is_on:=false thruster_id:=2 The argument uuv_name refers to the namespace of the robot model, starting_time is the simulation time stamp when the thruster state is going to be altered in seconds, duration refers to the duration in seconds of this new thruster state (set it to -1 if the thruster should be kept in this state indefinitely), is_on should be set to false to turn off the thruster and thruster_id is the index of the unit. This launch file can also be included in other launch files to build a scenario with this thruster failure setup. The following example can called to demonstrate this as roslaunch uuv_tutorial_disturbances tutorial_thruster_state.launch You can monitor the thruster output during the simulation using rqt_plot or by reading the thruster unit output topic as rostopic echo /rexrov/thrusters/2/thrust","title":"Using the uuv_control_utils ROS nodes"},{"location":"tutorials/disturbances/#thruster-and-propeller-efficiency-loss","text":"Another possibility is to set a efficiency factor to the thruster unit's thrust force output and/or to the propeller's dynamic state variable (usually the rotor's angular velocity). The services that allow these settings are, respectively /<model_name>/thrusters/<thruster_id>/set_thrust_force_efficiency /<model_name>/thrusters/<thruster_id>/set_dynamic_state_efficiency","title":"Thruster and propeller efficiency loss"},{"location":"tutorials/disturbances/#setting-thruster-and-propeller-efficiency-through-ros-service-call","text":"Similar to the last example, you can start a simulation scenario with a vehicle, such as the demo roslaunch uuv_gazebo start_pid_demo.launch and then make a service call such as rosservice call /rexrov/thrusters/2/set_thrust_force_efficiency \"efficiency: 0.1\"","title":"Setting thruster and propeller efficiency through ROS service call"},{"location":"tutorials/disturbances/#using-the-uuv_control_utils-ros-nodes_1","text":"For the setup of a thruster output efficiency factor during the simulation, you can use the launch file roslaunch uuv_control_utils set_thruster_output_efficiency.launch uuv_name: = rexrov starting_time: = 10 thruster_id: = 2 duration: = 20 efficiency: = 0 .3 where the argument efficiency must be a floating number from 0.0 to 1.0. A example is available and can be launched as follows roslaunch uuv_tutorial_disturbances tutorial_thruster_efficiency.launch","title":"Using the uuv_control_utils ROS nodes"},{"location":"tutorials/disturbances/#body-wrench-disturbances","text":"It is also possible to set a simple step wrench disturbance to be applied on the center of mass of the vehicle during the simulation using Gazebo's apply body wrench services. To see more details on how to use Gazebo's ROS service, check this link . In order to manage to use this disturbance in a launch file, you can also use the following roslaunch uuv_control_utils apply_body_wrench.launch uuv_name: = rexrov starting_time: = 0 .0 duration: = 10 force_x: = 0 force_y: = 0 force_z: = 0 torque_x: = 0 torque_y: = 0 torque_z: = 0 It is not necessary to set force and torque components explicitly if they are supposed to be set to 0.0, the launch file already does that per default. The duration can be set to -1 if the wrench must be applied for an indefinitely amount of time. It is important to remember that the wrench will be applied on the center of mass of the vehicle's base link with respect to the inertial frame. You can run the following launch file to see an example of this disturbance roslaunch uuv_tutorial_disturbances tutorial_body_wrench.launch","title":"Body wrench disturbances"},{"location":"tutorials/disturbances/#current-velocity","text":"The current velocity is probably the most important type of disturbance in this list. Each model in the simulation running an instance of the underwater object plugin <https://github.com/uuvsimulator/uuv_simulator/blob/master/uuv_gazebo_plugins/uuv_gazebo_plugins/src/UnderwaterObjectPlugin.cc> _ with defined linear and quadratic damping coefficients will be affected by the current velocity that is published by the underwater world plugin through the topic /hydrodynamics/current_velocity . The underwater object plugin can also subscribe to its own private current velocity topic /<model_name/current_velocity , but this is subject for another tutorial. The underwater world plugin can generate current velocity topics using three separate Gauss-Markov processes as described in Fossen, 2011 (for the current velocity magnitude, horizontal angle and vertical angle) that can be also set in the world SDF file.","title":"Current velocity"},{"location":"tutorials/disturbances/#setting-the-current-velocity-model-using-ros-service-calls","text":"There are different possibilities to set the current velocity through service call. The simplest option is to simply set constant current velocity vector as in the example rosservice call /hydrodynamics/set_current_velocity \"velocity: 1.0 horizontal_angle: -0.8 vertical_angle: 0.2\" The angles here are expressed in radians. These parameters can also be individually set using the following calls rosservice call /hydrodynamics/set_current_horz_angle \"angle: 0.0\" rosservice call /hydrodynamics/set_current_vert_angle \"angle: 0.0\" and you can monitor the current velocity topic /hydrodynamics/current_velocity on the terminal with rostopic echo or in rqt . It is important to note that the current velocity is calculated in Gazebo's ENU reference frame since it does not recognize the SNAME convention. If you visualize the simulation output in RViz, you can subscribe to the topic /<model_name>/current_velocity_marker to see an arrow indicating the direction of the current velocity as shown in the image below. The marker disappears if the current velocity is set to zero. As mentioned, the current velocity magnitude, horizontal and vertical angles are modelled as Gauss-Markov processes to allow a small variation around a mean value. These models can be set using the service calls below rosservice call /hydrodynamics/set_current_velocity_model \"{mean: 0.0, min: 0.0, max: 0.0, noise: 0.0, mu: 0.0}\" rosservice call /hydrodynamics/set_current_horz_angle_model \"{mean: 0.0, min: 0.0, max: 0.0, noise: 0.0, mu: 0.0}\" rosservice call /hydrodynamics/set_current_vert_angle_model \"{mean: 0.0, min: 0.0, max: 0.0, noise: 0.0, mu: 0.0}\"","title":"Setting the current velocity model using ROS service calls"},{"location":"tutorials/disturbances/#using-the-uuv_control_utils-ros-node","text":"In order set a current velocity to the simulation without needing manual service calls or changes in the world's SDF file, a ROS node is available in the uuv_control_utils package, but currently only for constant current velocity models. You can call it using the following launch file roslaunch uuv_control_utils set_timed_current_perturbation.launch starting_time: = 0 .0 end_time: = 10 .0 current_vel: = 1 .0 horizontal_angle: = 10 .0 vertical_angle: = 30 This ROS node takes the horizontal and vertical angles in degrees and the current can also be set to end in a fixed time by using the argument end_time . You can run the following tutorial example to see how it can be used roslaunch uuv_tutorial_disturbances tutorial_timed_current.launch","title":"Using the uuv_control_utils ROS node"},{"location":"tutorials/disturbances/#disturbance-manager","text":"All of these past examples are very helpful to set individual disturbances, but in case one scenario needs several (and sometimes different) disturbance models to be activated in the same simulation scenario, you can use the disturbance manager node <https://github.com/uuvsimulator/uuv_simulator/blob/master/uuv_control/uuv_control_utils/launch/start_disturbance_manager.launch> _. With this tool, you can make an YAML files with the full configuration of the disturbances that will be activated during the simulation such as in the example below disturbances: - type: current starting_time: 0 velocity: 1.2 horizontal_angle: 0 vertical_angle: 0 duration: 10 - type: thruster_state starting_time: 10 duration: 10 thruster_id: 2 is_on: 0 - type: propeller_efficiency starting_time: 20 duration: 10 thruster_id: 4 efficiency: 0.2 - type: thrust_efficiency starting_time: 30 duration: 10 thruster_id: 4 efficiency: 0.1 - type: wrench starting_time: 40 duration: 10 force: - 1500 - 0 - -1500 torque: - 1000 - 0 - 0 and pass the path of the file to the disturbance manager node as in the following example <include file= \"$(find uuv_control_utils)/launch/start_disturbance_manager.launch\" > <arg name= \"uuv_name\" value= \"rexrov\" /> <arg name= \"use_file\" value= \"true\" /> <arg name= \"disturbance_file\" value= \"$(find uuv_tutorial_disturbances)/config/disturbances.yaml\" /> </include> The functionalities mentioned previously, such as disturbance duration, remain the same. Run the following example to see how it works :: roslaunch uuv_tutorial_disturbances tutorial_disturbance_manager.launch","title":"Disturbance manager"},{"location":"tutorials/plume_simulation/","text":"Tracking and/or mapping of chemical plumes is one of the use-cases often addressed when regarding guidances strategies for AUVs. It presents also a challenge when setting up a simulation in order to design the desired algorithm since the setup of the real experiment can present various types of challenges and can hardly be repeated under the same conditions. For this objective, the algorithm presented in Tian, 2010 for both the dynamics of plume particles and the particle concentration sensor have been implemented in the uuv_plume_simulation . For a detailed explanation on the implementation of a passive scalar turbulent plume, please refer to Tian, 2010 and the ROS implementation for the particle generation here . To run this ROS node, be sure to clone the package in your catkin workspace as follows cd ~/catkin_ws/src git clone https://github.com/uuvsimulator/uuv_plume_simulator.git and build it cd ~/catkin_ws catkin build source devel/setup.bash To run the plume generator ROS node, call the demo launch file roslaunch uuv_plume_simulator start_plume_example.launch One script is already available to setup an example of a turbulent plume model in the package and can be initialized by calling rosrun uuv_plume_simulator set_demo_turbulent_plume If no current is active in the Gazebo world, the particles will accumulate around the plume source. To start a current velocity model, run the script rosrun uuv_plume_simulator set_current_vel By changing the current, it is possible to steer the plume. To measure the particle concentration using the algorithm described in Tian, 2010 , the vehicle must have a sensor unit from the chemical particle concentration available in the uuv_sensor_ros_plugins . A number of URDF snippets to initialize this sensor in the URDF robot description can be found in the sensor package . One example of implementation is already presented in the description of the rexrov2 vehicle in the declaration of its sensor units as shown below <!-- Mount chemical particle concentration sensor --> <xacro:default_chemical_concentration_sensor_macro namespace= \"${namespace}\" parent_link= \"${namespace}/base_link\" inertial_reference_frame= \"${inertial_reference_frame}\" > <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> </xacro:default_chemical_concentration_sensor_macro> A sample of the output in rviz and rqt can be seen below. Feel free to check the sample plume script and the URDF sensor snippets to see the input arguments that can be changed to modify both the plume and concentration sensor settings.","title":"Plume simulation"},{"location":"tutorials/seabed_world/","text":"For the following tutorial, all the files can also be found in the uuv_tutorial_seabed_world package. The seabed can be critical in simulation scenarios where the objective is, for example, to use UUVs for bathymetric mapping or just to make the scenario look more realistic. Gazebo already has a feature to generate heightmaps from grayscale images (see the video below). This is a very quick way to setup a heightmap, but it can happen that its complexity might make the simulation run slower when trying to interact with it. Gazebo: Heightmap Tutorial from OSRF on Vimeo . Another option is to take an existent point cloud of a seabed and convert it into a mesh that can be imported in Gazebo like any other model. Creating the mesh file \u00b6 Measurement data can be sparse and have outliers that need to be removed before generating the mesh. The script below is an example on how the measurement data can be interpolated into a grid and later converted into an STL file. For this example, we will use the test surface available in the matplotlib package, but you should replace it with your own point cloud data. You will also need the packages numpy , scipy and numpy-stl . To install the necessary packages, you can use pip sudo apt install python-pip pip install numpy scipy matplotlib numpy-stl --user To generate the mesh, change the code below to your needs import numpy as np from scipy.interpolate import griddata import scipy.ndimage as ndimage from scipy.ndimage import gaussian_filter from scipy.misc import imsave from matplotlib import cm import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D from stl import mesh , Mode import matplotlib.tri as mtri from mpl_toolkits.mplot3d.axes3d import get_test_data # Generating the surface x , y , z = get_test_data ( delta = 0.1 ) # Scale the surface for this example z *= 0.05 # Remember that Gazebo uses ENU (east-north-up) convention, so underwater # the Z coordinate will be negative z -= 3 # Note: Gazebo will import your mesh in meters. # Point clouds usually don't come in nice grids, so let's make it a (N, 3) # matrix just to show how it can be done. If you have outliers or noise, you should # treat those values now. xyz = np . zeros ( shape = ( x . size , 3 )) xyz [:, 0 ] = x . flatten () xyz [:, 1 ] = y . flatten () xyz [:, 2 ] = z . flatten () # Generate a grid for the X and Y coordinates, change the number of points # to your needs. Large grids can generate files that are too big for Gazebo, so # be careful when choosing the resolution of your grid. x_grid , y_grid = np . meshgrid ( np . linspace ( xyz [:, 0 ] . min (), xyz [:, 0 ] . max (), 300 ), np . linspace ( xyz [:, 1 ] . min (), xyz [:, 1 ] . max (), 200 )) # Interpolate over the point cloud for our grid z_grid = griddata ( xyz [:, 0 : 2 ], xyz [:, 2 ], ( x_grid , y_grid ), method = 'linear' ) # Option to treat noise #z_grid = gaussian_filter(z_grid, sigma=1) # Show the resulting heightmap as an image fig = plt . figure ( figsize = ( 8 , 6 )) ax = fig . add_subplot ( 111 ) plt . imshow ( z_grid ) # Flatten our interpolated data for triangulation output = np . zeros ( shape = ( x_grid . size , 3 )) output [:, 0 ] = x_grid . flatten () output [:, 1 ] = y_grid . flatten () output [:, 2 ] = z_grid . flatten () # Triangulation of the interpolated data tri = mtri . Triangulation ( output [:, 0 ], output [:, 1 ]) # Show the resulting surface fig = plt . figure ( figsize = ( 8 , 6 )) ax = fig . add_subplot ( 111 , projection = '3d' ) ax . plot_trisurf ( tri , output [:, 2 ], cmap = plt . cm . CMRmap , shade = True , linewidth = 0.1 ) ax . axis ( 'equal' ) # Create the mesh object seabed_mesh = mesh . Mesh ( np . zeros ( tri . triangles . shape [ 0 ], dtype = mesh . Mesh . dtype )) # Set the vectors for i , f in enumerate ( tri . triangles ): for j in range ( 3 ): seabed_mesh . vectors [ i ][ j ] = output [ f [ j ]] # Store the seabed as a STL file seabed_mesh . save ( 'seabed.stl' ) plt . show () Below you can see the resulting heightmap as an image and the triangulated grid used for the creation of the seabed Now a seabed.stl data has been created or you can download it here . You can open it using MeshLab or Blender . Here we will use Blender to show the surface. You can also use Blender to edit the mesh, if necessary. Even though the surface is ready, if you import it in Gazebo as it is you might not be able to have contact forces if you hit the seabed with your robot. One way to solve it is to import the STL in Blender using the STL importer tool and once the surface is uploaded, go to the Modifiers section of the right panel as follows and choose the option Solidify in the Add modifier popup menu. Enter a value for the surface's thickness as shown below and click on the button Apply . You can now export you surface again using the STL exporter tool. Now you need to create a SDF model description of your seabed to load it in Gazebo. Creating the Gazebo seabed model \u00b6 Note For the further steps, be sure to have followed the installation instructions that can be found in this page . To be able to load your seabed mesh in Gazebo, you need a SDF model describing it. Starting from the folder structure, let's create a new catkin package for this world description. The folder structure below is only a suggestion based on the structure used in this package. cd ~/catkin_ws/src catkin_create_pkg uuv_tutorial_seabed_world cd uuv_tutorial_seabed_world mkdir models worlds launch mkdir -p models/tutorial_seabed/meshes Let's create the files for our seabed model. cd ~/catkin_ws/src/uuv_tutorial_seabed_world/models/tutorial_seabed touch model.config model.sdf Now copy the seabed.stl file into the folder uuv_tutorial_seabed_world/models/tutorial_seabed/meshes . For the Gazebo seabed model, you will need to create the following files in your uuv_tutorial_seabed_world/models/tutorial_seabed folder. The materials used below come from UUV simulator's materials description . You can replace them for other textures. You can change them to, for example, the default materials provided by Gazebo . model.config <?xml version=\"1.0\"?> <model> <name> Tutorial - Seabed </name> <version> 1.0 </version> <sdf version= \"1.5\" > model.sdf </sdf> <author> <name> John Doe </name> <email> john.doe@email.com </email> </author> <description> A nice seabed. </description> </model> model.sdf <?xml version=\"1.0\" ?> <sdf version= \"1.5\" > <model name= \"seabed\" > <static> true </static> <link name= \"seabed_link\" > <visual name= \"surface\" > <cast_shadows> false </cast_shadows> <pose> 0 0 0 0 0 0 </pose> <geometry> <box> <size> 60 60 .1 </size> </box> </geometry> <material> <script> <uri> file://Media/materials/scripts/water.material </uri> <name> UUVSimulator/StaticWater </name> </script> </material> </visual> <visual name= \"seafloor\" > <pose> 0 0 0 0 0 0 </pose> <geometry> <mesh><uri> model://tutorial_seabed/meshes/seabed.stl </uri><scale> 1 1 1 </scale></mesh> </geometry> <material> <script> <uri> file://Media/materials/scripts/sand.material </uri> <name> UUVSimulator/SandAndStones </name> </script> </material> </visual> <collision name= \"seafloor\" > <pose> 0 0 0 0 0 0 </pose> <geometry> <mesh><uri> model://tutorial_seabed/meshes/seabed.stl </uri><scale> 1 1 1 </scale></mesh> </geometry> </collision> </link> </model> </sdf> Now you can configure your catkin package so that the model can be listed in Gazebo as a model. For that you'll have to configure the package.xml and CMakeLists.txt files as in the examples below. CMakeLists.txt cmake_minimum_required(VERSION 2.8.3) project(uuv_tutorial_seabed_world) find_package(catkin REQUIRED) catkin_package() install(DIRECTORY launch worlds models DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION} PATTERN \"*~\" EXCLUDE) package.xml For this file, be sure to have the following lines <?xml version=\"1.0\"?> <package format= \"2\" > <name> uuv_tutorial_seabed_world </name> <version> 0.6.11 </version> <description> A simple tutorial on how to create a new Gazebo model with a seabed and how to configure it as a simulation scenario </description> <maintainer email= \"musa.marcusso@de.bosch.com\" > Musa Morena Marcusso Manhaes </maintainer> <maintainer email= \"sebastian.scherer2@de.bosch.com\" > Sebastian Scherer </maintainer> <maintainer email= \"luizricardo.douat@de.bosch.com\" > Luiz Ricardo Douat </maintainer> <author email= \"musa.marcusso@de.bosch.com\" > Musa Morena Marcusso Manhaes </author> <author email= \"sebastian.scherer2@de.bosch.com\" > Sebastian Scherer </author> <author email= \"luizricardo.douat@de.bosch.com\" > Luiz Ricardo Douat </author> <license> Apache-2.0 </license> <buildtool_depend> catkin </buildtool_depend> <exec_depend> gazebo_ros </exec_depend> <export> <gazebo_ros gazebo_media_path= \"${prefix}\" gazebo_model_path= \"${prefix}/models\" /> </export> </package> You can now build your workspace as cd ~/catkin_ws catkin_make or cd ~/catkin_ws catkin build if you are using catkin_tools . Now, if you open Gazebo using roslaunch gazebo_ros empty_world.launch and delete the ground_plane model under the Models list, and then select the Tutorial - Seabed model from the list at the Insert tab, you will be able to see the following screen Creating a new Gazebo world \u00b6 Now that the model is done, you can create a Gazebo world to load your scenario with the seabed model. Create a new world file as follows roscd uuv_tutorial_seabed_world/worlds touch example_underwater.world and a launch file to start it roscd uuv_tutorial_seabed_world/launch touch tutorial_seabed_world.launch The contents of both files can be seen below example_underwater.world <?xml version=\"1.0\" ?> <sdf version= \"1.5\" > <world name= \"example_underwater\" > <physics name= \"default_physics\" default= \"true\" type= \"ode\" > <max_step_size> 0.002 </max_step_size> <real_time_factor> 1 </real_time_factor> <real_time_update_rate> 500 </real_time_update_rate> <ode> <solver> <type> quick </type> <iters> 50 </iters> <sor> 0.5 </sor> </solver> </ode> </physics> <scene> <ambient> 0.01 0.01 0.01 1.0 </ambient> <sky> <clouds> <speed> 12 </speed> </clouds> </sky> <shadows> 1 </shadows> </scene> <!-- Global light source --> <include> <uri> model://sun </uri> </include> <include> <uri> model://tutorial_seabed </uri> <pose> 0 0 0 0 0 0 </pose> </include> <plugin name= \"underwater_current_plugin\" filename= \"libuuv_underwater_current_ros_plugin.so\" > <namespace> hydrodynamics </namespace> <constant_current> <topic> current_velocity </topic> <velocity> <mean> 0 </mean> <min> 0 </min> <max> 5 </max> <mu> 0.0 </mu> <noiseAmp> 0.0 </noiseAmp> </velocity> <horizontal_angle> <mean> 0 </mean> <min> -3.141592653589793238 </min> <max> 3.141592653589793238 </max> <mu> 0.0 </mu> <noiseAmp> 0.0 </noiseAmp> </horizontal_angle> <vertical_angle> <mean> 0 </mean> <min> -3.141592653589793238 </min> <max> 3.141592653589793238 </max> <mu> 0.0 </mu> <noiseAmp> 0.0 </noiseAmp> </vertical_angle> </constant_current> </plugin> <plugin name= \"sc_interface\" filename= \"libuuv_sc_ros_interface_plugin.so\" /> </world> </sdf> tutorial_seabed_world.launch <launch> <arg name= \"gui\" default= \"true\" /> <arg name= \"paused\" default= \"false\" /> <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched --> <include file= \"$(find gazebo_ros)/launch/empty_world.launch\" > <!-- Edit the name of the world file (example_underwater.world) when using this template --> <arg name= \"world_name\" value= \"worlds/example_underwater.world\" /> <arg name= \"paused\" value= \"$(arg paused)\" /> <arg name= \"use_sim_time\" value= \"true\" /> <arg name= \"gui\" value= \"$(arg gui)\" /> <arg name= \"headless\" value= \"false\" /> <arg name= \"debug\" value= \"false\" /> <arg name= \"verbose\" value= \"true\" /> </include> </launch> Now you can launch your world using roslaunch uuv_tutorial_seabed_world tutorial_seabed_world.launch and the result on the screen should be Done! Now the custom seabed can be used for your simulation.","title":"Creating a new world with a custom seabed"},{"location":"tutorials/seabed_world/#creating-the-mesh-file","text":"Measurement data can be sparse and have outliers that need to be removed before generating the mesh. The script below is an example on how the measurement data can be interpolated into a grid and later converted into an STL file. For this example, we will use the test surface available in the matplotlib package, but you should replace it with your own point cloud data. You will also need the packages numpy , scipy and numpy-stl . To install the necessary packages, you can use pip sudo apt install python-pip pip install numpy scipy matplotlib numpy-stl --user To generate the mesh, change the code below to your needs import numpy as np from scipy.interpolate import griddata import scipy.ndimage as ndimage from scipy.ndimage import gaussian_filter from scipy.misc import imsave from matplotlib import cm import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D from stl import mesh , Mode import matplotlib.tri as mtri from mpl_toolkits.mplot3d.axes3d import get_test_data # Generating the surface x , y , z = get_test_data ( delta = 0.1 ) # Scale the surface for this example z *= 0.05 # Remember that Gazebo uses ENU (east-north-up) convention, so underwater # the Z coordinate will be negative z -= 3 # Note: Gazebo will import your mesh in meters. # Point clouds usually don't come in nice grids, so let's make it a (N, 3) # matrix just to show how it can be done. If you have outliers or noise, you should # treat those values now. xyz = np . zeros ( shape = ( x . size , 3 )) xyz [:, 0 ] = x . flatten () xyz [:, 1 ] = y . flatten () xyz [:, 2 ] = z . flatten () # Generate a grid for the X and Y coordinates, change the number of points # to your needs. Large grids can generate files that are too big for Gazebo, so # be careful when choosing the resolution of your grid. x_grid , y_grid = np . meshgrid ( np . linspace ( xyz [:, 0 ] . min (), xyz [:, 0 ] . max (), 300 ), np . linspace ( xyz [:, 1 ] . min (), xyz [:, 1 ] . max (), 200 )) # Interpolate over the point cloud for our grid z_grid = griddata ( xyz [:, 0 : 2 ], xyz [:, 2 ], ( x_grid , y_grid ), method = 'linear' ) # Option to treat noise #z_grid = gaussian_filter(z_grid, sigma=1) # Show the resulting heightmap as an image fig = plt . figure ( figsize = ( 8 , 6 )) ax = fig . add_subplot ( 111 ) plt . imshow ( z_grid ) # Flatten our interpolated data for triangulation output = np . zeros ( shape = ( x_grid . size , 3 )) output [:, 0 ] = x_grid . flatten () output [:, 1 ] = y_grid . flatten () output [:, 2 ] = z_grid . flatten () # Triangulation of the interpolated data tri = mtri . Triangulation ( output [:, 0 ], output [:, 1 ]) # Show the resulting surface fig = plt . figure ( figsize = ( 8 , 6 )) ax = fig . add_subplot ( 111 , projection = '3d' ) ax . plot_trisurf ( tri , output [:, 2 ], cmap = plt . cm . CMRmap , shade = True , linewidth = 0.1 ) ax . axis ( 'equal' ) # Create the mesh object seabed_mesh = mesh . Mesh ( np . zeros ( tri . triangles . shape [ 0 ], dtype = mesh . Mesh . dtype )) # Set the vectors for i , f in enumerate ( tri . triangles ): for j in range ( 3 ): seabed_mesh . vectors [ i ][ j ] = output [ f [ j ]] # Store the seabed as a STL file seabed_mesh . save ( 'seabed.stl' ) plt . show () Below you can see the resulting heightmap as an image and the triangulated grid used for the creation of the seabed Now a seabed.stl data has been created or you can download it here . You can open it using MeshLab or Blender . Here we will use Blender to show the surface. You can also use Blender to edit the mesh, if necessary. Even though the surface is ready, if you import it in Gazebo as it is you might not be able to have contact forces if you hit the seabed with your robot. One way to solve it is to import the STL in Blender using the STL importer tool and once the surface is uploaded, go to the Modifiers section of the right panel as follows and choose the option Solidify in the Add modifier popup menu. Enter a value for the surface's thickness as shown below and click on the button Apply . You can now export you surface again using the STL exporter tool. Now you need to create a SDF model description of your seabed to load it in Gazebo.","title":"Creating the mesh file"},{"location":"tutorials/seabed_world/#creating-the-gazebo-seabed-model","text":"Note For the further steps, be sure to have followed the installation instructions that can be found in this page . To be able to load your seabed mesh in Gazebo, you need a SDF model describing it. Starting from the folder structure, let's create a new catkin package for this world description. The folder structure below is only a suggestion based on the structure used in this package. cd ~/catkin_ws/src catkin_create_pkg uuv_tutorial_seabed_world cd uuv_tutorial_seabed_world mkdir models worlds launch mkdir -p models/tutorial_seabed/meshes Let's create the files for our seabed model. cd ~/catkin_ws/src/uuv_tutorial_seabed_world/models/tutorial_seabed touch model.config model.sdf Now copy the seabed.stl file into the folder uuv_tutorial_seabed_world/models/tutorial_seabed/meshes . For the Gazebo seabed model, you will need to create the following files in your uuv_tutorial_seabed_world/models/tutorial_seabed folder. The materials used below come from UUV simulator's materials description . You can replace them for other textures. You can change them to, for example, the default materials provided by Gazebo . model.config <?xml version=\"1.0\"?> <model> <name> Tutorial - Seabed </name> <version> 1.0 </version> <sdf version= \"1.5\" > model.sdf </sdf> <author> <name> John Doe </name> <email> john.doe@email.com </email> </author> <description> A nice seabed. </description> </model> model.sdf <?xml version=\"1.0\" ?> <sdf version= \"1.5\" > <model name= \"seabed\" > <static> true </static> <link name= \"seabed_link\" > <visual name= \"surface\" > <cast_shadows> false </cast_shadows> <pose> 0 0 0 0 0 0 </pose> <geometry> <box> <size> 60 60 .1 </size> </box> </geometry> <material> <script> <uri> file://Media/materials/scripts/water.material </uri> <name> UUVSimulator/StaticWater </name> </script> </material> </visual> <visual name= \"seafloor\" > <pose> 0 0 0 0 0 0 </pose> <geometry> <mesh><uri> model://tutorial_seabed/meshes/seabed.stl </uri><scale> 1 1 1 </scale></mesh> </geometry> <material> <script> <uri> file://Media/materials/scripts/sand.material </uri> <name> UUVSimulator/SandAndStones </name> </script> </material> </visual> <collision name= \"seafloor\" > <pose> 0 0 0 0 0 0 </pose> <geometry> <mesh><uri> model://tutorial_seabed/meshes/seabed.stl </uri><scale> 1 1 1 </scale></mesh> </geometry> </collision> </link> </model> </sdf> Now you can configure your catkin package so that the model can be listed in Gazebo as a model. For that you'll have to configure the package.xml and CMakeLists.txt files as in the examples below. CMakeLists.txt cmake_minimum_required(VERSION 2.8.3) project(uuv_tutorial_seabed_world) find_package(catkin REQUIRED) catkin_package() install(DIRECTORY launch worlds models DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION} PATTERN \"*~\" EXCLUDE) package.xml For this file, be sure to have the following lines <?xml version=\"1.0\"?> <package format= \"2\" > <name> uuv_tutorial_seabed_world </name> <version> 0.6.11 </version> <description> A simple tutorial on how to create a new Gazebo model with a seabed and how to configure it as a simulation scenario </description> <maintainer email= \"musa.marcusso@de.bosch.com\" > Musa Morena Marcusso Manhaes </maintainer> <maintainer email= \"sebastian.scherer2@de.bosch.com\" > Sebastian Scherer </maintainer> <maintainer email= \"luizricardo.douat@de.bosch.com\" > Luiz Ricardo Douat </maintainer> <author email= \"musa.marcusso@de.bosch.com\" > Musa Morena Marcusso Manhaes </author> <author email= \"sebastian.scherer2@de.bosch.com\" > Sebastian Scherer </author> <author email= \"luizricardo.douat@de.bosch.com\" > Luiz Ricardo Douat </author> <license> Apache-2.0 </license> <buildtool_depend> catkin </buildtool_depend> <exec_depend> gazebo_ros </exec_depend> <export> <gazebo_ros gazebo_media_path= \"${prefix}\" gazebo_model_path= \"${prefix}/models\" /> </export> </package> You can now build your workspace as cd ~/catkin_ws catkin_make or cd ~/catkin_ws catkin build if you are using catkin_tools . Now, if you open Gazebo using roslaunch gazebo_ros empty_world.launch and delete the ground_plane model under the Models list, and then select the Tutorial - Seabed model from the list at the Insert tab, you will be able to see the following screen","title":"Creating the Gazebo seabed model"},{"location":"tutorials/seabed_world/#creating-a-new-gazebo-world","text":"Now that the model is done, you can create a Gazebo world to load your scenario with the seabed model. Create a new world file as follows roscd uuv_tutorial_seabed_world/worlds touch example_underwater.world and a launch file to start it roscd uuv_tutorial_seabed_world/launch touch tutorial_seabed_world.launch The contents of both files can be seen below example_underwater.world <?xml version=\"1.0\" ?> <sdf version= \"1.5\" > <world name= \"example_underwater\" > <physics name= \"default_physics\" default= \"true\" type= \"ode\" > <max_step_size> 0.002 </max_step_size> <real_time_factor> 1 </real_time_factor> <real_time_update_rate> 500 </real_time_update_rate> <ode> <solver> <type> quick </type> <iters> 50 </iters> <sor> 0.5 </sor> </solver> </ode> </physics> <scene> <ambient> 0.01 0.01 0.01 1.0 </ambient> <sky> <clouds> <speed> 12 </speed> </clouds> </sky> <shadows> 1 </shadows> </scene> <!-- Global light source --> <include> <uri> model://sun </uri> </include> <include> <uri> model://tutorial_seabed </uri> <pose> 0 0 0 0 0 0 </pose> </include> <plugin name= \"underwater_current_plugin\" filename= \"libuuv_underwater_current_ros_plugin.so\" > <namespace> hydrodynamics </namespace> <constant_current> <topic> current_velocity </topic> <velocity> <mean> 0 </mean> <min> 0 </min> <max> 5 </max> <mu> 0.0 </mu> <noiseAmp> 0.0 </noiseAmp> </velocity> <horizontal_angle> <mean> 0 </mean> <min> -3.141592653589793238 </min> <max> 3.141592653589793238 </max> <mu> 0.0 </mu> <noiseAmp> 0.0 </noiseAmp> </horizontal_angle> <vertical_angle> <mean> 0 </mean> <min> -3.141592653589793238 </min> <max> 3.141592653589793238 </max> <mu> 0.0 </mu> <noiseAmp> 0.0 </noiseAmp> </vertical_angle> </constant_current> </plugin> <plugin name= \"sc_interface\" filename= \"libuuv_sc_ros_interface_plugin.so\" /> </world> </sdf> tutorial_seabed_world.launch <launch> <arg name= \"gui\" default= \"true\" /> <arg name= \"paused\" default= \"false\" /> <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched --> <include file= \"$(find gazebo_ros)/launch/empty_world.launch\" > <!-- Edit the name of the world file (example_underwater.world) when using this template --> <arg name= \"world_name\" value= \"worlds/example_underwater.world\" /> <arg name= \"paused\" value= \"$(arg paused)\" /> <arg name= \"use_sim_time\" value= \"true\" /> <arg name= \"gui\" value= \"$(arg gui)\" /> <arg name= \"headless\" value= \"false\" /> <arg name= \"debug\" value= \"false\" /> <arg name= \"verbose\" value= \"true\" /> </include> </launch> Now you can launch your world using roslaunch uuv_tutorial_seabed_world tutorial_seabed_world.launch and the result on the screen should be Done! Now the custom seabed can be used for your simulation.","title":"Creating a new Gazebo world"},{"location":"tutorials/simulation_wrapper/","text":".. _simulation_wrapper: How to use the wrapper class for repetitive simulation runs \u00b6 One of the good advantages of simulation implemenations is the possibility of evaluating the complete closed-loop system under several different scenarios that would be difficult to reproduce in real experiments. That is the case for reinforcement learning and optimization algorithms, to name a few use-cases where the simulation could be used for system evaluation. Even though that is a promising application of any Gazebo/ROS based simulation, the actual implementation of a wrapper with which the simulation can be started and terminated in a controlled environment involves a lot of attention in order to guarantee that all ROS nodes can be properly started. For this purposes, a set of nodes and process managers have been implemented as part of the uuv_simulation_evaluation <https://github.com/uuvsimulator/uuv_simulation_evaluation> _. Be sure to install the package in your catkin workspace :: cd ~/catkin_ws/src git clone https://github.com/uuvsimulator/uuv_simulation_evaluation.git then build the workspace:: cd ~/catkin_ws catkin build source devel/setup.bash .. note:: The uuv_simulation_evaluation package also requires extra dependencies that can be installed as follows:: pip3 install smac Starting and terminating the simulation using a timeout \u00b6 Per default, it is not possible to set a termination time for the simulation. This is acchieved by a very simple ROS node that is launched by the file below .. literalinclude:: ../files/tutorials/simulation_wrapper/set_simulation_timer.launch :language: xml and starts the set_simulation_timer <https://github.com/uuvsimulator/uuv_simulation_evaluation/blob/master/uuv_simulation_wrapper/scripts/set_simulation_timer> _ Python ROS node. This node will simply read simulation time from /clock and use the timeout input argument to count down the simulation time. Since the node is initialized with the required flag, all ROS processes are terminated once the timeout is reached. The only requirement is that this node has to be called with the rest of the processes running the simulation (including the Gazebo process) to terminate the simulation at a specified timeout, namely start the set_simulation_timer node in the launch file. .. note:: For more information on the required flag, check the official ROS wiki page <http://wiki.ros.org/roslaunch/XML/node> _. One small example is starting the empty underwater world and setting a simulation timeout in a launch file as follows :: <include file=\"$(find uuv_simulation_wrapper)/launch/set_simulation_timer.launch\"> <arg name=\"timeout\" value=\"10\"/> </include> This example will lead to the Gazebo simulation being terminated after 10 seconds. One further problem can appear when starting a large number of ROS nodes that depend on Gazebo's simulation. Gazebo's process can often take some time to be initialized and some services and topics might not be available right away until all plugins have been set in place. That can lead to some issues with some ROS nodes that will find that services and topics are unavailable right after starting the simulation. That is easier to control when starting all nodes manually using the command line, but can be an issue when setting up automated simulation runs. For this issue, one further ROS node can be used to unpause the Gazebo simulation after a timeout, making it easier to control the startup process. This can be seen in the following sample launch file :: <include file=\"$(find uuv_simulation_wrapper)/launch/set_simulation_timer.launch\"> <arg name=\"timeout\" value=\"10\"/> </include> <include file=\"$(find uuv_simulation_wrapper)/launch/unpause_simulation.launch\"> <arg name=\"timeout\" value=\"5\"/> </include> What this example does is unpause the simulation after 5 seconds and helps to control the startup of all nodes that use the simulation time for their cycles. Is essential in this case to start the Gazebo world with the paused flag set to true . :: This example can be run using the following sample launch file :: roslaunch uuv_simulation_timer_example start_timer_example.launch Using the Python wrapper to run a simulation \u00b6 In the uuv_simulation_wrapper package, a simulation wrapper is implemented as a part of the uuv_simulation_runner Python library that can be used to start a simulation and evaluate its resulting ROS bag from a Python application. Some configuration is needed to acchieve it, but an example is available in the catkin package uuv_simulation_runner_example <https://github.com/uuvsimulator/uuv_simulation_evaluation/tree/master/uuv_evaluation_examples/uuv_simulation_runner_example> _. The folder structure of the this demonstration consists of a catkin package set as :: uuv_simulation_runner_example |-- config |-- task.yml |-- launch |-- start_simulation.launch |-- scripts |-- run_grid_search -- CMakeLists.txt -- package.xml The different elements necessary to make the evaluation using the wrapper are described below. Simulation launcher ^ ^ ^ ^ ^ ^ ^ The launch file start_simulation.launch <https://github.com/uuvsimulator/uuv_simulation_evaluation/blob/master/uuv_evaluation_examples/uuv_simulation_runner_example/launch/start_simulation.launch> _ must contain all the nodes and elements to start the simulation that needs to be evaluated. In this example the Gazebo world starts with the simulation timers presented in the previous section, a RexROV vehicle is spawned with a PID controller node. A helical trajectory then is initialized and a constant current is applied to the scenario. Some of the elements of the launch file that will be common to other use-cases are described below. Recording the results The evaluation of the simulation is achieved by analyzing the resulting ROS bag. The simulation wrapper expects the launch file to have an input string bag_filename to set, and it can be defined in the launch file as follows :: In the launch file there must be also an rosbag recording node being started having the vehicle's states and other topics as an input as in the example below :: (arg bag_filename) /rexrov/dp_controller/trajectory /rexrov/dp_controller/reference /rexrov/pose_gt_ned /hydrodynamics/current_velocity /rexrov/thruster_manager/input /rexrov/wrench_perturbation /rexrov/thrusters/0/thrust /rexrov/thrusters/1/thrust /rexrov/thrusters/2/thrust /rexrov/thrusters/3/thrust /rexrov/thrusters/4/thrust /rexrov/thrusters/5/thrust /rexrov/thrusters/6/thrust /rexrov/thrusters/7/thrust\" if=\" (arg bag_filename) /rexrov/dp_controller/trajectory /rexrov/dp_controller/reference /rexrov/pose_gt_ned /hydrodynamics/current_velocity /rexrov/thruster_manager/input /rexrov/wrench_perturbation /rexrov/thrusters/0/thrust /rexrov/thrusters/1/thrust /rexrov/thrusters/2/thrust /rexrov/thrusters/3/thrust /rexrov/thrusters/4/thrust /rexrov/thrusters/5/thrust /rexrov/thrusters/6/thrust /rexrov/thrusters/7/thrust\" if=\" (arg record)\"/> The record flag is optional but useful while testing the launch file before running the simulation with the wrapper to avoid recording ROS bag unnecessarely. .. note:: The pose of the vehicle can be recorded with respect to Gazebo's default inertial frame world (that uses the East-North-Up convention) by using the / /pose_gt topic or with respect to the generated world_ned frame (that uses the North-East-Down convention) by using / /pose_gt_ned . For this the vehicle must use the sensor plugins included in uuv_sensor_ros_plugins package and the static TF frame world_ned must exist (which is already done when starting one of the Gazebo worlds included in the UUV simulator package). Check this Wikipedia page <https://en.wikipedia.org/wiki/Axes_conventions> _ for more information on both conventions. .. note:: The topic /rexrov/wrench_perturbation is generated when using the disturbance manager node described in :ref: disturbances . Turning off the frontend during the evaluation To avoid unnecessary overhead when doing repetitive evaluations of the same scenario, a flag can be given as an input of to turn off the Gazebo client and other visualization tools as RViz. In the example the flag is given as :: and is used as :: (find uuv_descriptions)/launch/empty_underwater_world.launch\"> <arg name=\"gui\" value=\" (find uuv_descriptions)/launch/empty_underwater_world.launch\"> <arg name=\"gui\" value=\" (arg gui)\"/> (find uuv_gazebo)/rviz/controller_demo.rviz\" if=\" (find uuv_gazebo)/rviz/controller_demo.rviz\" if=\" (arg gui)\"/> Having the flag as an input is useful when running the launch file without the evaluation to check the scenario, namely :: roslaunch uuv_simulation_runner_example start_simulation.launch gui:=true record:=false Having the variables to be varied in the different evaluations as an input For the simulation wrapper to provide different variables that can influence the simulation, these variables have to be configured as input arguments on the launch file. In this example presented here, the vehicle will be set to follow a helical trajectory under constant currents of different magnitudes. The ROS node that generates the constant current is the following :: (find uuv_control_utils)/launch/set_timed_current_perturbation.launch\"> <arg name=\"starting_time\" value=\"0.0\"/> <arg name=\"end_time\" value=\"-1\"/> <arg name=\"current_vel\" value=\" (find uuv_control_utils)/launch/set_timed_current_perturbation.launch\"> <arg name=\"starting_time\" value=\"0.0\"/> <arg name=\"end_time\" value=\"-1\"/> <arg name=\"current_vel\" value=\" (arg current_vel)\"/> and to change the magnitude of the current, the current_vel must be one input argument of the launch file, namely :: The default value is set to zero, but the simulation wrapper is then capable of calling the launch file in a separate process giving current_vel as an input. Simulation timers As explained before, it is crucial to include the simulation timer and unpause simulation nodes so that every simulation run to have the same time span. :: (find uuv_simulation_wrapper)/launch/set_simulation_timer.launch\"> <arg name=\"timeout\" value=\" (find uuv_simulation_wrapper)/launch/set_simulation_timer.launch\"> <arg name=\"timeout\" value=\" (arg timeout)\"/> (find uuv_assistants)/launch/unpause_simulation.launch\"> <arg name=\"timeout\" value=\" (find uuv_assistants)/launch/unpause_simulation.launch\"> <arg name=\"timeout\" value=\" (arg unpause_timeout)\"/> The Gazebo world has to be also initialized using the paused flag as well to the unpause simulation node to work. :: (find uuv_descriptions)/launch/empty_underwater_world.launch\"> <arg name=\"gui\" value=\" (find uuv_descriptions)/launch/empty_underwater_world.launch\"> <arg name=\"gui\" value=\" (arg gui)\"/> Testing the simulation By running the launch file as :: roslaunch uuv_simulation_runner_example start_simulation.launch gui:=true record:=false Both the RViz and Gazebo screens should appear as shown below. .. image:: ../images/tutorial_simulation_runner/sim_gazebo.png .. image:: ../images/tutorial_simulation_runner/sim_rviz.png Simulation wrapper task file ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ The task.yml file contains a set of parameters necessary for the simulation wrapper to run the simulation in a separate process. .. literalinclude:: ../files/tutorials/simulation_wrapper/task.yml The parameters fields are described below: cmd: Command to call the launch file. params: List of parameter to be overriden during the evaluations. Setting the gui to false and record to true are some examples. id: An ID for the evaluation being performed. Simulation runner script ^ ^ ^ ^ ^ ^ ^ ^ The code that uses the simulation wrapper can be seen below, with a step-by-step explanation of its functionalities in the comments. In this example, the Evaluation class is used to read the ROS bag and generate performance indicators, along with plots, but any script can be used for that purpose. .. literalinclude:: ../files/tutorials/simulation_wrapper/run_grid_search :language: python Running the example \u00b6 As shown in this line of the script shown in the last section shows :: DEFAULT_RESULTS = os.path.join(ROOT_PATH, 'results') the results folder will be created in the uuv_simulation_runner_example folder. The results folder in this case will have one folder for each simulation run containing ROS bag, plots and log files for the each simulation scenario run with a different current velocity magnitude. To run the example, use the following command :: rosrun uuv_simulation_runner_example run_grid_search --n_points .. note:: The Python simulation wrapper assigns a random port to the ROS master and Gazebo for each time a new simulation run is done and locks the ports for the duration of the simulation. That allows several instances of the simulation to be started at the same time using this wrapper.","title":"Using the simulation wrapper"},{"location":"tutorials/simulation_wrapper/#how-to-use-the-wrapper-class-for-repetitive-simulation-runs","text":"One of the good advantages of simulation implemenations is the possibility of evaluating the complete closed-loop system under several different scenarios that would be difficult to reproduce in real experiments. That is the case for reinforcement learning and optimization algorithms, to name a few use-cases where the simulation could be used for system evaluation. Even though that is a promising application of any Gazebo/ROS based simulation, the actual implementation of a wrapper with which the simulation can be started and terminated in a controlled environment involves a lot of attention in order to guarantee that all ROS nodes can be properly started. For this purposes, a set of nodes and process managers have been implemented as part of the uuv_simulation_evaluation <https://github.com/uuvsimulator/uuv_simulation_evaluation> _. Be sure to install the package in your catkin workspace :: cd ~/catkin_ws/src git clone https://github.com/uuvsimulator/uuv_simulation_evaluation.git then build the workspace:: cd ~/catkin_ws catkin build source devel/setup.bash .. note:: The uuv_simulation_evaluation package also requires extra dependencies that can be installed as follows:: pip3 install smac","title":"How to use the wrapper class for repetitive simulation runs"},{"location":"tutorials/simulation_wrapper/#starting-and-terminating-the-simulation-using-a-timeout","text":"Per default, it is not possible to set a termination time for the simulation. This is acchieved by a very simple ROS node that is launched by the file below .. literalinclude:: ../files/tutorials/simulation_wrapper/set_simulation_timer.launch :language: xml and starts the set_simulation_timer <https://github.com/uuvsimulator/uuv_simulation_evaluation/blob/master/uuv_simulation_wrapper/scripts/set_simulation_timer> _ Python ROS node. This node will simply read simulation time from /clock and use the timeout input argument to count down the simulation time. Since the node is initialized with the required flag, all ROS processes are terminated once the timeout is reached. The only requirement is that this node has to be called with the rest of the processes running the simulation (including the Gazebo process) to terminate the simulation at a specified timeout, namely start the set_simulation_timer node in the launch file. .. note:: For more information on the required flag, check the official ROS wiki page <http://wiki.ros.org/roslaunch/XML/node> _. One small example is starting the empty underwater world and setting a simulation timeout in a launch file as follows :: <include file=\"$(find uuv_simulation_wrapper)/launch/set_simulation_timer.launch\"> <arg name=\"timeout\" value=\"10\"/> </include> This example will lead to the Gazebo simulation being terminated after 10 seconds. One further problem can appear when starting a large number of ROS nodes that depend on Gazebo's simulation. Gazebo's process can often take some time to be initialized and some services and topics might not be available right away until all plugins have been set in place. That can lead to some issues with some ROS nodes that will find that services and topics are unavailable right after starting the simulation. That is easier to control when starting all nodes manually using the command line, but can be an issue when setting up automated simulation runs. For this issue, one further ROS node can be used to unpause the Gazebo simulation after a timeout, making it easier to control the startup process. This can be seen in the following sample launch file :: <include file=\"$(find uuv_simulation_wrapper)/launch/set_simulation_timer.launch\"> <arg name=\"timeout\" value=\"10\"/> </include> <include file=\"$(find uuv_simulation_wrapper)/launch/unpause_simulation.launch\"> <arg name=\"timeout\" value=\"5\"/> </include> What this example does is unpause the simulation after 5 seconds and helps to control the startup of all nodes that use the simulation time for their cycles. Is essential in this case to start the Gazebo world with the paused flag set to true . :: This example can be run using the following sample launch file :: roslaunch uuv_simulation_timer_example start_timer_example.launch","title":"Starting and terminating the simulation using a timeout"},{"location":"tutorials/simulation_wrapper/#using-the-python-wrapper-to-run-a-simulation","text":"In the uuv_simulation_wrapper package, a simulation wrapper is implemented as a part of the uuv_simulation_runner Python library that can be used to start a simulation and evaluate its resulting ROS bag from a Python application. Some configuration is needed to acchieve it, but an example is available in the catkin package uuv_simulation_runner_example <https://github.com/uuvsimulator/uuv_simulation_evaluation/tree/master/uuv_evaluation_examples/uuv_simulation_runner_example> _. The folder structure of the this demonstration consists of a catkin package set as :: uuv_simulation_runner_example |-- config |-- task.yml |-- launch |-- start_simulation.launch |-- scripts |-- run_grid_search -- CMakeLists.txt -- package.xml The different elements necessary to make the evaluation using the wrapper are described below. Simulation launcher ^ ^ ^ ^ ^ ^ ^ The launch file start_simulation.launch <https://github.com/uuvsimulator/uuv_simulation_evaluation/blob/master/uuv_evaluation_examples/uuv_simulation_runner_example/launch/start_simulation.launch> _ must contain all the nodes and elements to start the simulation that needs to be evaluated. In this example the Gazebo world starts with the simulation timers presented in the previous section, a RexROV vehicle is spawned with a PID controller node. A helical trajectory then is initialized and a constant current is applied to the scenario. Some of the elements of the launch file that will be common to other use-cases are described below. Recording the results The evaluation of the simulation is achieved by analyzing the resulting ROS bag. The simulation wrapper expects the launch file to have an input string bag_filename to set, and it can be defined in the launch file as follows :: In the launch file there must be also an rosbag recording node being started having the vehicle's states and other topics as an input as in the example below :: (arg bag_filename) /rexrov/dp_controller/trajectory /rexrov/dp_controller/reference /rexrov/pose_gt_ned /hydrodynamics/current_velocity /rexrov/thruster_manager/input /rexrov/wrench_perturbation /rexrov/thrusters/0/thrust /rexrov/thrusters/1/thrust /rexrov/thrusters/2/thrust /rexrov/thrusters/3/thrust /rexrov/thrusters/4/thrust /rexrov/thrusters/5/thrust /rexrov/thrusters/6/thrust /rexrov/thrusters/7/thrust\" if=\" (arg bag_filename) /rexrov/dp_controller/trajectory /rexrov/dp_controller/reference /rexrov/pose_gt_ned /hydrodynamics/current_velocity /rexrov/thruster_manager/input /rexrov/wrench_perturbation /rexrov/thrusters/0/thrust /rexrov/thrusters/1/thrust /rexrov/thrusters/2/thrust /rexrov/thrusters/3/thrust /rexrov/thrusters/4/thrust /rexrov/thrusters/5/thrust /rexrov/thrusters/6/thrust /rexrov/thrusters/7/thrust\" if=\" (arg record)\"/> The record flag is optional but useful while testing the launch file before running the simulation with the wrapper to avoid recording ROS bag unnecessarely. .. note:: The pose of the vehicle can be recorded with respect to Gazebo's default inertial frame world (that uses the East-North-Up convention) by using the / /pose_gt topic or with respect to the generated world_ned frame (that uses the North-East-Down convention) by using / /pose_gt_ned . For this the vehicle must use the sensor plugins included in uuv_sensor_ros_plugins package and the static TF frame world_ned must exist (which is already done when starting one of the Gazebo worlds included in the UUV simulator package). Check this Wikipedia page <https://en.wikipedia.org/wiki/Axes_conventions> _ for more information on both conventions. .. note:: The topic /rexrov/wrench_perturbation is generated when using the disturbance manager node described in :ref: disturbances . Turning off the frontend during the evaluation To avoid unnecessary overhead when doing repetitive evaluations of the same scenario, a flag can be given as an input of to turn off the Gazebo client and other visualization tools as RViz. In the example the flag is given as :: and is used as :: (find uuv_descriptions)/launch/empty_underwater_world.launch\"> <arg name=\"gui\" value=\" (find uuv_descriptions)/launch/empty_underwater_world.launch\"> <arg name=\"gui\" value=\" (arg gui)\"/> (find uuv_gazebo)/rviz/controller_demo.rviz\" if=\" (find uuv_gazebo)/rviz/controller_demo.rviz\" if=\" (arg gui)\"/> Having the flag as an input is useful when running the launch file without the evaluation to check the scenario, namely :: roslaunch uuv_simulation_runner_example start_simulation.launch gui:=true record:=false Having the variables to be varied in the different evaluations as an input For the simulation wrapper to provide different variables that can influence the simulation, these variables have to be configured as input arguments on the launch file. In this example presented here, the vehicle will be set to follow a helical trajectory under constant currents of different magnitudes. The ROS node that generates the constant current is the following :: (find uuv_control_utils)/launch/set_timed_current_perturbation.launch\"> <arg name=\"starting_time\" value=\"0.0\"/> <arg name=\"end_time\" value=\"-1\"/> <arg name=\"current_vel\" value=\" (find uuv_control_utils)/launch/set_timed_current_perturbation.launch\"> <arg name=\"starting_time\" value=\"0.0\"/> <arg name=\"end_time\" value=\"-1\"/> <arg name=\"current_vel\" value=\" (arg current_vel)\"/> and to change the magnitude of the current, the current_vel must be one input argument of the launch file, namely :: The default value is set to zero, but the simulation wrapper is then capable of calling the launch file in a separate process giving current_vel as an input. Simulation timers As explained before, it is crucial to include the simulation timer and unpause simulation nodes so that every simulation run to have the same time span. :: (find uuv_simulation_wrapper)/launch/set_simulation_timer.launch\"> <arg name=\"timeout\" value=\" (find uuv_simulation_wrapper)/launch/set_simulation_timer.launch\"> <arg name=\"timeout\" value=\" (arg timeout)\"/> (find uuv_assistants)/launch/unpause_simulation.launch\"> <arg name=\"timeout\" value=\" (find uuv_assistants)/launch/unpause_simulation.launch\"> <arg name=\"timeout\" value=\" (arg unpause_timeout)\"/> The Gazebo world has to be also initialized using the paused flag as well to the unpause simulation node to work. :: (find uuv_descriptions)/launch/empty_underwater_world.launch\"> <arg name=\"gui\" value=\" (find uuv_descriptions)/launch/empty_underwater_world.launch\"> <arg name=\"gui\" value=\" (arg gui)\"/> Testing the simulation By running the launch file as :: roslaunch uuv_simulation_runner_example start_simulation.launch gui:=true record:=false Both the RViz and Gazebo screens should appear as shown below. .. image:: ../images/tutorial_simulation_runner/sim_gazebo.png .. image:: ../images/tutorial_simulation_runner/sim_rviz.png Simulation wrapper task file ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ The task.yml file contains a set of parameters necessary for the simulation wrapper to run the simulation in a separate process. .. literalinclude:: ../files/tutorials/simulation_wrapper/task.yml The parameters fields are described below: cmd: Command to call the launch file. params: List of parameter to be overriden during the evaluations. Setting the gui to false and record to true are some examples. id: An ID for the evaluation being performed. Simulation runner script ^ ^ ^ ^ ^ ^ ^ ^ The code that uses the simulation wrapper can be seen below, with a step-by-step explanation of its functionalities in the comments. In this example, the Evaluation class is used to read the ROS bag and generate performance indicators, along with plots, but any script can be used for that purpose. .. literalinclude:: ../files/tutorials/simulation_wrapper/run_grid_search :language: python","title":"Using the Python wrapper to run a simulation"},{"location":"tutorials/simulation_wrapper/#running-the-example","text":"As shown in this line of the script shown in the last section shows :: DEFAULT_RESULTS = os.path.join(ROOT_PATH, 'results') the results folder will be created in the uuv_simulation_runner_example folder. The results folder in this case will have one folder for each simulation run containing ROS bag, plots and log files for the each simulation scenario run with a different current velocity magnitude. To run the example, use the following command :: rosrun uuv_simulation_runner_example run_grid_search --n_points .. note:: The Python simulation wrapper assigns a random port to the ROS master and Gazebo for each time a new simulation run is done and locks the ports for the duration of the simulation. That allows several instances of the simulation to be started at the same time using this wrapper.","title":"Running the example"}]}